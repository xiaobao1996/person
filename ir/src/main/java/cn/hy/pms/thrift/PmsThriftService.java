/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.hy.pms.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-03-11")
public class PmsThriftService {

  public interface Iface {

    /**
     * ***** 用户信息 ******
     * 
     * @param userId
     */
    public SysUserThrift findUserByUserId(java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysUserThrift> findUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String realName, java.lang.String username) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysUserThrift> findUserByUserIdList(java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysUserThrift> findUserBySchoolIdAndRealNameLike(java.lang.String schoolId, java.lang.String realName) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findPageUser(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String officeId, java.lang.String groupType, java.lang.String username, java.lang.String realName) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findPageUserWithJsonParams(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserIdListWithJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public void updateUserByUserId(java.lang.String userId, java.lang.String wxOpenId) throws ThriftBusinessException, org.apache.thrift.TException;

    public SysUserThrift findUserByOpenId(java.lang.String openId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> findUserIdBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String officeId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findNjssoStudentByIdIn(java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findStudentBySchoolIdIdIn(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(java.lang.String schoolId, byte papersType, java.lang.String papersNo) throws ThriftBusinessException, org.apache.thrift.TException;

    public void updatePassword(java.lang.String password, java.lang.String newPassword, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findStudentUserByOfficeIdAndSchoolId(java.lang.String officeId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public void updateUserInfo(java.lang.String paramsStr, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public void updateUserInfoByUserIdAndJsonParams(java.lang.String userId, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String loginByUsernameAndPassword(java.lang.String username, java.lang.String password) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findParentBySchoolIdAndUserId(java.lang.String schoolId, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserBySchoolIdAndStaffNoInOrStudentNoIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserBySchoolIdAndOutIdIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUnsyncUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String preSyncTime, java.lang.String syncEndTime, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserWithOutIdByUserId(java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findStudentBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findTeacherBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findChildBySchoolIdAndUserIds(java.lang.String schoolId, java.util.List<java.lang.String> ids) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUnclassifiedUserBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findParentBySchoolIdAndChildIds(java.lang.String schoolId, java.util.List<java.lang.String> ids) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findClassStudentUserIdsBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    /**
     * ***** 班级信息 ******
     * 
     * @param schoolId
     * @param classId
     * @param type
     * @param userId
     */
    public java.lang.String findClassUserDetailBySchoolIdAndClassIdAndOtherParams(java.lang.String schoolId, java.lang.String classId, java.lang.String type, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public void saveOrUpdateClassUserDetail(java.lang.String paramsStr, java.lang.String operateUserId) throws ThriftBusinessException, org.apache.thrift.TException;

    public void deleteClassUserDetail(java.lang.String schoolId, java.lang.String id, java.lang.String operateUserId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findClassUserDetailBySchoolIdAndUserIdAndOtherParams(java.lang.String schoolId, java.lang.String userId, java.lang.String type) throws ThriftBusinessException, org.apache.thrift.TException;

    /**
     * ***** 机构信息 ******
     * 
     * @param schoolId
     */
    public java.lang.String findSchoolBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysOfficeThrift> findAllSchool() throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysOfficeThrift> findOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysOfficeThrift> findOfficeBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysOfficeThrift> findTreeOfficeBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysOfficeThrift> findTreeOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType) throws ThriftBusinessException, org.apache.thrift.TException;

    public SysOfficeThrift findOfficeById(java.lang.String officeId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysOfficeThrift> findOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findAccessableOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(java.lang.String userId, java.lang.String schoolId, java.lang.String roleId, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserOfficeBySchoolIdAndUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException;

    /**
     * ***** 权限信息 ******
     * 
     * @param userId
     * @param schoolCode
     * @param appCode
     */
    public java.util.List<SysMenuPermissionThrift> findMenuPermByUserIdAndSchoolCodeAndAppCode(java.lang.String userId, java.lang.String schoolCode, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysMenuPermissionThrift> findMenuPermByUserIdAndSchoolIdAndAppCode(java.lang.String userId, java.lang.String schoolId, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(java.lang.String schoolId, java.lang.String roleId, java.lang.String jsonStr) throws ThriftBusinessException, org.apache.thrift.TException;

    /**
     * ***** 角色信息 ******
     * 
     * @param userId
     * @param schoolCode
     */
    public java.util.List<SysRoleThrift> findRoleByUserIdAndSchoolCode(java.lang.String userId, java.lang.String schoolCode) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysRoleThrift> findRoleBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public SysRoleThrift findRoleByRoleId(java.lang.String roleId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysRoleThrift> findRoleByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findSchoolRoleListByUserId(java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysRoleThrift> findOpenRoleBySchoolId(java.lang.String schoolId, java.lang.String groupType) throws ThriftBusinessException, org.apache.thrift.TException;

    public void registerRole(java.lang.String paramsStr, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findRolesByUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException;

    /**
     * ***** 角色信息 end******
     * 
     * @param schoolCode
     * @param appCode
     */
    public SysSchoolAppDetailThrift findSchoolAppDetailBySchoolCodeAndAppCode(java.lang.String schoolCode, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SchoolRoleVoThrift> findSchoolByUserIdAndAppCode(java.lang.String userId, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.util.List<SysRoleRegisterRequirementThrift> findSysRoleRegisterRequirementByRoleId(java.lang.String roleId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findNormalUserChildByParentIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findNormalUserParentByChildIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findSchoolAppConfigBySchoolIdAndAppCode(java.lang.String schoolId, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findStudentOrTeacherUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonStr) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findAppByJsonParams(java.lang.String jsonStr) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findOfficeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    /**
     * ***  v4  ****
     * 
     * @param dictTypeCodeList
     */
    public java.lang.String findDictDataByDictTypeCodeList(java.util.List<java.lang.String> dictTypeCodeList) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findSubjectBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findLessonBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findPlaceBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findGradeBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findStudentBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findJobTypeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findJobBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findCalendarBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findStaffBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findHeadTeacherBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findClassUserDetailBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findBriefUserByV5(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findNewPageUserBy(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> officeIdList, java.util.List<java.lang.String> classIdList, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(java.lang.String schoolId, java.lang.String classId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(java.lang.String schoolId, java.lang.String officeId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findAbnormalUserIdListBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findSemesterBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findSysRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findBusiClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

    public java.lang.String findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findUserByUserId(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler) throws org.apache.thrift.TException;

    public void findUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String realName, java.lang.String username, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findUserByUserIdList(java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findUserBySchoolIdAndRealNameLike(java.lang.String schoolId, java.lang.String realName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findPageUser(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String officeId, java.lang.String groupType, java.lang.String username, java.lang.String realName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findPageUserWithJsonParams(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserIdListWithJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void updateUserByUserId(java.lang.String userId, java.lang.String wxOpenId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findUserByOpenId(java.lang.String openId, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler) throws org.apache.thrift.TException;

    public void findUserIdBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String officeId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void findNjssoStudentByIdIn(java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findStudentBySchoolIdIdIn(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(java.lang.String schoolId, byte papersType, java.lang.String papersNo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void updatePassword(java.lang.String password, java.lang.String newPassword, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findStudentUserByOfficeIdAndSchoolId(java.lang.String officeId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void updateUserInfo(java.lang.String paramsStr, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void updateUserInfoByUserIdAndJsonParams(java.lang.String userId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void loginByUsernameAndPassword(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findParentBySchoolIdAndUserId(java.lang.String schoolId, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserBySchoolIdAndStaffNoInOrStudentNoIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserBySchoolIdAndOutIdIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUnsyncUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String preSyncTime, java.lang.String syncEndTime, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserWithOutIdByUserId(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findStudentBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findTeacherBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findChildBySchoolIdAndUserIds(java.lang.String schoolId, java.util.List<java.lang.String> ids, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUnclassifiedUserBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findParentBySchoolIdAndChildIds(java.lang.String schoolId, java.util.List<java.lang.String> ids, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findClassStudentUserIdsBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findClassUserDetailBySchoolIdAndClassIdAndOtherParams(java.lang.String schoolId, java.lang.String classId, java.lang.String type, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void saveOrUpdateClassUserDetail(java.lang.String paramsStr, java.lang.String operateUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteClassUserDetail(java.lang.String schoolId, java.lang.String id, java.lang.String operateUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findClassUserDetailBySchoolIdAndUserIdAndOtherParams(java.lang.String schoolId, java.lang.String userId, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findSchoolBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findAllSchool(org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findOfficeBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findTreeOfficeBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findTreeOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findOfficeById(java.lang.String officeId, org.apache.thrift.async.AsyncMethodCallback<SysOfficeThrift> resultHandler) throws org.apache.thrift.TException;

    public void findOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findAccessableOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(java.lang.String userId, java.lang.String schoolId, java.lang.String roleId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserOfficeBySchoolIdAndUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findMenuPermByUserIdAndSchoolCodeAndAppCode(java.lang.String userId, java.lang.String schoolCode, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findMenuPermByUserIdAndSchoolIdAndAppCode(java.lang.String userId, java.lang.String schoolId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(java.lang.String schoolId, java.lang.String roleId, java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findRoleByUserIdAndSchoolCode(java.lang.String userId, java.lang.String schoolCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findRoleBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findRoleByRoleId(java.lang.String roleId, org.apache.thrift.async.AsyncMethodCallback<SysRoleThrift> resultHandler) throws org.apache.thrift.TException;

    public void findRoleByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findSchoolRoleListByUserId(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findOpenRoleBySchoolId(java.lang.String schoolId, java.lang.String groupType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException;

    public void registerRole(java.lang.String paramsStr, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findRolesByUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findSchoolAppDetailBySchoolCodeAndAppCode(java.lang.String schoolCode, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<SysSchoolAppDetailThrift> resultHandler) throws org.apache.thrift.TException;

    public void findSchoolByUserIdAndAppCode(java.lang.String userId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SchoolRoleVoThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findSysRoleRegisterRequirementByRoleId(java.lang.String roleId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleRegisterRequirementThrift>> resultHandler) throws org.apache.thrift.TException;

    public void findNormalUserChildByParentIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findNormalUserParentByChildIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findSchoolAppConfigBySchoolIdAndAppCode(java.lang.String schoolId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findStudentOrTeacherUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findAppByJsonParams(java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findOfficeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findDictDataByDictTypeCodeList(java.util.List<java.lang.String> dictTypeCodeList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findSubjectBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findLessonBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findPlaceBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findGradeBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findStudentBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findJobTypeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findJobBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findCalendarBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findStaffBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findHeadTeacherBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findClassUserDetailBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findBriefUserByV5(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findNewPageUserBy(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> officeIdList, java.util.List<java.lang.String> classIdList, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(java.lang.String schoolId, java.lang.String classId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(java.lang.String schoolId, java.lang.String officeId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findAbnormalUserIdListBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findSemesterBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findSysRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findBusiClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public SysUserThrift findUserByUserId(java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserByUserId(userId);
      return recv_findUserByUserId();
    }

    public void send_findUserByUserId(java.lang.String userId) throws org.apache.thrift.TException
    {
      findUserByUserId_args args = new findUserByUserId_args();
      args.setUserId(userId);
      sendBase("findUserByUserId", args);
    }

    public SysUserThrift recv_findUserByUserId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserByUserId_result result = new findUserByUserId_result();
      receiveBase(result, "findUserByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserByUserId failed: unknown result");
    }

    public java.util.List<SysUserThrift> findUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String realName, java.lang.String username) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserBySchoolIdAndOtherParams(schoolId, realName, username);
      return recv_findUserBySchoolIdAndOtherParams();
    }

    public void send_findUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String realName, java.lang.String username) throws org.apache.thrift.TException
    {
      findUserBySchoolIdAndOtherParams_args args = new findUserBySchoolIdAndOtherParams_args();
      args.setSchoolId(schoolId);
      args.setRealName(realName);
      args.setUsername(username);
      sendBase("findUserBySchoolIdAndOtherParams", args);
    }

    public java.util.List<SysUserThrift> recv_findUserBySchoolIdAndOtherParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserBySchoolIdAndOtherParams_result result = new findUserBySchoolIdAndOtherParams_result();
      receiveBase(result, "findUserBySchoolIdAndOtherParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserBySchoolIdAndOtherParams failed: unknown result");
    }

    public java.util.List<SysUserThrift> findUserByUserIdList(java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserByUserIdList(userIdList);
      return recv_findUserByUserIdList();
    }

    public void send_findUserByUserIdList(java.util.List<java.lang.String> userIdList) throws org.apache.thrift.TException
    {
      findUserByUserIdList_args args = new findUserByUserIdList_args();
      args.setUserIdList(userIdList);
      sendBase("findUserByUserIdList", args);
    }

    public java.util.List<SysUserThrift> recv_findUserByUserIdList() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserByUserIdList_result result = new findUserByUserIdList_result();
      receiveBase(result, "findUserByUserIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserByUserIdList failed: unknown result");
    }

    public java.util.List<SysUserThrift> findUserBySchoolIdAndRealNameLike(java.lang.String schoolId, java.lang.String realName) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserBySchoolIdAndRealNameLike(schoolId, realName);
      return recv_findUserBySchoolIdAndRealNameLike();
    }

    public void send_findUserBySchoolIdAndRealNameLike(java.lang.String schoolId, java.lang.String realName) throws org.apache.thrift.TException
    {
      findUserBySchoolIdAndRealNameLike_args args = new findUserBySchoolIdAndRealNameLike_args();
      args.setSchoolId(schoolId);
      args.setRealName(realName);
      sendBase("findUserBySchoolIdAndRealNameLike", args);
    }

    public java.util.List<SysUserThrift> recv_findUserBySchoolIdAndRealNameLike() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserBySchoolIdAndRealNameLike_result result = new findUserBySchoolIdAndRealNameLike_result();
      receiveBase(result, "findUserBySchoolIdAndRealNameLike");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserBySchoolIdAndRealNameLike failed: unknown result");
    }

    public java.lang.String findPageUser(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String officeId, java.lang.String groupType, java.lang.String username, java.lang.String realName) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findPageUser(pageNum, pageSize, schoolId, officeId, groupType, username, realName);
      return recv_findPageUser();
    }

    public void send_findPageUser(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String officeId, java.lang.String groupType, java.lang.String username, java.lang.String realName) throws org.apache.thrift.TException
    {
      findPageUser_args args = new findPageUser_args();
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      args.setSchoolId(schoolId);
      args.setOfficeId(officeId);
      args.setGroupType(groupType);
      args.setUsername(username);
      args.setRealName(realName);
      sendBase("findPageUser", args);
    }

    public java.lang.String recv_findPageUser() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findPageUser_result result = new findPageUser_result();
      receiveBase(result, "findPageUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPageUser failed: unknown result");
    }

    public java.lang.String findPageUserWithJsonParams(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findPageUserWithJsonParams(pageNum, pageSize, schoolId, jsonParams);
      return recv_findPageUserWithJsonParams();
    }

    public void send_findPageUserWithJsonParams(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findPageUserWithJsonParams_args args = new findPageUserWithJsonParams_args();
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findPageUserWithJsonParams", args);
    }

    public java.lang.String recv_findPageUserWithJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findPageUserWithJsonParams_result result = new findPageUserWithJsonParams_result();
      receiveBase(result, "findPageUserWithJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPageUserWithJsonParams failed: unknown result");
    }

    public java.lang.String findUserIdListWithJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserIdListWithJsonParams(schoolId, jsonParams);
      return recv_findUserIdListWithJsonParams();
    }

    public void send_findUserIdListWithJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findUserIdListWithJsonParams_args args = new findUserIdListWithJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findUserIdListWithJsonParams", args);
    }

    public java.lang.String recv_findUserIdListWithJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserIdListWithJsonParams_result result = new findUserIdListWithJsonParams_result();
      receiveBase(result, "findUserIdListWithJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserIdListWithJsonParams failed: unknown result");
    }

    public void updateUserByUserId(java.lang.String userId, java.lang.String wxOpenId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_updateUserByUserId(userId, wxOpenId);
      recv_updateUserByUserId();
    }

    public void send_updateUserByUserId(java.lang.String userId, java.lang.String wxOpenId) throws org.apache.thrift.TException
    {
      updateUserByUserId_args args = new updateUserByUserId_args();
      args.setUserId(userId);
      args.setWxOpenId(wxOpenId);
      sendBase("updateUserByUserId", args);
    }

    public void recv_updateUserByUserId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      updateUserByUserId_result result = new updateUserByUserId_result();
      receiveBase(result, "updateUserByUserId");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public SysUserThrift findUserByOpenId(java.lang.String openId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserByOpenId(openId);
      return recv_findUserByOpenId();
    }

    public void send_findUserByOpenId(java.lang.String openId) throws org.apache.thrift.TException
    {
      findUserByOpenId_args args = new findUserByOpenId_args();
      args.setOpenId(openId);
      sendBase("findUserByOpenId", args);
    }

    public SysUserThrift recv_findUserByOpenId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserByOpenId_result result = new findUserByOpenId_result();
      receiveBase(result, "findUserByOpenId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserByOpenId failed: unknown result");
    }

    public java.util.List<java.lang.String> findUserIdBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String officeId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserIdBySchoolIdAndOtherParams(schoolId, officeId);
      return recv_findUserIdBySchoolIdAndOtherParams();
    }

    public void send_findUserIdBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String officeId) throws org.apache.thrift.TException
    {
      findUserIdBySchoolIdAndOtherParams_args args = new findUserIdBySchoolIdAndOtherParams_args();
      args.setSchoolId(schoolId);
      args.setOfficeId(officeId);
      sendBase("findUserIdBySchoolIdAndOtherParams", args);
    }

    public java.util.List<java.lang.String> recv_findUserIdBySchoolIdAndOtherParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserIdBySchoolIdAndOtherParams_result result = new findUserIdBySchoolIdAndOtherParams_result();
      receiveBase(result, "findUserIdBySchoolIdAndOtherParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserIdBySchoolIdAndOtherParams failed: unknown result");
    }

    public java.lang.String findNjssoStudentByIdIn(java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findNjssoStudentByIdIn(userIdList);
      return recv_findNjssoStudentByIdIn();
    }

    public void send_findNjssoStudentByIdIn(java.util.List<java.lang.String> userIdList) throws org.apache.thrift.TException
    {
      findNjssoStudentByIdIn_args args = new findNjssoStudentByIdIn_args();
      args.setUserIdList(userIdList);
      sendBase("findNjssoStudentByIdIn", args);
    }

    public java.lang.String recv_findNjssoStudentByIdIn() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findNjssoStudentByIdIn_result result = new findNjssoStudentByIdIn_result();
      receiveBase(result, "findNjssoStudentByIdIn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNjssoStudentByIdIn failed: unknown result");
    }

    public java.lang.String findStudentBySchoolIdIdIn(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findStudentBySchoolIdIdIn(schoolId, userIdList);
      return recv_findStudentBySchoolIdIdIn();
    }

    public void send_findStudentBySchoolIdIdIn(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws org.apache.thrift.TException
    {
      findStudentBySchoolIdIdIn_args args = new findStudentBySchoolIdIdIn_args();
      args.setSchoolId(schoolId);
      args.setUserIdList(userIdList);
      sendBase("findStudentBySchoolIdIdIn", args);
    }

    public java.lang.String recv_findStudentBySchoolIdIdIn() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findStudentBySchoolIdIdIn_result result = new findStudentBySchoolIdIdIn_result();
      receiveBase(result, "findStudentBySchoolIdIdIn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStudentBySchoolIdIdIn failed: unknown result");
    }

    public java.lang.String findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(java.lang.String schoolId, byte papersType, java.lang.String papersNo) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(schoolId, papersType, papersNo);
      return recv_findSchoolUserBySchoolIdAndPapersTypeAndPapersNo();
    }

    public void send_findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(java.lang.String schoolId, byte papersType, java.lang.String papersNo) throws org.apache.thrift.TException
    {
      findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args args = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args();
      args.setSchoolId(schoolId);
      args.setPapersType(papersType);
      args.setPapersNo(papersNo);
      sendBase("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo", args);
    }

    public java.lang.String recv_findSchoolUserBySchoolIdAndPapersTypeAndPapersNo() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result result = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result();
      receiveBase(result, "findSchoolUserBySchoolIdAndPapersTypeAndPapersNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSchoolUserBySchoolIdAndPapersTypeAndPapersNo failed: unknown result");
    }

    public void updatePassword(java.lang.String password, java.lang.String newPassword, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_updatePassword(password, newPassword, userId);
      recv_updatePassword();
    }

    public void send_updatePassword(java.lang.String password, java.lang.String newPassword, java.lang.String userId) throws org.apache.thrift.TException
    {
      updatePassword_args args = new updatePassword_args();
      args.setPassword(password);
      args.setNewPassword(newPassword);
      args.setUserId(userId);
      sendBase("updatePassword", args);
    }

    public void recv_updatePassword() throws ThriftBusinessException, org.apache.thrift.TException
    {
      updatePassword_result result = new updatePassword_result();
      receiveBase(result, "updatePassword");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public java.lang.String findStudentUserByOfficeIdAndSchoolId(java.lang.String officeId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findStudentUserByOfficeIdAndSchoolId(officeId, schoolId);
      return recv_findStudentUserByOfficeIdAndSchoolId();
    }

    public void send_findStudentUserByOfficeIdAndSchoolId(java.lang.String officeId, java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findStudentUserByOfficeIdAndSchoolId_args args = new findStudentUserByOfficeIdAndSchoolId_args();
      args.setOfficeId(officeId);
      args.setSchoolId(schoolId);
      sendBase("findStudentUserByOfficeIdAndSchoolId", args);
    }

    public java.lang.String recv_findStudentUserByOfficeIdAndSchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findStudentUserByOfficeIdAndSchoolId_result result = new findStudentUserByOfficeIdAndSchoolId_result();
      receiveBase(result, "findStudentUserByOfficeIdAndSchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStudentUserByOfficeIdAndSchoolId failed: unknown result");
    }

    public void updateUserInfo(java.lang.String paramsStr, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_updateUserInfo(paramsStr, userId);
      recv_updateUserInfo();
    }

    public void send_updateUserInfo(java.lang.String paramsStr, java.lang.String userId) throws org.apache.thrift.TException
    {
      updateUserInfo_args args = new updateUserInfo_args();
      args.setParamsStr(paramsStr);
      args.setUserId(userId);
      sendBase("updateUserInfo", args);
    }

    public void recv_updateUserInfo() throws ThriftBusinessException, org.apache.thrift.TException
    {
      updateUserInfo_result result = new updateUserInfo_result();
      receiveBase(result, "updateUserInfo");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void updateUserInfoByUserIdAndJsonParams(java.lang.String userId, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_updateUserInfoByUserIdAndJsonParams(userId, paramsStr);
      recv_updateUserInfoByUserIdAndJsonParams();
    }

    public void send_updateUserInfoByUserIdAndJsonParams(java.lang.String userId, java.lang.String paramsStr) throws org.apache.thrift.TException
    {
      updateUserInfoByUserIdAndJsonParams_args args = new updateUserInfoByUserIdAndJsonParams_args();
      args.setUserId(userId);
      args.setParamsStr(paramsStr);
      sendBase("updateUserInfoByUserIdAndJsonParams", args);
    }

    public void recv_updateUserInfoByUserIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      updateUserInfoByUserIdAndJsonParams_result result = new updateUserInfoByUserIdAndJsonParams_result();
      receiveBase(result, "updateUserInfoByUserIdAndJsonParams");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public java.lang.String loginByUsernameAndPassword(java.lang.String username, java.lang.String password) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_loginByUsernameAndPassword(username, password);
      return recv_loginByUsernameAndPassword();
    }

    public void send_loginByUsernameAndPassword(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      loginByUsernameAndPassword_args args = new loginByUsernameAndPassword_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("loginByUsernameAndPassword", args);
    }

    public java.lang.String recv_loginByUsernameAndPassword() throws ThriftBusinessException, org.apache.thrift.TException
    {
      loginByUsernameAndPassword_result result = new loginByUsernameAndPassword_result();
      receiveBase(result, "loginByUsernameAndPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginByUsernameAndPassword failed: unknown result");
    }

    public java.lang.String findParentBySchoolIdAndUserId(java.lang.String schoolId, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findParentBySchoolIdAndUserId(schoolId, userId);
      return recv_findParentBySchoolIdAndUserId();
    }

    public void send_findParentBySchoolIdAndUserId(java.lang.String schoolId, java.lang.String userId) throws org.apache.thrift.TException
    {
      findParentBySchoolIdAndUserId_args args = new findParentBySchoolIdAndUserId_args();
      args.setSchoolId(schoolId);
      args.setUserId(userId);
      sendBase("findParentBySchoolIdAndUserId", args);
    }

    public java.lang.String recv_findParentBySchoolIdAndUserId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findParentBySchoolIdAndUserId_result result = new findParentBySchoolIdAndUserId_result();
      receiveBase(result, "findParentBySchoolIdAndUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findParentBySchoolIdAndUserId failed: unknown result");
    }

    public java.lang.String findUserBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserBySchoolIdAndOtherJsonParams(schoolId, paramsStr);
      return recv_findUserBySchoolIdAndOtherJsonParams();
    }

    public void send_findUserBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String paramsStr) throws org.apache.thrift.TException
    {
      findUserBySchoolIdAndOtherJsonParams_args args = new findUserBySchoolIdAndOtherJsonParams_args();
      args.setSchoolId(schoolId);
      args.setParamsStr(paramsStr);
      sendBase("findUserBySchoolIdAndOtherJsonParams", args);
    }

    public java.lang.String recv_findUserBySchoolIdAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserBySchoolIdAndOtherJsonParams_result result = new findUserBySchoolIdAndOtherJsonParams_result();
      receiveBase(result, "findUserBySchoolIdAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserBySchoolIdAndOtherJsonParams failed: unknown result");
    }

    public java.lang.String findUserBySchoolIdAndStaffNoInOrStudentNoIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserBySchoolIdAndStaffNoInOrStudentNoIn(schoolId, outIdList);
      return recv_findUserBySchoolIdAndStaffNoInOrStudentNoIn();
    }

    public void send_findUserBySchoolIdAndStaffNoInOrStudentNoIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList) throws org.apache.thrift.TException
    {
      findUserBySchoolIdAndStaffNoInOrStudentNoIn_args args = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_args();
      args.setSchoolId(schoolId);
      args.setOutIdList(outIdList);
      sendBase("findUserBySchoolIdAndStaffNoInOrStudentNoIn", args);
    }

    public java.lang.String recv_findUserBySchoolIdAndStaffNoInOrStudentNoIn() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserBySchoolIdAndStaffNoInOrStudentNoIn_result result = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_result();
      receiveBase(result, "findUserBySchoolIdAndStaffNoInOrStudentNoIn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserBySchoolIdAndStaffNoInOrStudentNoIn failed: unknown result");
    }

    public java.lang.String findUserBySchoolIdAndOutIdIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserBySchoolIdAndOutIdIn(schoolId, outIdList);
      return recv_findUserBySchoolIdAndOutIdIn();
    }

    public void send_findUserBySchoolIdAndOutIdIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList) throws org.apache.thrift.TException
    {
      findUserBySchoolIdAndOutIdIn_args args = new findUserBySchoolIdAndOutIdIn_args();
      args.setSchoolId(schoolId);
      args.setOutIdList(outIdList);
      sendBase("findUserBySchoolIdAndOutIdIn", args);
    }

    public java.lang.String recv_findUserBySchoolIdAndOutIdIn() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserBySchoolIdAndOutIdIn_result result = new findUserBySchoolIdAndOutIdIn_result();
      receiveBase(result, "findUserBySchoolIdAndOutIdIn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserBySchoolIdAndOutIdIn failed: unknown result");
    }

    public java.lang.String findUnsyncUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String preSyncTime, java.lang.String syncEndTime, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUnsyncUserBySchoolIdAndOtherParams(schoolId, preSyncTime, syncEndTime, userIdList);
      return recv_findUnsyncUserBySchoolIdAndOtherParams();
    }

    public void send_findUnsyncUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String preSyncTime, java.lang.String syncEndTime, java.util.List<java.lang.String> userIdList) throws org.apache.thrift.TException
    {
      findUnsyncUserBySchoolIdAndOtherParams_args args = new findUnsyncUserBySchoolIdAndOtherParams_args();
      args.setSchoolId(schoolId);
      args.setPreSyncTime(preSyncTime);
      args.setSyncEndTime(syncEndTime);
      args.setUserIdList(userIdList);
      sendBase("findUnsyncUserBySchoolIdAndOtherParams", args);
    }

    public java.lang.String recv_findUnsyncUserBySchoolIdAndOtherParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUnsyncUserBySchoolIdAndOtherParams_result result = new findUnsyncUserBySchoolIdAndOtherParams_result();
      receiveBase(result, "findUnsyncUserBySchoolIdAndOtherParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUnsyncUserBySchoolIdAndOtherParams failed: unknown result");
    }

    public java.lang.String findUserWithOutIdByUserId(java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserWithOutIdByUserId(userId);
      return recv_findUserWithOutIdByUserId();
    }

    public void send_findUserWithOutIdByUserId(java.lang.String userId) throws org.apache.thrift.TException
    {
      findUserWithOutIdByUserId_args args = new findUserWithOutIdByUserId_args();
      args.setUserId(userId);
      sendBase("findUserWithOutIdByUserId", args);
    }

    public java.lang.String recv_findUserWithOutIdByUserId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserWithOutIdByUserId_result result = new findUserWithOutIdByUserId_result();
      receiveBase(result, "findUserWithOutIdByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserWithOutIdByUserId failed: unknown result");
    }

    public java.lang.String findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(schoolId, preSyncTime, jsonParams);
      return recv_findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams();
    }

    public void send_findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
      args.setSchoolId(schoolId);
      args.setPreSyncTime(preSyncTime);
      args.setJsonParams(jsonParams);
      sendBase("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", args);
    }

    public java.lang.String recv_findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
      receiveBase(result, "findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams failed: unknown result");
    }

    public java.lang.String findStudentBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findStudentBusiInfoBySchoolIdAndOtherJsonParams(schoolId, jsonParams);
      return recv_findStudentBusiInfoBySchoolIdAndOtherJsonParams();
    }

    public void send_findStudentBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findStudentBusiInfoBySchoolIdAndOtherJsonParams_args args = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findStudentBusiInfoBySchoolIdAndOtherJsonParams", args);
    }

    public java.lang.String recv_findStudentBusiInfoBySchoolIdAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findStudentBusiInfoBySchoolIdAndOtherJsonParams_result result = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_result();
      receiveBase(result, "findStudentBusiInfoBySchoolIdAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStudentBusiInfoBySchoolIdAndOtherJsonParams failed: unknown result");
    }

    public java.lang.String findTeacherBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findTeacherBusiInfoBySchoolIdAndOtherJsonParams(schoolId, jsonParams);
      return recv_findTeacherBusiInfoBySchoolIdAndOtherJsonParams();
    }

    public void send_findTeacherBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args args = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findTeacherBusiInfoBySchoolIdAndOtherJsonParams", args);
    }

    public java.lang.String recv_findTeacherBusiInfoBySchoolIdAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result result = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result();
      receiveBase(result, "findTeacherBusiInfoBySchoolIdAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTeacherBusiInfoBySchoolIdAndOtherJsonParams failed: unknown result");
    }

    public java.lang.String findChildBySchoolIdAndUserIds(java.lang.String schoolId, java.util.List<java.lang.String> ids) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findChildBySchoolIdAndUserIds(schoolId, ids);
      return recv_findChildBySchoolIdAndUserIds();
    }

    public void send_findChildBySchoolIdAndUserIds(java.lang.String schoolId, java.util.List<java.lang.String> ids) throws org.apache.thrift.TException
    {
      findChildBySchoolIdAndUserIds_args args = new findChildBySchoolIdAndUserIds_args();
      args.setSchoolId(schoolId);
      args.setIds(ids);
      sendBase("findChildBySchoolIdAndUserIds", args);
    }

    public java.lang.String recv_findChildBySchoolIdAndUserIds() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findChildBySchoolIdAndUserIds_result result = new findChildBySchoolIdAndUserIds_result();
      receiveBase(result, "findChildBySchoolIdAndUserIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findChildBySchoolIdAndUserIds failed: unknown result");
    }

    public java.lang.String findUnclassifiedUserBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUnclassifiedUserBySchoolId(schoolId);
      return recv_findUnclassifiedUserBySchoolId();
    }

    public void send_findUnclassifiedUserBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findUnclassifiedUserBySchoolId_args args = new findUnclassifiedUserBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findUnclassifiedUserBySchoolId", args);
    }

    public java.lang.String recv_findUnclassifiedUserBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUnclassifiedUserBySchoolId_result result = new findUnclassifiedUserBySchoolId_result();
      receiveBase(result, "findUnclassifiedUserBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUnclassifiedUserBySchoolId failed: unknown result");
    }

    public java.lang.String findParentBySchoolIdAndChildIds(java.lang.String schoolId, java.util.List<java.lang.String> ids) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findParentBySchoolIdAndChildIds(schoolId, ids);
      return recv_findParentBySchoolIdAndChildIds();
    }

    public void send_findParentBySchoolIdAndChildIds(java.lang.String schoolId, java.util.List<java.lang.String> ids) throws org.apache.thrift.TException
    {
      findParentBySchoolIdAndChildIds_args args = new findParentBySchoolIdAndChildIds_args();
      args.setSchoolId(schoolId);
      args.setIds(ids);
      sendBase("findParentBySchoolIdAndChildIds", args);
    }

    public java.lang.String recv_findParentBySchoolIdAndChildIds() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findParentBySchoolIdAndChildIds_result result = new findParentBySchoolIdAndChildIds_result();
      receiveBase(result, "findParentBySchoolIdAndChildIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findParentBySchoolIdAndChildIds failed: unknown result");
    }

    public java.lang.String findClassStudentUserIdsBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findClassStudentUserIdsBySchoolId(schoolId);
      return recv_findClassStudentUserIdsBySchoolId();
    }

    public void send_findClassStudentUserIdsBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findClassStudentUserIdsBySchoolId_args args = new findClassStudentUserIdsBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findClassStudentUserIdsBySchoolId", args);
    }

    public java.lang.String recv_findClassStudentUserIdsBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findClassStudentUserIdsBySchoolId_result result = new findClassStudentUserIdsBySchoolId_result();
      receiveBase(result, "findClassStudentUserIdsBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findClassStudentUserIdsBySchoolId failed: unknown result");
    }

    public java.lang.String findClassUserDetailBySchoolIdAndClassIdAndOtherParams(java.lang.String schoolId, java.lang.String classId, java.lang.String type, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findClassUserDetailBySchoolIdAndClassIdAndOtherParams(schoolId, classId, type, userId);
      return recv_findClassUserDetailBySchoolIdAndClassIdAndOtherParams();
    }

    public void send_findClassUserDetailBySchoolIdAndClassIdAndOtherParams(java.lang.String schoolId, java.lang.String classId, java.lang.String type, java.lang.String userId) throws org.apache.thrift.TException
    {
      findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args args = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args();
      args.setSchoolId(schoolId);
      args.setClassId(classId);
      args.setType(type);
      args.setUserId(userId);
      sendBase("findClassUserDetailBySchoolIdAndClassIdAndOtherParams", args);
    }

    public java.lang.String recv_findClassUserDetailBySchoolIdAndClassIdAndOtherParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result();
      receiveBase(result, "findClassUserDetailBySchoolIdAndClassIdAndOtherParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findClassUserDetailBySchoolIdAndClassIdAndOtherParams failed: unknown result");
    }

    public void saveOrUpdateClassUserDetail(java.lang.String paramsStr, java.lang.String operateUserId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_saveOrUpdateClassUserDetail(paramsStr, operateUserId);
      recv_saveOrUpdateClassUserDetail();
    }

    public void send_saveOrUpdateClassUserDetail(java.lang.String paramsStr, java.lang.String operateUserId) throws org.apache.thrift.TException
    {
      saveOrUpdateClassUserDetail_args args = new saveOrUpdateClassUserDetail_args();
      args.setParamsStr(paramsStr);
      args.setOperateUserId(operateUserId);
      sendBase("saveOrUpdateClassUserDetail", args);
    }

    public void recv_saveOrUpdateClassUserDetail() throws ThriftBusinessException, org.apache.thrift.TException
    {
      saveOrUpdateClassUserDetail_result result = new saveOrUpdateClassUserDetail_result();
      receiveBase(result, "saveOrUpdateClassUserDetail");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void deleteClassUserDetail(java.lang.String schoolId, java.lang.String id, java.lang.String operateUserId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_deleteClassUserDetail(schoolId, id, operateUserId);
      recv_deleteClassUserDetail();
    }

    public void send_deleteClassUserDetail(java.lang.String schoolId, java.lang.String id, java.lang.String operateUserId) throws org.apache.thrift.TException
    {
      deleteClassUserDetail_args args = new deleteClassUserDetail_args();
      args.setSchoolId(schoolId);
      args.setId(id);
      args.setOperateUserId(operateUserId);
      sendBase("deleteClassUserDetail", args);
    }

    public void recv_deleteClassUserDetail() throws ThriftBusinessException, org.apache.thrift.TException
    {
      deleteClassUserDetail_result result = new deleteClassUserDetail_result();
      receiveBase(result, "deleteClassUserDetail");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public java.lang.String findClassUserDetailBySchoolIdAndUserIdAndOtherParams(java.lang.String schoolId, java.lang.String userId, java.lang.String type) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findClassUserDetailBySchoolIdAndUserIdAndOtherParams(schoolId, userId, type);
      return recv_findClassUserDetailBySchoolIdAndUserIdAndOtherParams();
    }

    public void send_findClassUserDetailBySchoolIdAndUserIdAndOtherParams(java.lang.String schoolId, java.lang.String userId, java.lang.String type) throws org.apache.thrift.TException
    {
      findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args args = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args();
      args.setSchoolId(schoolId);
      args.setUserId(userId);
      args.setType(type);
      sendBase("findClassUserDetailBySchoolIdAndUserIdAndOtherParams", args);
    }

    public java.lang.String recv_findClassUserDetailBySchoolIdAndUserIdAndOtherParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result();
      receiveBase(result, "findClassUserDetailBySchoolIdAndUserIdAndOtherParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findClassUserDetailBySchoolIdAndUserIdAndOtherParams failed: unknown result");
    }

    public java.lang.String findSchoolBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSchoolBySchoolId(schoolId);
      return recv_findSchoolBySchoolId();
    }

    public void send_findSchoolBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findSchoolBySchoolId_args args = new findSchoolBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findSchoolBySchoolId", args);
    }

    public java.lang.String recv_findSchoolBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSchoolBySchoolId_result result = new findSchoolBySchoolId_result();
      receiveBase(result, "findSchoolBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSchoolBySchoolId failed: unknown result");
    }

    public java.util.List<SysOfficeThrift> findAllSchool() throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findAllSchool();
      return recv_findAllSchool();
    }

    public void send_findAllSchool() throws org.apache.thrift.TException
    {
      findAllSchool_args args = new findAllSchool_args();
      sendBase("findAllSchool", args);
    }

    public java.util.List<SysOfficeThrift> recv_findAllSchool() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findAllSchool_result result = new findAllSchool_result();
      receiveBase(result, "findAllSchool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllSchool failed: unknown result");
    }

    public java.util.List<SysOfficeThrift> findOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findOfficeByUserIdAndSchoolId(userId, schoolId);
      return recv_findOfficeByUserIdAndSchoolId();
    }

    public void send_findOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findOfficeByUserIdAndSchoolId_args args = new findOfficeByUserIdAndSchoolId_args();
      args.setUserId(userId);
      args.setSchoolId(schoolId);
      sendBase("findOfficeByUserIdAndSchoolId", args);
    }

    public java.util.List<SysOfficeThrift> recv_findOfficeByUserIdAndSchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findOfficeByUserIdAndSchoolId_result result = new findOfficeByUserIdAndSchoolId_result();
      receiveBase(result, "findOfficeByUserIdAndSchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOfficeByUserIdAndSchoolId failed: unknown result");
    }

    public java.util.List<SysOfficeThrift> findOfficeBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findOfficeBySchoolId(schoolId);
      return recv_findOfficeBySchoolId();
    }

    public void send_findOfficeBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findOfficeBySchoolId_args args = new findOfficeBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findOfficeBySchoolId", args);
    }

    public java.util.List<SysOfficeThrift> recv_findOfficeBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findOfficeBySchoolId_result result = new findOfficeBySchoolId_result();
      receiveBase(result, "findOfficeBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOfficeBySchoolId failed: unknown result");
    }

    public java.util.List<SysOfficeThrift> findTreeOfficeBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findTreeOfficeBySchoolId(schoolId);
      return recv_findTreeOfficeBySchoolId();
    }

    public void send_findTreeOfficeBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findTreeOfficeBySchoolId_args args = new findTreeOfficeBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findTreeOfficeBySchoolId", args);
    }

    public java.util.List<SysOfficeThrift> recv_findTreeOfficeBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findTreeOfficeBySchoolId_result result = new findTreeOfficeBySchoolId_result();
      receiveBase(result, "findTreeOfficeBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTreeOfficeBySchoolId failed: unknown result");
    }

    public java.util.List<SysOfficeThrift> findTreeOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findTreeOfficeBySchoolIdAndOfficeType(schoolId, officeType);
      return recv_findTreeOfficeBySchoolIdAndOfficeType();
    }

    public void send_findTreeOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType) throws org.apache.thrift.TException
    {
      findTreeOfficeBySchoolIdAndOfficeType_args args = new findTreeOfficeBySchoolIdAndOfficeType_args();
      args.setSchoolId(schoolId);
      args.setOfficeType(officeType);
      sendBase("findTreeOfficeBySchoolIdAndOfficeType", args);
    }

    public java.util.List<SysOfficeThrift> recv_findTreeOfficeBySchoolIdAndOfficeType() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findTreeOfficeBySchoolIdAndOfficeType_result result = new findTreeOfficeBySchoolIdAndOfficeType_result();
      receiveBase(result, "findTreeOfficeBySchoolIdAndOfficeType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTreeOfficeBySchoolIdAndOfficeType failed: unknown result");
    }

    public SysOfficeThrift findOfficeById(java.lang.String officeId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findOfficeById(officeId);
      return recv_findOfficeById();
    }

    public void send_findOfficeById(java.lang.String officeId) throws org.apache.thrift.TException
    {
      findOfficeById_args args = new findOfficeById_args();
      args.setOfficeId(officeId);
      sendBase("findOfficeById", args);
    }

    public SysOfficeThrift recv_findOfficeById() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findOfficeById_result result = new findOfficeById_result();
      receiveBase(result, "findOfficeById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOfficeById failed: unknown result");
    }

    public java.util.List<SysOfficeThrift> findOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findOfficeBySchoolIdAndOfficeType(schoolId, officeType);
      return recv_findOfficeBySchoolIdAndOfficeType();
    }

    public void send_findOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType) throws org.apache.thrift.TException
    {
      findOfficeBySchoolIdAndOfficeType_args args = new findOfficeBySchoolIdAndOfficeType_args();
      args.setSchoolId(schoolId);
      args.setOfficeType(officeType);
      sendBase("findOfficeBySchoolIdAndOfficeType", args);
    }

    public java.util.List<SysOfficeThrift> recv_findOfficeBySchoolIdAndOfficeType() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findOfficeBySchoolIdAndOfficeType_result result = new findOfficeBySchoolIdAndOfficeType_result();
      receiveBase(result, "findOfficeBySchoolIdAndOfficeType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOfficeBySchoolIdAndOfficeType failed: unknown result");
    }

    public java.lang.String findAccessableOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findAccessableOfficeByUserIdAndSchoolId(userId, schoolId);
      return recv_findAccessableOfficeByUserIdAndSchoolId();
    }

    public void send_findAccessableOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findAccessableOfficeByUserIdAndSchoolId_args args = new findAccessableOfficeByUserIdAndSchoolId_args();
      args.setUserId(userId);
      args.setSchoolId(schoolId);
      sendBase("findAccessableOfficeByUserIdAndSchoolId", args);
    }

    public java.lang.String recv_findAccessableOfficeByUserIdAndSchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findAccessableOfficeByUserIdAndSchoolId_result result = new findAccessableOfficeByUserIdAndSchoolId_result();
      receiveBase(result, "findAccessableOfficeByUserIdAndSchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAccessableOfficeByUserIdAndSchoolId failed: unknown result");
    }

    public java.lang.String findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(java.lang.String userId, java.lang.String schoolId, java.lang.String roleId, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(userId, schoolId, roleId, paramsStr);
      return recv_findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams();
    }

    public void send_findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(java.lang.String userId, java.lang.String schoolId, java.lang.String roleId, java.lang.String paramsStr) throws org.apache.thrift.TException
    {
      findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args args = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args();
      args.setUserId(userId);
      args.setSchoolId(schoolId);
      args.setRoleId(roleId);
      args.setParamsStr(paramsStr);
      sendBase("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams", args);
    }

    public java.lang.String recv_findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result result = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result();
      receiveBase(result, "findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams failed: unknown result");
    }

    public java.lang.String findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(schoolId, userIdList, paramsStr);
      return recv_findOfficeBySchoolIdAndUserIdListAndOtherJsonParams();
    }

    public void send_findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr) throws org.apache.thrift.TException
    {
      findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
      args.setSchoolId(schoolId);
      args.setUserIdList(userIdList);
      args.setParamsStr(paramsStr);
      sendBase("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams", args);
    }

    public java.lang.String recv_findOfficeBySchoolIdAndUserIdListAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
      receiveBase(result, "findOfficeBySchoolIdAndUserIdListAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOfficeBySchoolIdAndUserIdListAndOtherJsonParams failed: unknown result");
    }

    public java.lang.String findUserOfficeBySchoolIdAndUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserOfficeBySchoolIdAndUserIdList(schoolId, userIdList);
      return recv_findUserOfficeBySchoolIdAndUserIdList();
    }

    public void send_findUserOfficeBySchoolIdAndUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws org.apache.thrift.TException
    {
      findUserOfficeBySchoolIdAndUserIdList_args args = new findUserOfficeBySchoolIdAndUserIdList_args();
      args.setSchoolId(schoolId);
      args.setUserIdList(userIdList);
      sendBase("findUserOfficeBySchoolIdAndUserIdList", args);
    }

    public java.lang.String recv_findUserOfficeBySchoolIdAndUserIdList() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserOfficeBySchoolIdAndUserIdList_result result = new findUserOfficeBySchoolIdAndUserIdList_result();
      receiveBase(result, "findUserOfficeBySchoolIdAndUserIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserOfficeBySchoolIdAndUserIdList failed: unknown result");
    }

    public java.lang.String findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(schoolId, userIdList, paramsStr);
      return recv_findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams();
    }

    public void send_findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr) throws org.apache.thrift.TException
    {
      findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
      args.setSchoolId(schoolId);
      args.setUserIdList(userIdList);
      args.setParamsStr(paramsStr);
      sendBase("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams", args);
    }

    public java.lang.String recv_findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
      receiveBase(result, "findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams failed: unknown result");
    }

    public java.util.List<SysMenuPermissionThrift> findMenuPermByUserIdAndSchoolCodeAndAppCode(java.lang.String userId, java.lang.String schoolCode, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findMenuPermByUserIdAndSchoolCodeAndAppCode(userId, schoolCode, appCode);
      return recv_findMenuPermByUserIdAndSchoolCodeAndAppCode();
    }

    public void send_findMenuPermByUserIdAndSchoolCodeAndAppCode(java.lang.String userId, java.lang.String schoolCode, java.lang.String appCode) throws org.apache.thrift.TException
    {
      findMenuPermByUserIdAndSchoolCodeAndAppCode_args args = new findMenuPermByUserIdAndSchoolCodeAndAppCode_args();
      args.setUserId(userId);
      args.setSchoolCode(schoolCode);
      args.setAppCode(appCode);
      sendBase("findMenuPermByUserIdAndSchoolCodeAndAppCode", args);
    }

    public java.util.List<SysMenuPermissionThrift> recv_findMenuPermByUserIdAndSchoolCodeAndAppCode() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findMenuPermByUserIdAndSchoolCodeAndAppCode_result result = new findMenuPermByUserIdAndSchoolCodeAndAppCode_result();
      receiveBase(result, "findMenuPermByUserIdAndSchoolCodeAndAppCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMenuPermByUserIdAndSchoolCodeAndAppCode failed: unknown result");
    }

    public java.util.List<SysMenuPermissionThrift> findMenuPermByUserIdAndSchoolIdAndAppCode(java.lang.String userId, java.lang.String schoolId, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findMenuPermByUserIdAndSchoolIdAndAppCode(userId, schoolId, appCode);
      return recv_findMenuPermByUserIdAndSchoolIdAndAppCode();
    }

    public void send_findMenuPermByUserIdAndSchoolIdAndAppCode(java.lang.String userId, java.lang.String schoolId, java.lang.String appCode) throws org.apache.thrift.TException
    {
      findMenuPermByUserIdAndSchoolIdAndAppCode_args args = new findMenuPermByUserIdAndSchoolIdAndAppCode_args();
      args.setUserId(userId);
      args.setSchoolId(schoolId);
      args.setAppCode(appCode);
      sendBase("findMenuPermByUserIdAndSchoolIdAndAppCode", args);
    }

    public java.util.List<SysMenuPermissionThrift> recv_findMenuPermByUserIdAndSchoolIdAndAppCode() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findMenuPermByUserIdAndSchoolIdAndAppCode_result result = new findMenuPermByUserIdAndSchoolIdAndAppCode_result();
      receiveBase(result, "findMenuPermByUserIdAndSchoolIdAndAppCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMenuPermByUserIdAndSchoolIdAndAppCode failed: unknown result");
    }

    public java.lang.String findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(java.lang.String schoolId, java.lang.String roleId, java.lang.String jsonStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(schoolId, roleId, jsonStr);
      return recv_findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam();
    }

    public void send_findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(java.lang.String schoolId, java.lang.String roleId, java.lang.String jsonStr) throws org.apache.thrift.TException
    {
      findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args args = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args();
      args.setSchoolId(schoolId);
      args.setRoleId(roleId);
      args.setJsonStr(jsonStr);
      sendBase("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam", args);
    }

    public java.lang.String recv_findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result result = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result();
      receiveBase(result, "findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam failed: unknown result");
    }

    public java.util.List<SysRoleThrift> findRoleByUserIdAndSchoolCode(java.lang.String userId, java.lang.String schoolCode) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findRoleByUserIdAndSchoolCode(userId, schoolCode);
      return recv_findRoleByUserIdAndSchoolCode();
    }

    public void send_findRoleByUserIdAndSchoolCode(java.lang.String userId, java.lang.String schoolCode) throws org.apache.thrift.TException
    {
      findRoleByUserIdAndSchoolCode_args args = new findRoleByUserIdAndSchoolCode_args();
      args.setUserId(userId);
      args.setSchoolCode(schoolCode);
      sendBase("findRoleByUserIdAndSchoolCode", args);
    }

    public java.util.List<SysRoleThrift> recv_findRoleByUserIdAndSchoolCode() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findRoleByUserIdAndSchoolCode_result result = new findRoleByUserIdAndSchoolCode_result();
      receiveBase(result, "findRoleByUserIdAndSchoolCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRoleByUserIdAndSchoolCode failed: unknown result");
    }

    public java.util.List<SysRoleThrift> findRoleBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findRoleBySchoolId(schoolId);
      return recv_findRoleBySchoolId();
    }

    public void send_findRoleBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findRoleBySchoolId_args args = new findRoleBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findRoleBySchoolId", args);
    }

    public java.util.List<SysRoleThrift> recv_findRoleBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findRoleBySchoolId_result result = new findRoleBySchoolId_result();
      receiveBase(result, "findRoleBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRoleBySchoolId failed: unknown result");
    }

    public SysRoleThrift findRoleByRoleId(java.lang.String roleId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findRoleByRoleId(roleId);
      return recv_findRoleByRoleId();
    }

    public void send_findRoleByRoleId(java.lang.String roleId) throws org.apache.thrift.TException
    {
      findRoleByRoleId_args args = new findRoleByRoleId_args();
      args.setRoleId(roleId);
      sendBase("findRoleByRoleId", args);
    }

    public SysRoleThrift recv_findRoleByRoleId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findRoleByRoleId_result result = new findRoleByRoleId_result();
      receiveBase(result, "findRoleByRoleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRoleByRoleId failed: unknown result");
    }

    public java.util.List<SysRoleThrift> findRoleByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findRoleByUserIdAndSchoolId(userId, schoolId);
      return recv_findRoleByUserIdAndSchoolId();
    }

    public void send_findRoleByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findRoleByUserIdAndSchoolId_args args = new findRoleByUserIdAndSchoolId_args();
      args.setUserId(userId);
      args.setSchoolId(schoolId);
      sendBase("findRoleByUserIdAndSchoolId", args);
    }

    public java.util.List<SysRoleThrift> recv_findRoleByUserIdAndSchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findRoleByUserIdAndSchoolId_result result = new findRoleByUserIdAndSchoolId_result();
      receiveBase(result, "findRoleByUserIdAndSchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRoleByUserIdAndSchoolId failed: unknown result");
    }

    public java.lang.String findSchoolRoleListByUserId(java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSchoolRoleListByUserId(userId);
      return recv_findSchoolRoleListByUserId();
    }

    public void send_findSchoolRoleListByUserId(java.lang.String userId) throws org.apache.thrift.TException
    {
      findSchoolRoleListByUserId_args args = new findSchoolRoleListByUserId_args();
      args.setUserId(userId);
      sendBase("findSchoolRoleListByUserId", args);
    }

    public java.lang.String recv_findSchoolRoleListByUserId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSchoolRoleListByUserId_result result = new findSchoolRoleListByUserId_result();
      receiveBase(result, "findSchoolRoleListByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSchoolRoleListByUserId failed: unknown result");
    }

    public java.util.List<SysRoleThrift> findOpenRoleBySchoolId(java.lang.String schoolId, java.lang.String groupType) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findOpenRoleBySchoolId(schoolId, groupType);
      return recv_findOpenRoleBySchoolId();
    }

    public void send_findOpenRoleBySchoolId(java.lang.String schoolId, java.lang.String groupType) throws org.apache.thrift.TException
    {
      findOpenRoleBySchoolId_args args = new findOpenRoleBySchoolId_args();
      args.setSchoolId(schoolId);
      args.setGroupType(groupType);
      sendBase("findOpenRoleBySchoolId", args);
    }

    public java.util.List<SysRoleThrift> recv_findOpenRoleBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findOpenRoleBySchoolId_result result = new findOpenRoleBySchoolId_result();
      receiveBase(result, "findOpenRoleBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOpenRoleBySchoolId failed: unknown result");
    }

    public void registerRole(java.lang.String paramsStr, java.lang.String userId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_registerRole(paramsStr, userId);
      recv_registerRole();
    }

    public void send_registerRole(java.lang.String paramsStr, java.lang.String userId) throws org.apache.thrift.TException
    {
      registerRole_args args = new registerRole_args();
      args.setParamsStr(paramsStr);
      args.setUserId(userId);
      sendBase("registerRole", args);
    }

    public void recv_registerRole() throws ThriftBusinessException, org.apache.thrift.TException
    {
      registerRole_result result = new registerRole_result();
      receiveBase(result, "registerRole");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public java.lang.String findRolesByUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findRolesByUserIdList(schoolId, userIdList);
      return recv_findRolesByUserIdList();
    }

    public void send_findRolesByUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList) throws org.apache.thrift.TException
    {
      findRolesByUserIdList_args args = new findRolesByUserIdList_args();
      args.setSchoolId(schoolId);
      args.setUserIdList(userIdList);
      sendBase("findRolesByUserIdList", args);
    }

    public java.lang.String recv_findRolesByUserIdList() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findRolesByUserIdList_result result = new findRolesByUserIdList_result();
      receiveBase(result, "findRolesByUserIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRolesByUserIdList failed: unknown result");
    }

    public SysSchoolAppDetailThrift findSchoolAppDetailBySchoolCodeAndAppCode(java.lang.String schoolCode, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSchoolAppDetailBySchoolCodeAndAppCode(schoolCode, appCode);
      return recv_findSchoolAppDetailBySchoolCodeAndAppCode();
    }

    public void send_findSchoolAppDetailBySchoolCodeAndAppCode(java.lang.String schoolCode, java.lang.String appCode) throws org.apache.thrift.TException
    {
      findSchoolAppDetailBySchoolCodeAndAppCode_args args = new findSchoolAppDetailBySchoolCodeAndAppCode_args();
      args.setSchoolCode(schoolCode);
      args.setAppCode(appCode);
      sendBase("findSchoolAppDetailBySchoolCodeAndAppCode", args);
    }

    public SysSchoolAppDetailThrift recv_findSchoolAppDetailBySchoolCodeAndAppCode() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSchoolAppDetailBySchoolCodeAndAppCode_result result = new findSchoolAppDetailBySchoolCodeAndAppCode_result();
      receiveBase(result, "findSchoolAppDetailBySchoolCodeAndAppCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSchoolAppDetailBySchoolCodeAndAppCode failed: unknown result");
    }

    public java.util.List<SchoolRoleVoThrift> findSchoolByUserIdAndAppCode(java.lang.String userId, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSchoolByUserIdAndAppCode(userId, appCode);
      return recv_findSchoolByUserIdAndAppCode();
    }

    public void send_findSchoolByUserIdAndAppCode(java.lang.String userId, java.lang.String appCode) throws org.apache.thrift.TException
    {
      findSchoolByUserIdAndAppCode_args args = new findSchoolByUserIdAndAppCode_args();
      args.setUserId(userId);
      args.setAppCode(appCode);
      sendBase("findSchoolByUserIdAndAppCode", args);
    }

    public java.util.List<SchoolRoleVoThrift> recv_findSchoolByUserIdAndAppCode() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSchoolByUserIdAndAppCode_result result = new findSchoolByUserIdAndAppCode_result();
      receiveBase(result, "findSchoolByUserIdAndAppCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSchoolByUserIdAndAppCode failed: unknown result");
    }

    public java.util.List<SysRoleRegisterRequirementThrift> findSysRoleRegisterRequirementByRoleId(java.lang.String roleId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSysRoleRegisterRequirementByRoleId(roleId);
      return recv_findSysRoleRegisterRequirementByRoleId();
    }

    public void send_findSysRoleRegisterRequirementByRoleId(java.lang.String roleId) throws org.apache.thrift.TException
    {
      findSysRoleRegisterRequirementByRoleId_args args = new findSysRoleRegisterRequirementByRoleId_args();
      args.setRoleId(roleId);
      sendBase("findSysRoleRegisterRequirementByRoleId", args);
    }

    public java.util.List<SysRoleRegisterRequirementThrift> recv_findSysRoleRegisterRequirementByRoleId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSysRoleRegisterRequirementByRoleId_result result = new findSysRoleRegisterRequirementByRoleId_result();
      receiveBase(result, "findSysRoleRegisterRequirementByRoleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSysRoleRegisterRequirementByRoleId failed: unknown result");
    }

    public java.lang.String findNormalUserChildByParentIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findNormalUserChildByParentIdAndSchoolId(userId, schoolId);
      return recv_findNormalUserChildByParentIdAndSchoolId();
    }

    public void send_findNormalUserChildByParentIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findNormalUserChildByParentIdAndSchoolId_args args = new findNormalUserChildByParentIdAndSchoolId_args();
      args.setUserId(userId);
      args.setSchoolId(schoolId);
      sendBase("findNormalUserChildByParentIdAndSchoolId", args);
    }

    public java.lang.String recv_findNormalUserChildByParentIdAndSchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findNormalUserChildByParentIdAndSchoolId_result result = new findNormalUserChildByParentIdAndSchoolId_result();
      receiveBase(result, "findNormalUserChildByParentIdAndSchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNormalUserChildByParentIdAndSchoolId failed: unknown result");
    }

    public java.lang.String findNormalUserParentByChildIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findNormalUserParentByChildIdAndSchoolId(userId, schoolId);
      return recv_findNormalUserParentByChildIdAndSchoolId();
    }

    public void send_findNormalUserParentByChildIdAndSchoolId(java.lang.String userId, java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findNormalUserParentByChildIdAndSchoolId_args args = new findNormalUserParentByChildIdAndSchoolId_args();
      args.setUserId(userId);
      args.setSchoolId(schoolId);
      sendBase("findNormalUserParentByChildIdAndSchoolId", args);
    }

    public java.lang.String recv_findNormalUserParentByChildIdAndSchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findNormalUserParentByChildIdAndSchoolId_result result = new findNormalUserParentByChildIdAndSchoolId_result();
      receiveBase(result, "findNormalUserParentByChildIdAndSchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNormalUserParentByChildIdAndSchoolId failed: unknown result");
    }

    public java.lang.String findSchoolAppConfigBySchoolIdAndAppCode(java.lang.String schoolId, java.lang.String appCode) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSchoolAppConfigBySchoolIdAndAppCode(schoolId, appCode);
      return recv_findSchoolAppConfigBySchoolIdAndAppCode();
    }

    public void send_findSchoolAppConfigBySchoolIdAndAppCode(java.lang.String schoolId, java.lang.String appCode) throws org.apache.thrift.TException
    {
      findSchoolAppConfigBySchoolIdAndAppCode_args args = new findSchoolAppConfigBySchoolIdAndAppCode_args();
      args.setSchoolId(schoolId);
      args.setAppCode(appCode);
      sendBase("findSchoolAppConfigBySchoolIdAndAppCode", args);
    }

    public java.lang.String recv_findSchoolAppConfigBySchoolIdAndAppCode() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSchoolAppConfigBySchoolIdAndAppCode_result result = new findSchoolAppConfigBySchoolIdAndAppCode_result();
      receiveBase(result, "findSchoolAppConfigBySchoolIdAndAppCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSchoolAppConfigBySchoolIdAndAppCode failed: unknown result");
    }

    public java.lang.String findStudentOrTeacherUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findStudentOrTeacherUserBySchoolIdAndJsonParams(schoolId, jsonStr);
      return recv_findStudentOrTeacherUserBySchoolIdAndJsonParams();
    }

    public void send_findStudentOrTeacherUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonStr) throws org.apache.thrift.TException
    {
      findStudentOrTeacherUserBySchoolIdAndJsonParams_args args = new findStudentOrTeacherUserBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonStr(jsonStr);
      sendBase("findStudentOrTeacherUserBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findStudentOrTeacherUserBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findStudentOrTeacherUserBySchoolIdAndJsonParams_result result = new findStudentOrTeacherUserBySchoolIdAndJsonParams_result();
      receiveBase(result, "findStudentOrTeacherUserBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStudentOrTeacherUserBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findAppByJsonParams(java.lang.String jsonStr) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findAppByJsonParams(jsonStr);
      return recv_findAppByJsonParams();
    }

    public void send_findAppByJsonParams(java.lang.String jsonStr) throws org.apache.thrift.TException
    {
      findAppByJsonParams_args args = new findAppByJsonParams_args();
      args.setJsonStr(jsonStr);
      sendBase("findAppByJsonParams", args);
    }

    public java.lang.String recv_findAppByJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findAppByJsonParams_result result = new findAppByJsonParams_result();
      receiveBase(result, "findAppByJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAppByJsonParams failed: unknown result");
    }

    public java.lang.String findOfficeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findOfficeBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findOfficeBySchoolIdAndJsonParams();
    }

    public void send_findOfficeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findOfficeBySchoolIdAndJsonParams_args args = new findOfficeBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findOfficeBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findOfficeBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findOfficeBySchoolIdAndJsonParams_result result = new findOfficeBySchoolIdAndJsonParams_result();
      receiveBase(result, "findOfficeBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOfficeBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findDictDataByDictTypeCodeList(java.util.List<java.lang.String> dictTypeCodeList) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findDictDataByDictTypeCodeList(dictTypeCodeList);
      return recv_findDictDataByDictTypeCodeList();
    }

    public void send_findDictDataByDictTypeCodeList(java.util.List<java.lang.String> dictTypeCodeList) throws org.apache.thrift.TException
    {
      findDictDataByDictTypeCodeList_args args = new findDictDataByDictTypeCodeList_args();
      args.setDictTypeCodeList(dictTypeCodeList);
      sendBase("findDictDataByDictTypeCodeList", args);
    }

    public java.lang.String recv_findDictDataByDictTypeCodeList() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findDictDataByDictTypeCodeList_result result = new findDictDataByDictTypeCodeList_result();
      receiveBase(result, "findDictDataByDictTypeCodeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findDictDataByDictTypeCodeList failed: unknown result");
    }

    public java.lang.String findSubjectBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSubjectBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findSubjectBySchoolIdAndJsonParams();
    }

    public void send_findSubjectBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findSubjectBySchoolIdAndJsonParams_args args = new findSubjectBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findSubjectBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findSubjectBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSubjectBySchoolIdAndJsonParams_result result = new findSubjectBySchoolIdAndJsonParams_result();
      receiveBase(result, "findSubjectBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSubjectBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findLessonBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findLessonBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findLessonBySchoolIdAndJsonParams();
    }

    public void send_findLessonBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findLessonBySchoolIdAndJsonParams_args args = new findLessonBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findLessonBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findLessonBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findLessonBySchoolIdAndJsonParams_result result = new findLessonBySchoolIdAndJsonParams_result();
      receiveBase(result, "findLessonBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLessonBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findPlaceBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findPlaceBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findPlaceBySchoolIdAndJsonParams();
    }

    public void send_findPlaceBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findPlaceBySchoolIdAndJsonParams_args args = new findPlaceBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findPlaceBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findPlaceBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findPlaceBySchoolIdAndJsonParams_result result = new findPlaceBySchoolIdAndJsonParams_result();
      receiveBase(result, "findPlaceBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPlaceBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findGradeBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findGradeBySchoolId(schoolId);
      return recv_findGradeBySchoolId();
    }

    public void send_findGradeBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findGradeBySchoolId_args args = new findGradeBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findGradeBySchoolId", args);
    }

    public java.lang.String recv_findGradeBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findGradeBySchoolId_result result = new findGradeBySchoolId_result();
      receiveBase(result, "findGradeBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGradeBySchoolId failed: unknown result");
    }

    public java.lang.String findClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findClassBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findClassBySchoolIdAndJsonParams();
    }

    public void send_findClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findClassBySchoolIdAndJsonParams_args args = new findClassBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findClassBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findClassBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findClassBySchoolIdAndJsonParams_result result = new findClassBySchoolIdAndJsonParams_result();
      receiveBase(result, "findClassBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findClassBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findStudentBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findStudentBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findStudentBySchoolIdAndJsonParams();
    }

    public void send_findStudentBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findStudentBySchoolIdAndJsonParams_args args = new findStudentBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findStudentBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findStudentBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findStudentBySchoolIdAndJsonParams_result result = new findStudentBySchoolIdAndJsonParams_result();
      receiveBase(result, "findStudentBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStudentBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findJobTypeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findJobTypeBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findJobTypeBySchoolIdAndJsonParams();
    }

    public void send_findJobTypeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findJobTypeBySchoolIdAndJsonParams_args args = new findJobTypeBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findJobTypeBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findJobTypeBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findJobTypeBySchoolIdAndJsonParams_result result = new findJobTypeBySchoolIdAndJsonParams_result();
      receiveBase(result, "findJobTypeBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findJobTypeBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findJobBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findJobBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findJobBySchoolIdAndJsonParams();
    }

    public void send_findJobBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findJobBySchoolIdAndJsonParams_args args = new findJobBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findJobBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findJobBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findJobBySchoolIdAndJsonParams_result result = new findJobBySchoolIdAndJsonParams_result();
      receiveBase(result, "findJobBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findJobBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findUserBySchoolIdAndJsonParams();
    }

    public void send_findUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findUserBySchoolIdAndJsonParams_args args = new findUserBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findUserBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findUserBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserBySchoolIdAndJsonParams_result result = new findUserBySchoolIdAndJsonParams_result();
      receiveBase(result, "findUserBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findCalendarBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findCalendarBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findCalendarBySchoolIdAndJsonParams();
    }

    public void send_findCalendarBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findCalendarBySchoolIdAndJsonParams_args args = new findCalendarBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findCalendarBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findCalendarBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findCalendarBySchoolIdAndJsonParams_result result = new findCalendarBySchoolIdAndJsonParams_result();
      receiveBase(result, "findCalendarBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCalendarBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findStaffBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findStaffBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findStaffBySchoolIdAndJsonParams();
    }

    public void send_findStaffBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findStaffBySchoolIdAndJsonParams_args args = new findStaffBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findStaffBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findStaffBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findStaffBySchoolIdAndJsonParams_result result = new findStaffBySchoolIdAndJsonParams_result();
      receiveBase(result, "findStaffBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStaffBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findHeadTeacherBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findHeadTeacherBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findHeadTeacherBySchoolIdAndJsonParams();
    }

    public void send_findHeadTeacherBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findHeadTeacherBySchoolIdAndJsonParams_args args = new findHeadTeacherBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findHeadTeacherBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findHeadTeacherBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findHeadTeacherBySchoolIdAndJsonParams_result result = new findHeadTeacherBySchoolIdAndJsonParams_result();
      receiveBase(result, "findHeadTeacherBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findHeadTeacherBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findClassUserDetailBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findClassUserDetailBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findClassUserDetailBySchoolIdAndJsonParams();
    }

    public void send_findClassUserDetailBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findClassUserDetailBySchoolIdAndJsonParams_args args = new findClassUserDetailBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findClassUserDetailBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findClassUserDetailBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findClassUserDetailBySchoolIdAndJsonParams_result result = new findClassUserDetailBySchoolIdAndJsonParams_result();
      receiveBase(result, "findClassUserDetailBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findClassUserDetailBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findBriefUserByV5(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findBriefUserByV5(schoolId, jsonParams);
      return recv_findBriefUserByV5();
    }

    public void send_findBriefUserByV5(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findBriefUserByV5_args args = new findBriefUserByV5_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findBriefUserByV5", args);
    }

    public java.lang.String recv_findBriefUserByV5() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findBriefUserByV5_result result = new findBriefUserByV5_result();
      receiveBase(result, "findBriefUserByV5");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findBriefUserByV5 failed: unknown result");
    }

    public java.lang.String findNewPageUserBy(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findNewPageUserBy(schoolId, jsonParams);
      return recv_findNewPageUserBy();
    }

    public void send_findNewPageUserBy(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findNewPageUserBy_args args = new findNewPageUserBy_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findNewPageUserBy", args);
    }

    public java.lang.String recv_findNewPageUserBy() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findNewPageUserBy_result result = new findNewPageUserBy_result();
      receiveBase(result, "findNewPageUserBy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNewPageUserBy failed: unknown result");
    }

    public java.lang.String findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> officeIdList, java.util.List<java.lang.String> classIdList, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(schoolId, officeIdList, classIdList, jsonParams);
      return recv_findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams();
    }

    public void send_findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> officeIdList, java.util.List<java.lang.String> classIdList, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args args = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setOfficeIdList(officeIdList);
      args.setClassIdList(classIdList);
      args.setJsonParams(jsonParams);
      sendBase("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams", args);
    }

    public java.lang.String recv_findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result result = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result();
      receiveBase(result, "findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams failed: unknown result");
    }

    public java.lang.String findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(java.lang.String schoolId, java.lang.String classId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(schoolId, classId, jsonParams);
      return recv_findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams();
    }

    public void send_findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(java.lang.String schoolId, java.lang.String classId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args args = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setClassId(classId);
      args.setJsonParams(jsonParams);
      sendBase("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams", args);
    }

    public java.lang.String recv_findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result result = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result();
      receiveBase(result, "findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(schoolId, preSyncTime, jsonParams);
      return recv_findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams();
    }

    public void send_findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
      args.setSchoolId(schoolId);
      args.setPreSyncTime(preSyncTime);
      args.setJsonParams(jsonParams);
      sendBase("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", args);
    }

    public java.lang.String recv_findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
      receiveBase(result, "findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams failed: unknown result");
    }

    public java.lang.String findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(java.lang.String schoolId, java.lang.String officeId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(schoolId, officeId, jsonParams);
      return recv_findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams();
    }

    public void send_findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(java.lang.String schoolId, java.lang.String officeId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args args = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setOfficeId(officeId);
      args.setJsonParams(jsonParams);
      sendBase("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams", args);
    }

    public java.lang.String recv_findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result result = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result();
      receiveBase(result, "findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findAbnormalUserIdListBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findAbnormalUserIdListBySchoolId(schoolId);
      return recv_findAbnormalUserIdListBySchoolId();
    }

    public void send_findAbnormalUserIdListBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findAbnormalUserIdListBySchoolId_args args = new findAbnormalUserIdListBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findAbnormalUserIdListBySchoolId", args);
    }

    public java.lang.String recv_findAbnormalUserIdListBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findAbnormalUserIdListBySchoolId_result result = new findAbnormalUserIdListBySchoolId_result();
      receiveBase(result, "findAbnormalUserIdListBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAbnormalUserIdListBySchoolId failed: unknown result");
    }

    public java.lang.String findSemesterBySchoolId(java.lang.String schoolId) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSemesterBySchoolId(schoolId);
      return recv_findSemesterBySchoolId();
    }

    public void send_findSemesterBySchoolId(java.lang.String schoolId) throws org.apache.thrift.TException
    {
      findSemesterBySchoolId_args args = new findSemesterBySchoolId_args();
      args.setSchoolId(schoolId);
      sendBase("findSemesterBySchoolId", args);
    }

    public java.lang.String recv_findSemesterBySchoolId() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSemesterBySchoolId_result result = new findSemesterBySchoolId_result();
      receiveBase(result, "findSemesterBySchoolId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSemesterBySchoolId failed: unknown result");
    }

    public java.lang.String findRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findRoleBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findRoleBySchoolIdAndJsonParams();
    }

    public void send_findRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findRoleBySchoolIdAndJsonParams_args args = new findRoleBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findRoleBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findRoleBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findRoleBySchoolIdAndJsonParams_result result = new findRoleBySchoolIdAndJsonParams_result();
      receiveBase(result, "findRoleBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRoleBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findSysRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findSysRoleBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findSysRoleBySchoolIdAndJsonParams();
    }

    public void send_findSysRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findSysRoleBySchoolIdAndJsonParams_args args = new findSysRoleBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findSysRoleBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findSysRoleBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findSysRoleBySchoolIdAndJsonParams_result result = new findSysRoleBySchoolIdAndJsonParams_result();
      receiveBase(result, "findSysRoleBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSysRoleBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findBusiClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findBusiClassBySchoolIdAndJsonParams(schoolId, jsonParams);
      return recv_findBusiClassBySchoolIdAndJsonParams();
    }

    public void send_findBusiClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findBusiClassBySchoolIdAndJsonParams_args args = new findBusiClassBySchoolIdAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setJsonParams(jsonParams);
      sendBase("findBusiClassBySchoolIdAndJsonParams", args);
    }

    public java.lang.String recv_findBusiClassBySchoolIdAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findBusiClassBySchoolIdAndJsonParams_result result = new findBusiClassBySchoolIdAndJsonParams_result();
      receiveBase(result, "findBusiClassBySchoolIdAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findBusiClassBySchoolIdAndJsonParams failed: unknown result");
    }

    public java.lang.String findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String jsonParams) throws ThriftBusinessException, org.apache.thrift.TException
    {
      send_findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(schoolId, userIdList, jsonParams);
      return recv_findUserJobTypeBySchoolIdAndUserIdListAndJsonParams();
    }

    public void send_findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String jsonParams) throws org.apache.thrift.TException
    {
      findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args args = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args();
      args.setSchoolId(schoolId);
      args.setUserIdList(userIdList);
      args.setJsonParams(jsonParams);
      sendBase("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams", args);
    }

    public java.lang.String recv_findUserJobTypeBySchoolIdAndUserIdListAndJsonParams() throws ThriftBusinessException, org.apache.thrift.TException
    {
      findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result result = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result();
      receiveBase(result, "findUserJobTypeBySchoolIdAndUserIdListAndJsonParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserJobTypeBySchoolIdAndUserIdListAndJsonParams failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findUserByUserId(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserByUserId_call method_call = new findUserByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserByUserId_call extends org.apache.thrift.async.TAsyncMethodCall<SysUserThrift> {
      private java.lang.String userId;
      public findUserByUserId_call(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserByUserId_args args = new findUserByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysUserThrift getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserByUserId();
      }
    }

    public void findUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String realName, java.lang.String username, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserBySchoolIdAndOtherParams_call method_call = new findUserBySchoolIdAndOtherParams_call(schoolId, realName, username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserBySchoolIdAndOtherParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysUserThrift>> {
      private java.lang.String schoolId;
      private java.lang.String realName;
      private java.lang.String username;
      public findUserBySchoolIdAndOtherParams_call(java.lang.String schoolId, java.lang.String realName, java.lang.String username, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.realName = realName;
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserBySchoolIdAndOtherParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserBySchoolIdAndOtherParams_args args = new findUserBySchoolIdAndOtherParams_args();
        args.setSchoolId(schoolId);
        args.setRealName(realName);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysUserThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserBySchoolIdAndOtherParams();
      }
    }

    public void findUserByUserIdList(java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserByUserIdList_call method_call = new findUserByUserIdList_call(userIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserByUserIdList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysUserThrift>> {
      private java.util.List<java.lang.String> userIdList;
      public findUserByUserIdList_call(java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userIdList = userIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserByUserIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserByUserIdList_args args = new findUserByUserIdList_args();
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysUserThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserByUserIdList();
      }
    }

    public void findUserBySchoolIdAndRealNameLike(java.lang.String schoolId, java.lang.String realName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserBySchoolIdAndRealNameLike_call method_call = new findUserBySchoolIdAndRealNameLike_call(schoolId, realName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserBySchoolIdAndRealNameLike_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysUserThrift>> {
      private java.lang.String schoolId;
      private java.lang.String realName;
      public findUserBySchoolIdAndRealNameLike_call(java.lang.String schoolId, java.lang.String realName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.realName = realName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserBySchoolIdAndRealNameLike", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserBySchoolIdAndRealNameLike_args args = new findUserBySchoolIdAndRealNameLike_args();
        args.setSchoolId(schoolId);
        args.setRealName(realName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysUserThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserBySchoolIdAndRealNameLike();
      }
    }

    public void findPageUser(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String officeId, java.lang.String groupType, java.lang.String username, java.lang.String realName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPageUser_call method_call = new findPageUser_call(pageNum, pageSize, schoolId, officeId, groupType, username, realName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPageUser_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int pageNum;
      private int pageSize;
      private java.lang.String schoolId;
      private java.lang.String officeId;
      private java.lang.String groupType;
      private java.lang.String username;
      private java.lang.String realName;
      public findPageUser_call(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String officeId, java.lang.String groupType, java.lang.String username, java.lang.String realName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
        this.pageSize = pageSize;
        this.schoolId = schoolId;
        this.officeId = officeId;
        this.groupType = groupType;
        this.username = username;
        this.realName = realName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPageUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPageUser_args args = new findPageUser_args();
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.setSchoolId(schoolId);
        args.setOfficeId(officeId);
        args.setGroupType(groupType);
        args.setUsername(username);
        args.setRealName(realName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPageUser();
      }
    }

    public void findPageUserWithJsonParams(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPageUserWithJsonParams_call method_call = new findPageUserWithJsonParams_call(pageNum, pageSize, schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPageUserWithJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int pageNum;
      private int pageSize;
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findPageUserWithJsonParams_call(int pageNum, int pageSize, java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
        this.pageSize = pageSize;
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPageUserWithJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPageUserWithJsonParams_args args = new findPageUserWithJsonParams_args();
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPageUserWithJsonParams();
      }
    }

    public void findUserIdListWithJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserIdListWithJsonParams_call method_call = new findUserIdListWithJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserIdListWithJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findUserIdListWithJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserIdListWithJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserIdListWithJsonParams_args args = new findUserIdListWithJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserIdListWithJsonParams();
      }
    }

    public void updateUserByUserId(java.lang.String userId, java.lang.String wxOpenId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserByUserId_call method_call = new updateUserByUserId_call(userId, wxOpenId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserByUserId_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String userId;
      private java.lang.String wxOpenId;
      public updateUserByUserId_call(java.lang.String userId, java.lang.String wxOpenId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.wxOpenId = wxOpenId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserByUserId_args args = new updateUserByUserId_args();
        args.setUserId(userId);
        args.setWxOpenId(wxOpenId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findUserByOpenId(java.lang.String openId, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserByOpenId_call method_call = new findUserByOpenId_call(openId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserByOpenId_call extends org.apache.thrift.async.TAsyncMethodCall<SysUserThrift> {
      private java.lang.String openId;
      public findUserByOpenId_call(java.lang.String openId, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.openId = openId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserByOpenId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserByOpenId_args args = new findUserByOpenId_args();
        args.setOpenId(openId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysUserThrift getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserByOpenId();
      }
    }

    public void findUserIdBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String officeId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserIdBySchoolIdAndOtherParams_call method_call = new findUserIdBySchoolIdAndOtherParams_call(schoolId, officeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserIdBySchoolIdAndOtherParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String schoolId;
      private java.lang.String officeId;
      public findUserIdBySchoolIdAndOtherParams_call(java.lang.String schoolId, java.lang.String officeId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.officeId = officeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserIdBySchoolIdAndOtherParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserIdBySchoolIdAndOtherParams_args args = new findUserIdBySchoolIdAndOtherParams_args();
        args.setSchoolId(schoolId);
        args.setOfficeId(officeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserIdBySchoolIdAndOtherParams();
      }
    }

    public void findNjssoStudentByIdIn(java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNjssoStudentByIdIn_call method_call = new findNjssoStudentByIdIn_call(userIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNjssoStudentByIdIn_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.util.List<java.lang.String> userIdList;
      public findNjssoStudentByIdIn_call(java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userIdList = userIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNjssoStudentByIdIn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNjssoStudentByIdIn_args args = new findNjssoStudentByIdIn_args();
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNjssoStudentByIdIn();
      }
    }

    public void findStudentBySchoolIdIdIn(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStudentBySchoolIdIdIn_call method_call = new findStudentBySchoolIdIdIn_call(schoolId, userIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStudentBySchoolIdIdIn_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> userIdList;
      public findStudentBySchoolIdIdIn_call(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userIdList = userIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStudentBySchoolIdIdIn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStudentBySchoolIdIdIn_args args = new findStudentBySchoolIdIdIn_args();
        args.setSchoolId(schoolId);
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStudentBySchoolIdIdIn();
      }
    }

    public void findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(java.lang.String schoolId, byte papersType, java.lang.String papersNo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_call method_call = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_call(schoolId, papersType, papersNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private byte papersType;
      private java.lang.String papersNo;
      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_call(java.lang.String schoolId, byte papersType, java.lang.String papersNo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.papersType = papersType;
        this.papersNo = papersNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args args = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args();
        args.setSchoolId(schoolId);
        args.setPapersType(papersType);
        args.setPapersNo(papersNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSchoolUserBySchoolIdAndPapersTypeAndPapersNo();
      }
    }

    public void updatePassword(java.lang.String password, java.lang.String newPassword, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePassword_call method_call = new updatePassword_call(password, newPassword, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePassword_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String password;
      private java.lang.String newPassword;
      private java.lang.String userId;
      public updatePassword_call(java.lang.String password, java.lang.String newPassword, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.password = password;
        this.newPassword = newPassword;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePassword_args args = new updatePassword_args();
        args.setPassword(password);
        args.setNewPassword(newPassword);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findStudentUserByOfficeIdAndSchoolId(java.lang.String officeId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStudentUserByOfficeIdAndSchoolId_call method_call = new findStudentUserByOfficeIdAndSchoolId_call(officeId, schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStudentUserByOfficeIdAndSchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String officeId;
      private java.lang.String schoolId;
      public findStudentUserByOfficeIdAndSchoolId_call(java.lang.String officeId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.officeId = officeId;
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStudentUserByOfficeIdAndSchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStudentUserByOfficeIdAndSchoolId_args args = new findStudentUserByOfficeIdAndSchoolId_args();
        args.setOfficeId(officeId);
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStudentUserByOfficeIdAndSchoolId();
      }
    }

    public void updateUserInfo(java.lang.String paramsStr, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserInfo_call method_call = new updateUserInfo_call(paramsStr, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String paramsStr;
      private java.lang.String userId;
      public updateUserInfo_call(java.lang.String paramsStr, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramsStr = paramsStr;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserInfo_args args = new updateUserInfo_args();
        args.setParamsStr(paramsStr);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void updateUserInfoByUserIdAndJsonParams(java.lang.String userId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserInfoByUserIdAndJsonParams_call method_call = new updateUserInfoByUserIdAndJsonParams_call(userId, paramsStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserInfoByUserIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String userId;
      private java.lang.String paramsStr;
      public updateUserInfoByUserIdAndJsonParams_call(java.lang.String userId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.paramsStr = paramsStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserInfoByUserIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserInfoByUserIdAndJsonParams_args args = new updateUserInfoByUserIdAndJsonParams_args();
        args.setUserId(userId);
        args.setParamsStr(paramsStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void loginByUsernameAndPassword(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginByUsernameAndPassword_call method_call = new loginByUsernameAndPassword_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginByUsernameAndPassword_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String username;
      private java.lang.String password;
      public loginByUsernameAndPassword_call(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginByUsernameAndPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginByUsernameAndPassword_args args = new loginByUsernameAndPassword_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginByUsernameAndPassword();
      }
    }

    public void findParentBySchoolIdAndUserId(java.lang.String schoolId, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findParentBySchoolIdAndUserId_call method_call = new findParentBySchoolIdAndUserId_call(schoolId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findParentBySchoolIdAndUserId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String userId;
      public findParentBySchoolIdAndUserId_call(java.lang.String schoolId, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findParentBySchoolIdAndUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findParentBySchoolIdAndUserId_args args = new findParentBySchoolIdAndUserId_args();
        args.setSchoolId(schoolId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findParentBySchoolIdAndUserId();
      }
    }

    public void findUserBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserBySchoolIdAndOtherJsonParams_call method_call = new findUserBySchoolIdAndOtherJsonParams_call(schoolId, paramsStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserBySchoolIdAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String paramsStr;
      public findUserBySchoolIdAndOtherJsonParams_call(java.lang.String schoolId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.paramsStr = paramsStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserBySchoolIdAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserBySchoolIdAndOtherJsonParams_args args = new findUserBySchoolIdAndOtherJsonParams_args();
        args.setSchoolId(schoolId);
        args.setParamsStr(paramsStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserBySchoolIdAndOtherJsonParams();
      }
    }

    public void findUserBySchoolIdAndStaffNoInOrStudentNoIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserBySchoolIdAndStaffNoInOrStudentNoIn_call method_call = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_call(schoolId, outIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> outIdList;
      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_call(java.lang.String schoolId, java.util.List<java.lang.String> outIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.outIdList = outIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserBySchoolIdAndStaffNoInOrStudentNoIn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserBySchoolIdAndStaffNoInOrStudentNoIn_args args = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_args();
        args.setSchoolId(schoolId);
        args.setOutIdList(outIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserBySchoolIdAndStaffNoInOrStudentNoIn();
      }
    }

    public void findUserBySchoolIdAndOutIdIn(java.lang.String schoolId, java.util.List<java.lang.String> outIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserBySchoolIdAndOutIdIn_call method_call = new findUserBySchoolIdAndOutIdIn_call(schoolId, outIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserBySchoolIdAndOutIdIn_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> outIdList;
      public findUserBySchoolIdAndOutIdIn_call(java.lang.String schoolId, java.util.List<java.lang.String> outIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.outIdList = outIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserBySchoolIdAndOutIdIn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserBySchoolIdAndOutIdIn_args args = new findUserBySchoolIdAndOutIdIn_args();
        args.setSchoolId(schoolId);
        args.setOutIdList(outIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserBySchoolIdAndOutIdIn();
      }
    }

    public void findUnsyncUserBySchoolIdAndOtherParams(java.lang.String schoolId, java.lang.String preSyncTime, java.lang.String syncEndTime, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUnsyncUserBySchoolIdAndOtherParams_call method_call = new findUnsyncUserBySchoolIdAndOtherParams_call(schoolId, preSyncTime, syncEndTime, userIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUnsyncUserBySchoolIdAndOtherParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String preSyncTime;
      private java.lang.String syncEndTime;
      private java.util.List<java.lang.String> userIdList;
      public findUnsyncUserBySchoolIdAndOtherParams_call(java.lang.String schoolId, java.lang.String preSyncTime, java.lang.String syncEndTime, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.preSyncTime = preSyncTime;
        this.syncEndTime = syncEndTime;
        this.userIdList = userIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUnsyncUserBySchoolIdAndOtherParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUnsyncUserBySchoolIdAndOtherParams_args args = new findUnsyncUserBySchoolIdAndOtherParams_args();
        args.setSchoolId(schoolId);
        args.setPreSyncTime(preSyncTime);
        args.setSyncEndTime(syncEndTime);
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUnsyncUserBySchoolIdAndOtherParams();
      }
    }

    public void findUserWithOutIdByUserId(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserWithOutIdByUserId_call method_call = new findUserWithOutIdByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserWithOutIdByUserId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String userId;
      public findUserWithOutIdByUserId_call(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserWithOutIdByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserWithOutIdByUserId_args args = new findUserWithOutIdByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserWithOutIdByUserId();
      }
    }

    public void findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call method_call = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call(schoolId, preSyncTime, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private long preSyncTime;
      private java.lang.String jsonParams;
      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.preSyncTime = preSyncTime;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
        args.setSchoolId(schoolId);
        args.setPreSyncTime(preSyncTime);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams();
      }
    }

    public void findStudentBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStudentBusiInfoBySchoolIdAndOtherJsonParams_call method_call = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStudentBusiInfoBySchoolIdAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStudentBusiInfoBySchoolIdAndOtherJsonParams_args args = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStudentBusiInfoBySchoolIdAndOtherJsonParams();
      }
    }

    public void findTeacherBusiInfoBySchoolIdAndOtherJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTeacherBusiInfoBySchoolIdAndOtherJsonParams_call method_call = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTeacherBusiInfoBySchoolIdAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args args = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTeacherBusiInfoBySchoolIdAndOtherJsonParams();
      }
    }

    public void findChildBySchoolIdAndUserIds(java.lang.String schoolId, java.util.List<java.lang.String> ids, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findChildBySchoolIdAndUserIds_call method_call = new findChildBySchoolIdAndUserIds_call(schoolId, ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findChildBySchoolIdAndUserIds_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> ids;
      public findChildBySchoolIdAndUserIds_call(java.lang.String schoolId, java.util.List<java.lang.String> ids, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findChildBySchoolIdAndUserIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findChildBySchoolIdAndUserIds_args args = new findChildBySchoolIdAndUserIds_args();
        args.setSchoolId(schoolId);
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findChildBySchoolIdAndUserIds();
      }
    }

    public void findUnclassifiedUserBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUnclassifiedUserBySchoolId_call method_call = new findUnclassifiedUserBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUnclassifiedUserBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      public findUnclassifiedUserBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUnclassifiedUserBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUnclassifiedUserBySchoolId_args args = new findUnclassifiedUserBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUnclassifiedUserBySchoolId();
      }
    }

    public void findParentBySchoolIdAndChildIds(java.lang.String schoolId, java.util.List<java.lang.String> ids, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findParentBySchoolIdAndChildIds_call method_call = new findParentBySchoolIdAndChildIds_call(schoolId, ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findParentBySchoolIdAndChildIds_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> ids;
      public findParentBySchoolIdAndChildIds_call(java.lang.String schoolId, java.util.List<java.lang.String> ids, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findParentBySchoolIdAndChildIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findParentBySchoolIdAndChildIds_args args = new findParentBySchoolIdAndChildIds_args();
        args.setSchoolId(schoolId);
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findParentBySchoolIdAndChildIds();
      }
    }

    public void findClassStudentUserIdsBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findClassStudentUserIdsBySchoolId_call method_call = new findClassStudentUserIdsBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findClassStudentUserIdsBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      public findClassStudentUserIdsBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findClassStudentUserIdsBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findClassStudentUserIdsBySchoolId_args args = new findClassStudentUserIdsBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findClassStudentUserIdsBySchoolId();
      }
    }

    public void findClassUserDetailBySchoolIdAndClassIdAndOtherParams(java.lang.String schoolId, java.lang.String classId, java.lang.String type, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findClassUserDetailBySchoolIdAndClassIdAndOtherParams_call method_call = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_call(schoolId, classId, type, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String classId;
      private java.lang.String type;
      private java.lang.String userId;
      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_call(java.lang.String schoolId, java.lang.String classId, java.lang.String type, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.classId = classId;
        this.type = type;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findClassUserDetailBySchoolIdAndClassIdAndOtherParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args args = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args();
        args.setSchoolId(schoolId);
        args.setClassId(classId);
        args.setType(type);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findClassUserDetailBySchoolIdAndClassIdAndOtherParams();
      }
    }

    public void saveOrUpdateClassUserDetail(java.lang.String paramsStr, java.lang.String operateUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOrUpdateClassUserDetail_call method_call = new saveOrUpdateClassUserDetail_call(paramsStr, operateUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOrUpdateClassUserDetail_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String paramsStr;
      private java.lang.String operateUserId;
      public saveOrUpdateClassUserDetail_call(java.lang.String paramsStr, java.lang.String operateUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramsStr = paramsStr;
        this.operateUserId = operateUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOrUpdateClassUserDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOrUpdateClassUserDetail_args args = new saveOrUpdateClassUserDetail_args();
        args.setParamsStr(paramsStr);
        args.setOperateUserId(operateUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteClassUserDetail(java.lang.String schoolId, java.lang.String id, java.lang.String operateUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteClassUserDetail_call method_call = new deleteClassUserDetail_call(schoolId, id, operateUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteClassUserDetail_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String schoolId;
      private java.lang.String id;
      private java.lang.String operateUserId;
      public deleteClassUserDetail_call(java.lang.String schoolId, java.lang.String id, java.lang.String operateUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.id = id;
        this.operateUserId = operateUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteClassUserDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteClassUserDetail_args args = new deleteClassUserDetail_args();
        args.setSchoolId(schoolId);
        args.setId(id);
        args.setOperateUserId(operateUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findClassUserDetailBySchoolIdAndUserIdAndOtherParams(java.lang.String schoolId, java.lang.String userId, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findClassUserDetailBySchoolIdAndUserIdAndOtherParams_call method_call = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_call(schoolId, userId, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String userId;
      private java.lang.String type;
      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_call(java.lang.String schoolId, java.lang.String userId, java.lang.String type, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userId = userId;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findClassUserDetailBySchoolIdAndUserIdAndOtherParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args args = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args();
        args.setSchoolId(schoolId);
        args.setUserId(userId);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findClassUserDetailBySchoolIdAndUserIdAndOtherParams();
      }
    }

    public void findSchoolBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSchoolBySchoolId_call method_call = new findSchoolBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSchoolBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      public findSchoolBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSchoolBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSchoolBySchoolId_args args = new findSchoolBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSchoolBySchoolId();
      }
    }

    public void findAllSchool(org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllSchool_call method_call = new findAllSchool_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllSchool_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysOfficeThrift>> {
      public findAllSchool_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllSchool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllSchool_args args = new findAllSchool_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysOfficeThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllSchool();
      }
    }

    public void findOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOfficeByUserIdAndSchoolId_call method_call = new findOfficeByUserIdAndSchoolId_call(userId, schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOfficeByUserIdAndSchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysOfficeThrift>> {
      private java.lang.String userId;
      private java.lang.String schoolId;
      public findOfficeByUserIdAndSchoolId_call(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOfficeByUserIdAndSchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOfficeByUserIdAndSchoolId_args args = new findOfficeByUserIdAndSchoolId_args();
        args.setUserId(userId);
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysOfficeThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOfficeByUserIdAndSchoolId();
      }
    }

    public void findOfficeBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOfficeBySchoolId_call method_call = new findOfficeBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOfficeBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysOfficeThrift>> {
      private java.lang.String schoolId;
      public findOfficeBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOfficeBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOfficeBySchoolId_args args = new findOfficeBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysOfficeThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOfficeBySchoolId();
      }
    }

    public void findTreeOfficeBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTreeOfficeBySchoolId_call method_call = new findTreeOfficeBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTreeOfficeBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysOfficeThrift>> {
      private java.lang.String schoolId;
      public findTreeOfficeBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTreeOfficeBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTreeOfficeBySchoolId_args args = new findTreeOfficeBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysOfficeThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTreeOfficeBySchoolId();
      }
    }

    public void findTreeOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTreeOfficeBySchoolIdAndOfficeType_call method_call = new findTreeOfficeBySchoolIdAndOfficeType_call(schoolId, officeType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTreeOfficeBySchoolIdAndOfficeType_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysOfficeThrift>> {
      private java.lang.String schoolId;
      private byte officeType;
      public findTreeOfficeBySchoolIdAndOfficeType_call(java.lang.String schoolId, byte officeType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.officeType = officeType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTreeOfficeBySchoolIdAndOfficeType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTreeOfficeBySchoolIdAndOfficeType_args args = new findTreeOfficeBySchoolIdAndOfficeType_args();
        args.setSchoolId(schoolId);
        args.setOfficeType(officeType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysOfficeThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTreeOfficeBySchoolIdAndOfficeType();
      }
    }

    public void findOfficeById(java.lang.String officeId, org.apache.thrift.async.AsyncMethodCallback<SysOfficeThrift> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOfficeById_call method_call = new findOfficeById_call(officeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOfficeById_call extends org.apache.thrift.async.TAsyncMethodCall<SysOfficeThrift> {
      private java.lang.String officeId;
      public findOfficeById_call(java.lang.String officeId, org.apache.thrift.async.AsyncMethodCallback<SysOfficeThrift> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.officeId = officeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOfficeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOfficeById_args args = new findOfficeById_args();
        args.setOfficeId(officeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysOfficeThrift getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOfficeById();
      }
    }

    public void findOfficeBySchoolIdAndOfficeType(java.lang.String schoolId, byte officeType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOfficeBySchoolIdAndOfficeType_call method_call = new findOfficeBySchoolIdAndOfficeType_call(schoolId, officeType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOfficeBySchoolIdAndOfficeType_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysOfficeThrift>> {
      private java.lang.String schoolId;
      private byte officeType;
      public findOfficeBySchoolIdAndOfficeType_call(java.lang.String schoolId, byte officeType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.officeType = officeType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOfficeBySchoolIdAndOfficeType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOfficeBySchoolIdAndOfficeType_args args = new findOfficeBySchoolIdAndOfficeType_args();
        args.setSchoolId(schoolId);
        args.setOfficeType(officeType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysOfficeThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOfficeBySchoolIdAndOfficeType();
      }
    }

    public void findAccessableOfficeByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAccessableOfficeByUserIdAndSchoolId_call method_call = new findAccessableOfficeByUserIdAndSchoolId_call(userId, schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAccessableOfficeByUserIdAndSchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String userId;
      private java.lang.String schoolId;
      public findAccessableOfficeByUserIdAndSchoolId_call(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAccessableOfficeByUserIdAndSchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAccessableOfficeByUserIdAndSchoolId_args args = new findAccessableOfficeByUserIdAndSchoolId_args();
        args.setUserId(userId);
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAccessableOfficeByUserIdAndSchoolId();
      }
    }

    public void findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(java.lang.String userId, java.lang.String schoolId, java.lang.String roleId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_call method_call = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_call(userId, schoolId, roleId, paramsStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String userId;
      private java.lang.String schoolId;
      private java.lang.String roleId;
      private java.lang.String paramsStr;
      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_call(java.lang.String userId, java.lang.String schoolId, java.lang.String roleId, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolId = schoolId;
        this.roleId = roleId;
        this.paramsStr = paramsStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args args = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args();
        args.setUserId(userId);
        args.setSchoolId(schoolId);
        args.setRoleId(roleId);
        args.setParamsStr(paramsStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams();
      }
    }

    public void findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call method_call = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call(schoolId, userIdList, paramsStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> userIdList;
      private java.lang.String paramsStr;
      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userIdList = userIdList;
        this.paramsStr = paramsStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
        args.setSchoolId(schoolId);
        args.setUserIdList(userIdList);
        args.setParamsStr(paramsStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOfficeBySchoolIdAndUserIdListAndOtherJsonParams();
      }
    }

    public void findUserOfficeBySchoolIdAndUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserOfficeBySchoolIdAndUserIdList_call method_call = new findUserOfficeBySchoolIdAndUserIdList_call(schoolId, userIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserOfficeBySchoolIdAndUserIdList_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> userIdList;
      public findUserOfficeBySchoolIdAndUserIdList_call(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userIdList = userIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserOfficeBySchoolIdAndUserIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserOfficeBySchoolIdAndUserIdList_args args = new findUserOfficeBySchoolIdAndUserIdList_args();
        args.setSchoolId(schoolId);
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserOfficeBySchoolIdAndUserIdList();
      }
    }

    public void findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call method_call = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call(schoolId, userIdList, paramsStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> userIdList;
      private java.lang.String paramsStr;
      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_call(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String paramsStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userIdList = userIdList;
        this.paramsStr = paramsStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
        args.setSchoolId(schoolId);
        args.setUserIdList(userIdList);
        args.setParamsStr(paramsStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams();
      }
    }

    public void findMenuPermByUserIdAndSchoolCodeAndAppCode(java.lang.String userId, java.lang.String schoolCode, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMenuPermByUserIdAndSchoolCodeAndAppCode_call method_call = new findMenuPermByUserIdAndSchoolCodeAndAppCode_call(userId, schoolCode, appCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMenuPermByUserIdAndSchoolCodeAndAppCode_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysMenuPermissionThrift>> {
      private java.lang.String userId;
      private java.lang.String schoolCode;
      private java.lang.String appCode;
      public findMenuPermByUserIdAndSchoolCodeAndAppCode_call(java.lang.String userId, java.lang.String schoolCode, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolCode = schoolCode;
        this.appCode = appCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMenuPermByUserIdAndSchoolCodeAndAppCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMenuPermByUserIdAndSchoolCodeAndAppCode_args args = new findMenuPermByUserIdAndSchoolCodeAndAppCode_args();
        args.setUserId(userId);
        args.setSchoolCode(schoolCode);
        args.setAppCode(appCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysMenuPermissionThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMenuPermByUserIdAndSchoolCodeAndAppCode();
      }
    }

    public void findMenuPermByUserIdAndSchoolIdAndAppCode(java.lang.String userId, java.lang.String schoolId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMenuPermByUserIdAndSchoolIdAndAppCode_call method_call = new findMenuPermByUserIdAndSchoolIdAndAppCode_call(userId, schoolId, appCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMenuPermByUserIdAndSchoolIdAndAppCode_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysMenuPermissionThrift>> {
      private java.lang.String userId;
      private java.lang.String schoolId;
      private java.lang.String appCode;
      public findMenuPermByUserIdAndSchoolIdAndAppCode_call(java.lang.String userId, java.lang.String schoolId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolId = schoolId;
        this.appCode = appCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMenuPermByUserIdAndSchoolIdAndAppCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMenuPermByUserIdAndSchoolIdAndAppCode_args args = new findMenuPermByUserIdAndSchoolIdAndAppCode_args();
        args.setUserId(userId);
        args.setSchoolId(schoolId);
        args.setAppCode(appCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysMenuPermissionThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMenuPermByUserIdAndSchoolIdAndAppCode();
      }
    }

    public void findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(java.lang.String schoolId, java.lang.String roleId, java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_call method_call = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_call(schoolId, roleId, jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String roleId;
      private java.lang.String jsonStr;
      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_call(java.lang.String schoolId, java.lang.String roleId, java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.roleId = roleId;
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args args = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args();
        args.setSchoolId(schoolId);
        args.setRoleId(roleId);
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam();
      }
    }

    public void findRoleByUserIdAndSchoolCode(java.lang.String userId, java.lang.String schoolCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRoleByUserIdAndSchoolCode_call method_call = new findRoleByUserIdAndSchoolCode_call(userId, schoolCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRoleByUserIdAndSchoolCode_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysRoleThrift>> {
      private java.lang.String userId;
      private java.lang.String schoolCode;
      public findRoleByUserIdAndSchoolCode_call(java.lang.String userId, java.lang.String schoolCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolCode = schoolCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRoleByUserIdAndSchoolCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRoleByUserIdAndSchoolCode_args args = new findRoleByUserIdAndSchoolCode_args();
        args.setUserId(userId);
        args.setSchoolCode(schoolCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysRoleThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRoleByUserIdAndSchoolCode();
      }
    }

    public void findRoleBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRoleBySchoolId_call method_call = new findRoleBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRoleBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysRoleThrift>> {
      private java.lang.String schoolId;
      public findRoleBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRoleBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRoleBySchoolId_args args = new findRoleBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysRoleThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRoleBySchoolId();
      }
    }

    public void findRoleByRoleId(java.lang.String roleId, org.apache.thrift.async.AsyncMethodCallback<SysRoleThrift> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRoleByRoleId_call method_call = new findRoleByRoleId_call(roleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRoleByRoleId_call extends org.apache.thrift.async.TAsyncMethodCall<SysRoleThrift> {
      private java.lang.String roleId;
      public findRoleByRoleId_call(java.lang.String roleId, org.apache.thrift.async.AsyncMethodCallback<SysRoleThrift> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleId = roleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRoleByRoleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRoleByRoleId_args args = new findRoleByRoleId_args();
        args.setRoleId(roleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysRoleThrift getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRoleByRoleId();
      }
    }

    public void findRoleByUserIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRoleByUserIdAndSchoolId_call method_call = new findRoleByUserIdAndSchoolId_call(userId, schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRoleByUserIdAndSchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysRoleThrift>> {
      private java.lang.String userId;
      private java.lang.String schoolId;
      public findRoleByUserIdAndSchoolId_call(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRoleByUserIdAndSchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRoleByUserIdAndSchoolId_args args = new findRoleByUserIdAndSchoolId_args();
        args.setUserId(userId);
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysRoleThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRoleByUserIdAndSchoolId();
      }
    }

    public void findSchoolRoleListByUserId(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSchoolRoleListByUserId_call method_call = new findSchoolRoleListByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSchoolRoleListByUserId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String userId;
      public findSchoolRoleListByUserId_call(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSchoolRoleListByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSchoolRoleListByUserId_args args = new findSchoolRoleListByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSchoolRoleListByUserId();
      }
    }

    public void findOpenRoleBySchoolId(java.lang.String schoolId, java.lang.String groupType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOpenRoleBySchoolId_call method_call = new findOpenRoleBySchoolId_call(schoolId, groupType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOpenRoleBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysRoleThrift>> {
      private java.lang.String schoolId;
      private java.lang.String groupType;
      public findOpenRoleBySchoolId_call(java.lang.String schoolId, java.lang.String groupType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.groupType = groupType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOpenRoleBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOpenRoleBySchoolId_args args = new findOpenRoleBySchoolId_args();
        args.setSchoolId(schoolId);
        args.setGroupType(groupType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysRoleThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOpenRoleBySchoolId();
      }
    }

    public void registerRole(java.lang.String paramsStr, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerRole_call method_call = new registerRole_call(paramsStr, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerRole_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String paramsStr;
      private java.lang.String userId;
      public registerRole_call(java.lang.String paramsStr, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramsStr = paramsStr;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerRole_args args = new registerRole_args();
        args.setParamsStr(paramsStr);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findRolesByUserIdList(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRolesByUserIdList_call method_call = new findRolesByUserIdList_call(schoolId, userIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRolesByUserIdList_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> userIdList;
      public findRolesByUserIdList_call(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userIdList = userIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRolesByUserIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRolesByUserIdList_args args = new findRolesByUserIdList_args();
        args.setSchoolId(schoolId);
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRolesByUserIdList();
      }
    }

    public void findSchoolAppDetailBySchoolCodeAndAppCode(java.lang.String schoolCode, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<SysSchoolAppDetailThrift> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSchoolAppDetailBySchoolCodeAndAppCode_call method_call = new findSchoolAppDetailBySchoolCodeAndAppCode_call(schoolCode, appCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSchoolAppDetailBySchoolCodeAndAppCode_call extends org.apache.thrift.async.TAsyncMethodCall<SysSchoolAppDetailThrift> {
      private java.lang.String schoolCode;
      private java.lang.String appCode;
      public findSchoolAppDetailBySchoolCodeAndAppCode_call(java.lang.String schoolCode, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<SysSchoolAppDetailThrift> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolCode = schoolCode;
        this.appCode = appCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSchoolAppDetailBySchoolCodeAndAppCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSchoolAppDetailBySchoolCodeAndAppCode_args args = new findSchoolAppDetailBySchoolCodeAndAppCode_args();
        args.setSchoolCode(schoolCode);
        args.setAppCode(appCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysSchoolAppDetailThrift getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSchoolAppDetailBySchoolCodeAndAppCode();
      }
    }

    public void findSchoolByUserIdAndAppCode(java.lang.String userId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SchoolRoleVoThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSchoolByUserIdAndAppCode_call method_call = new findSchoolByUserIdAndAppCode_call(userId, appCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSchoolByUserIdAndAppCode_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SchoolRoleVoThrift>> {
      private java.lang.String userId;
      private java.lang.String appCode;
      public findSchoolByUserIdAndAppCode_call(java.lang.String userId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SchoolRoleVoThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.appCode = appCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSchoolByUserIdAndAppCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSchoolByUserIdAndAppCode_args args = new findSchoolByUserIdAndAppCode_args();
        args.setUserId(userId);
        args.setAppCode(appCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SchoolRoleVoThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSchoolByUserIdAndAppCode();
      }
    }

    public void findSysRoleRegisterRequirementByRoleId(java.lang.String roleId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleRegisterRequirementThrift>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSysRoleRegisterRequirementByRoleId_call method_call = new findSysRoleRegisterRequirementByRoleId_call(roleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSysRoleRegisterRequirementByRoleId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<SysRoleRegisterRequirementThrift>> {
      private java.lang.String roleId;
      public findSysRoleRegisterRequirementByRoleId_call(java.lang.String roleId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleRegisterRequirementThrift>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleId = roleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSysRoleRegisterRequirementByRoleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSysRoleRegisterRequirementByRoleId_args args = new findSysRoleRegisterRequirementByRoleId_args();
        args.setRoleId(roleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<SysRoleRegisterRequirementThrift> getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSysRoleRegisterRequirementByRoleId();
      }
    }

    public void findNormalUserChildByParentIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNormalUserChildByParentIdAndSchoolId_call method_call = new findNormalUserChildByParentIdAndSchoolId_call(userId, schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNormalUserChildByParentIdAndSchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String userId;
      private java.lang.String schoolId;
      public findNormalUserChildByParentIdAndSchoolId_call(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNormalUserChildByParentIdAndSchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNormalUserChildByParentIdAndSchoolId_args args = new findNormalUserChildByParentIdAndSchoolId_args();
        args.setUserId(userId);
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNormalUserChildByParentIdAndSchoolId();
      }
    }

    public void findNormalUserParentByChildIdAndSchoolId(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNormalUserParentByChildIdAndSchoolId_call method_call = new findNormalUserParentByChildIdAndSchoolId_call(userId, schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNormalUserParentByChildIdAndSchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String userId;
      private java.lang.String schoolId;
      public findNormalUserParentByChildIdAndSchoolId_call(java.lang.String userId, java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNormalUserParentByChildIdAndSchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNormalUserParentByChildIdAndSchoolId_args args = new findNormalUserParentByChildIdAndSchoolId_args();
        args.setUserId(userId);
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNormalUserParentByChildIdAndSchoolId();
      }
    }

    public void findSchoolAppConfigBySchoolIdAndAppCode(java.lang.String schoolId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSchoolAppConfigBySchoolIdAndAppCode_call method_call = new findSchoolAppConfigBySchoolIdAndAppCode_call(schoolId, appCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSchoolAppConfigBySchoolIdAndAppCode_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String appCode;
      public findSchoolAppConfigBySchoolIdAndAppCode_call(java.lang.String schoolId, java.lang.String appCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.appCode = appCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSchoolAppConfigBySchoolIdAndAppCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSchoolAppConfigBySchoolIdAndAppCode_args args = new findSchoolAppConfigBySchoolIdAndAppCode_args();
        args.setSchoolId(schoolId);
        args.setAppCode(appCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSchoolAppConfigBySchoolIdAndAppCode();
      }
    }

    public void findStudentOrTeacherUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStudentOrTeacherUserBySchoolIdAndJsonParams_call method_call = new findStudentOrTeacherUserBySchoolIdAndJsonParams_call(schoolId, jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStudentOrTeacherUserBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonStr;
      public findStudentOrTeacherUserBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStudentOrTeacherUserBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStudentOrTeacherUserBySchoolIdAndJsonParams_args args = new findStudentOrTeacherUserBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStudentOrTeacherUserBySchoolIdAndJsonParams();
      }
    }

    public void findAppByJsonParams(java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAppByJsonParams_call method_call = new findAppByJsonParams_call(jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAppByJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String jsonStr;
      public findAppByJsonParams_call(java.lang.String jsonStr, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAppByJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAppByJsonParams_args args = new findAppByJsonParams_args();
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAppByJsonParams();
      }
    }

    public void findOfficeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOfficeBySchoolIdAndJsonParams_call method_call = new findOfficeBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOfficeBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findOfficeBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOfficeBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOfficeBySchoolIdAndJsonParams_args args = new findOfficeBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOfficeBySchoolIdAndJsonParams();
      }
    }

    public void findDictDataByDictTypeCodeList(java.util.List<java.lang.String> dictTypeCodeList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findDictDataByDictTypeCodeList_call method_call = new findDictDataByDictTypeCodeList_call(dictTypeCodeList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findDictDataByDictTypeCodeList_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.util.List<java.lang.String> dictTypeCodeList;
      public findDictDataByDictTypeCodeList_call(java.util.List<java.lang.String> dictTypeCodeList, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dictTypeCodeList = dictTypeCodeList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findDictDataByDictTypeCodeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findDictDataByDictTypeCodeList_args args = new findDictDataByDictTypeCodeList_args();
        args.setDictTypeCodeList(dictTypeCodeList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findDictDataByDictTypeCodeList();
      }
    }

    public void findSubjectBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSubjectBySchoolIdAndJsonParams_call method_call = new findSubjectBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSubjectBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findSubjectBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSubjectBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSubjectBySchoolIdAndJsonParams_args args = new findSubjectBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSubjectBySchoolIdAndJsonParams();
      }
    }

    public void findLessonBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLessonBySchoolIdAndJsonParams_call method_call = new findLessonBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLessonBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findLessonBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLessonBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLessonBySchoolIdAndJsonParams_args args = new findLessonBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLessonBySchoolIdAndJsonParams();
      }
    }

    public void findPlaceBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPlaceBySchoolIdAndJsonParams_call method_call = new findPlaceBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPlaceBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findPlaceBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPlaceBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPlaceBySchoolIdAndJsonParams_args args = new findPlaceBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPlaceBySchoolIdAndJsonParams();
      }
    }

    public void findGradeBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGradeBySchoolId_call method_call = new findGradeBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGradeBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      public findGradeBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGradeBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGradeBySchoolId_args args = new findGradeBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGradeBySchoolId();
      }
    }

    public void findClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findClassBySchoolIdAndJsonParams_call method_call = new findClassBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findClassBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findClassBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findClassBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findClassBySchoolIdAndJsonParams_args args = new findClassBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findClassBySchoolIdAndJsonParams();
      }
    }

    public void findStudentBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStudentBySchoolIdAndJsonParams_call method_call = new findStudentBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStudentBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findStudentBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStudentBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStudentBySchoolIdAndJsonParams_args args = new findStudentBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStudentBySchoolIdAndJsonParams();
      }
    }

    public void findJobTypeBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findJobTypeBySchoolIdAndJsonParams_call method_call = new findJobTypeBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findJobTypeBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findJobTypeBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findJobTypeBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findJobTypeBySchoolIdAndJsonParams_args args = new findJobTypeBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findJobTypeBySchoolIdAndJsonParams();
      }
    }

    public void findJobBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findJobBySchoolIdAndJsonParams_call method_call = new findJobBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findJobBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findJobBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findJobBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findJobBySchoolIdAndJsonParams_args args = new findJobBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findJobBySchoolIdAndJsonParams();
      }
    }

    public void findUserBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserBySchoolIdAndJsonParams_call method_call = new findUserBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findUserBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserBySchoolIdAndJsonParams_args args = new findUserBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserBySchoolIdAndJsonParams();
      }
    }

    public void findCalendarBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCalendarBySchoolIdAndJsonParams_call method_call = new findCalendarBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCalendarBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findCalendarBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCalendarBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCalendarBySchoolIdAndJsonParams_args args = new findCalendarBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCalendarBySchoolIdAndJsonParams();
      }
    }

    public void findStaffBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStaffBySchoolIdAndJsonParams_call method_call = new findStaffBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStaffBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findStaffBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStaffBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStaffBySchoolIdAndJsonParams_args args = new findStaffBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStaffBySchoolIdAndJsonParams();
      }
    }

    public void findHeadTeacherBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findHeadTeacherBySchoolIdAndJsonParams_call method_call = new findHeadTeacherBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findHeadTeacherBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findHeadTeacherBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findHeadTeacherBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findHeadTeacherBySchoolIdAndJsonParams_args args = new findHeadTeacherBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findHeadTeacherBySchoolIdAndJsonParams();
      }
    }

    public void findClassUserDetailBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findClassUserDetailBySchoolIdAndJsonParams_call method_call = new findClassUserDetailBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findClassUserDetailBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findClassUserDetailBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findClassUserDetailBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findClassUserDetailBySchoolIdAndJsonParams_args args = new findClassUserDetailBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findClassUserDetailBySchoolIdAndJsonParams();
      }
    }

    public void findBriefUserByV5(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findBriefUserByV5_call method_call = new findBriefUserByV5_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findBriefUserByV5_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findBriefUserByV5_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findBriefUserByV5", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findBriefUserByV5_args args = new findBriefUserByV5_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findBriefUserByV5();
      }
    }

    public void findNewPageUserBy(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNewPageUserBy_call method_call = new findNewPageUserBy_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNewPageUserBy_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findNewPageUserBy_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNewPageUserBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNewPageUserBy_args args = new findNewPageUserBy_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNewPageUserBy();
      }
    }

    public void findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> officeIdList, java.util.List<java.lang.String> classIdList, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_call method_call = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_call(schoolId, officeIdList, classIdList, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> officeIdList;
      private java.util.List<java.lang.String> classIdList;
      private java.lang.String jsonParams;
      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_call(java.lang.String schoolId, java.util.List<java.lang.String> officeIdList, java.util.List<java.lang.String> classIdList, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.officeIdList = officeIdList;
        this.classIdList = classIdList;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args args = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setOfficeIdList(officeIdList);
        args.setClassIdList(classIdList);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams();
      }
    }

    public void findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(java.lang.String schoolId, java.lang.String classId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_call method_call = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_call(schoolId, classId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String classId;
      private java.lang.String jsonParams;
      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_call(java.lang.String schoolId, java.lang.String classId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.classId = classId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args args = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setClassId(classId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams();
      }
    }

    public void findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call method_call = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call(schoolId, preSyncTime, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private long preSyncTime;
      private java.lang.String jsonParams;
      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_call(java.lang.String schoolId, long preSyncTime, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.preSyncTime = preSyncTime;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
        args.setSchoolId(schoolId);
        args.setPreSyncTime(preSyncTime);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams();
      }
    }

    public void findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(java.lang.String schoolId, java.lang.String officeId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_call method_call = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_call(schoolId, officeId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String officeId;
      private java.lang.String jsonParams;
      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_call(java.lang.String schoolId, java.lang.String officeId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.officeId = officeId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args args = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setOfficeId(officeId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams();
      }
    }

    public void findAbnormalUserIdListBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAbnormalUserIdListBySchoolId_call method_call = new findAbnormalUserIdListBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAbnormalUserIdListBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      public findAbnormalUserIdListBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAbnormalUserIdListBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAbnormalUserIdListBySchoolId_args args = new findAbnormalUserIdListBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAbnormalUserIdListBySchoolId();
      }
    }

    public void findSemesterBySchoolId(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSemesterBySchoolId_call method_call = new findSemesterBySchoolId_call(schoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSemesterBySchoolId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      public findSemesterBySchoolId_call(java.lang.String schoolId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSemesterBySchoolId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSemesterBySchoolId_args args = new findSemesterBySchoolId_args();
        args.setSchoolId(schoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSemesterBySchoolId();
      }
    }

    public void findRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRoleBySchoolIdAndJsonParams_call method_call = new findRoleBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRoleBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findRoleBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRoleBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRoleBySchoolIdAndJsonParams_args args = new findRoleBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRoleBySchoolIdAndJsonParams();
      }
    }

    public void findSysRoleBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSysRoleBySchoolIdAndJsonParams_call method_call = new findSysRoleBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSysRoleBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findSysRoleBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSysRoleBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSysRoleBySchoolIdAndJsonParams_args args = new findSysRoleBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSysRoleBySchoolIdAndJsonParams();
      }
    }

    public void findBusiClassBySchoolIdAndJsonParams(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findBusiClassBySchoolIdAndJsonParams_call method_call = new findBusiClassBySchoolIdAndJsonParams_call(schoolId, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findBusiClassBySchoolIdAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.lang.String jsonParams;
      public findBusiClassBySchoolIdAndJsonParams_call(java.lang.String schoolId, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findBusiClassBySchoolIdAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findBusiClassBySchoolIdAndJsonParams_args args = new findBusiClassBySchoolIdAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findBusiClassBySchoolIdAndJsonParams();
      }
    }

    public void findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_call method_call = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_call(schoolId, userIdList, jsonParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String schoolId;
      private java.util.List<java.lang.String> userIdList;
      private java.lang.String jsonParams;
      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_call(java.lang.String schoolId, java.util.List<java.lang.String> userIdList, java.lang.String jsonParams, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolId = schoolId;
        this.userIdList = userIdList;
        this.jsonParams = jsonParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args args = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args();
        args.setSchoolId(schoolId);
        args.setUserIdList(userIdList);
        args.setJsonParams(jsonParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ThriftBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserJobTypeBySchoolIdAndUserIdListAndJsonParams();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findUserByUserId", new findUserByUserId());
      processMap.put("findUserBySchoolIdAndOtherParams", new findUserBySchoolIdAndOtherParams());
      processMap.put("findUserByUserIdList", new findUserByUserIdList());
      processMap.put("findUserBySchoolIdAndRealNameLike", new findUserBySchoolIdAndRealNameLike());
      processMap.put("findPageUser", new findPageUser());
      processMap.put("findPageUserWithJsonParams", new findPageUserWithJsonParams());
      processMap.put("findUserIdListWithJsonParams", new findUserIdListWithJsonParams());
      processMap.put("updateUserByUserId", new updateUserByUserId());
      processMap.put("findUserByOpenId", new findUserByOpenId());
      processMap.put("findUserIdBySchoolIdAndOtherParams", new findUserIdBySchoolIdAndOtherParams());
      processMap.put("findNjssoStudentByIdIn", new findNjssoStudentByIdIn());
      processMap.put("findStudentBySchoolIdIdIn", new findStudentBySchoolIdIdIn());
      processMap.put("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo", new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo());
      processMap.put("updatePassword", new updatePassword());
      processMap.put("findStudentUserByOfficeIdAndSchoolId", new findStudentUserByOfficeIdAndSchoolId());
      processMap.put("updateUserInfo", new updateUserInfo());
      processMap.put("updateUserInfoByUserIdAndJsonParams", new updateUserInfoByUserIdAndJsonParams());
      processMap.put("loginByUsernameAndPassword", new loginByUsernameAndPassword());
      processMap.put("findParentBySchoolIdAndUserId", new findParentBySchoolIdAndUserId());
      processMap.put("findUserBySchoolIdAndOtherJsonParams", new findUserBySchoolIdAndOtherJsonParams());
      processMap.put("findUserBySchoolIdAndStaffNoInOrStudentNoIn", new findUserBySchoolIdAndStaffNoInOrStudentNoIn());
      processMap.put("findUserBySchoolIdAndOutIdIn", new findUserBySchoolIdAndOutIdIn());
      processMap.put("findUnsyncUserBySchoolIdAndOtherParams", new findUnsyncUserBySchoolIdAndOtherParams());
      processMap.put("findUserWithOutIdByUserId", new findUserWithOutIdByUserId());
      processMap.put("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams());
      processMap.put("findStudentBusiInfoBySchoolIdAndOtherJsonParams", new findStudentBusiInfoBySchoolIdAndOtherJsonParams());
      processMap.put("findTeacherBusiInfoBySchoolIdAndOtherJsonParams", new findTeacherBusiInfoBySchoolIdAndOtherJsonParams());
      processMap.put("findChildBySchoolIdAndUserIds", new findChildBySchoolIdAndUserIds());
      processMap.put("findUnclassifiedUserBySchoolId", new findUnclassifiedUserBySchoolId());
      processMap.put("findParentBySchoolIdAndChildIds", new findParentBySchoolIdAndChildIds());
      processMap.put("findClassStudentUserIdsBySchoolId", new findClassStudentUserIdsBySchoolId());
      processMap.put("findClassUserDetailBySchoolIdAndClassIdAndOtherParams", new findClassUserDetailBySchoolIdAndClassIdAndOtherParams());
      processMap.put("saveOrUpdateClassUserDetail", new saveOrUpdateClassUserDetail());
      processMap.put("deleteClassUserDetail", new deleteClassUserDetail());
      processMap.put("findClassUserDetailBySchoolIdAndUserIdAndOtherParams", new findClassUserDetailBySchoolIdAndUserIdAndOtherParams());
      processMap.put("findSchoolBySchoolId", new findSchoolBySchoolId());
      processMap.put("findAllSchool", new findAllSchool());
      processMap.put("findOfficeByUserIdAndSchoolId", new findOfficeByUserIdAndSchoolId());
      processMap.put("findOfficeBySchoolId", new findOfficeBySchoolId());
      processMap.put("findTreeOfficeBySchoolId", new findTreeOfficeBySchoolId());
      processMap.put("findTreeOfficeBySchoolIdAndOfficeType", new findTreeOfficeBySchoolIdAndOfficeType());
      processMap.put("findOfficeById", new findOfficeById());
      processMap.put("findOfficeBySchoolIdAndOfficeType", new findOfficeBySchoolIdAndOfficeType());
      processMap.put("findAccessableOfficeByUserIdAndSchoolId", new findAccessableOfficeByUserIdAndSchoolId());
      processMap.put("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams", new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams());
      processMap.put("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams", new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams());
      processMap.put("findUserOfficeBySchoolIdAndUserIdList", new findUserOfficeBySchoolIdAndUserIdList());
      processMap.put("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams", new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams());
      processMap.put("findMenuPermByUserIdAndSchoolCodeAndAppCode", new findMenuPermByUserIdAndSchoolCodeAndAppCode());
      processMap.put("findMenuPermByUserIdAndSchoolIdAndAppCode", new findMenuPermByUserIdAndSchoolIdAndAppCode());
      processMap.put("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam", new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam());
      processMap.put("findRoleByUserIdAndSchoolCode", new findRoleByUserIdAndSchoolCode());
      processMap.put("findRoleBySchoolId", new findRoleBySchoolId());
      processMap.put("findRoleByRoleId", new findRoleByRoleId());
      processMap.put("findRoleByUserIdAndSchoolId", new findRoleByUserIdAndSchoolId());
      processMap.put("findSchoolRoleListByUserId", new findSchoolRoleListByUserId());
      processMap.put("findOpenRoleBySchoolId", new findOpenRoleBySchoolId());
      processMap.put("registerRole", new registerRole());
      processMap.put("findRolesByUserIdList", new findRolesByUserIdList());
      processMap.put("findSchoolAppDetailBySchoolCodeAndAppCode", new findSchoolAppDetailBySchoolCodeAndAppCode());
      processMap.put("findSchoolByUserIdAndAppCode", new findSchoolByUserIdAndAppCode());
      processMap.put("findSysRoleRegisterRequirementByRoleId", new findSysRoleRegisterRequirementByRoleId());
      processMap.put("findNormalUserChildByParentIdAndSchoolId", new findNormalUserChildByParentIdAndSchoolId());
      processMap.put("findNormalUserParentByChildIdAndSchoolId", new findNormalUserParentByChildIdAndSchoolId());
      processMap.put("findSchoolAppConfigBySchoolIdAndAppCode", new findSchoolAppConfigBySchoolIdAndAppCode());
      processMap.put("findStudentOrTeacherUserBySchoolIdAndJsonParams", new findStudentOrTeacherUserBySchoolIdAndJsonParams());
      processMap.put("findAppByJsonParams", new findAppByJsonParams());
      processMap.put("findOfficeBySchoolIdAndJsonParams", new findOfficeBySchoolIdAndJsonParams());
      processMap.put("findDictDataByDictTypeCodeList", new findDictDataByDictTypeCodeList());
      processMap.put("findSubjectBySchoolIdAndJsonParams", new findSubjectBySchoolIdAndJsonParams());
      processMap.put("findLessonBySchoolIdAndJsonParams", new findLessonBySchoolIdAndJsonParams());
      processMap.put("findPlaceBySchoolIdAndJsonParams", new findPlaceBySchoolIdAndJsonParams());
      processMap.put("findGradeBySchoolId", new findGradeBySchoolId());
      processMap.put("findClassBySchoolIdAndJsonParams", new findClassBySchoolIdAndJsonParams());
      processMap.put("findStudentBySchoolIdAndJsonParams", new findStudentBySchoolIdAndJsonParams());
      processMap.put("findJobTypeBySchoolIdAndJsonParams", new findJobTypeBySchoolIdAndJsonParams());
      processMap.put("findJobBySchoolIdAndJsonParams", new findJobBySchoolIdAndJsonParams());
      processMap.put("findUserBySchoolIdAndJsonParams", new findUserBySchoolIdAndJsonParams());
      processMap.put("findCalendarBySchoolIdAndJsonParams", new findCalendarBySchoolIdAndJsonParams());
      processMap.put("findStaffBySchoolIdAndJsonParams", new findStaffBySchoolIdAndJsonParams());
      processMap.put("findHeadTeacherBySchoolIdAndJsonParams", new findHeadTeacherBySchoolIdAndJsonParams());
      processMap.put("findClassUserDetailBySchoolIdAndJsonParams", new findClassUserDetailBySchoolIdAndJsonParams());
      processMap.put("findBriefUserByV5", new findBriefUserByV5());
      processMap.put("findNewPageUserBy", new findNewPageUserBy());
      processMap.put("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams", new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams());
      processMap.put("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams", new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams());
      processMap.put("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams());
      processMap.put("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams", new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams());
      processMap.put("findAbnormalUserIdListBySchoolId", new findAbnormalUserIdListBySchoolId());
      processMap.put("findSemesterBySchoolId", new findSemesterBySchoolId());
      processMap.put("findRoleBySchoolIdAndJsonParams", new findRoleBySchoolIdAndJsonParams());
      processMap.put("findSysRoleBySchoolIdAndJsonParams", new findSysRoleBySchoolIdAndJsonParams());
      processMap.put("findBusiClassBySchoolIdAndJsonParams", new findBusiClassBySchoolIdAndJsonParams());
      processMap.put("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams", new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams());
      return processMap;
    }

    public static class findUserByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserByUserId_args> {
      public findUserByUserId() {
        super("findUserByUserId");
      }

      public findUserByUserId_args getEmptyArgsInstance() {
        return new findUserByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserByUserId_result getResult(I iface, findUserByUserId_args args) throws org.apache.thrift.TException {
        findUserByUserId_result result = new findUserByUserId_result();
        try {
          result.success = iface.findUserByUserId(args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserBySchoolIdAndOtherParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserBySchoolIdAndOtherParams_args> {
      public findUserBySchoolIdAndOtherParams() {
        super("findUserBySchoolIdAndOtherParams");
      }

      public findUserBySchoolIdAndOtherParams_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndOtherParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserBySchoolIdAndOtherParams_result getResult(I iface, findUserBySchoolIdAndOtherParams_args args) throws org.apache.thrift.TException {
        findUserBySchoolIdAndOtherParams_result result = new findUserBySchoolIdAndOtherParams_result();
        try {
          result.success = iface.findUserBySchoolIdAndOtherParams(args.schoolId, args.realName, args.username);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserByUserIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserByUserIdList_args> {
      public findUserByUserIdList() {
        super("findUserByUserIdList");
      }

      public findUserByUserIdList_args getEmptyArgsInstance() {
        return new findUserByUserIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserByUserIdList_result getResult(I iface, findUserByUserIdList_args args) throws org.apache.thrift.TException {
        findUserByUserIdList_result result = new findUserByUserIdList_result();
        try {
          result.success = iface.findUserByUserIdList(args.userIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserBySchoolIdAndRealNameLike<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserBySchoolIdAndRealNameLike_args> {
      public findUserBySchoolIdAndRealNameLike() {
        super("findUserBySchoolIdAndRealNameLike");
      }

      public findUserBySchoolIdAndRealNameLike_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndRealNameLike_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserBySchoolIdAndRealNameLike_result getResult(I iface, findUserBySchoolIdAndRealNameLike_args args) throws org.apache.thrift.TException {
        findUserBySchoolIdAndRealNameLike_result result = new findUserBySchoolIdAndRealNameLike_result();
        try {
          result.success = iface.findUserBySchoolIdAndRealNameLike(args.schoolId, args.realName);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPageUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPageUser_args> {
      public findPageUser() {
        super("findPageUser");
      }

      public findPageUser_args getEmptyArgsInstance() {
        return new findPageUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findPageUser_result getResult(I iface, findPageUser_args args) throws org.apache.thrift.TException {
        findPageUser_result result = new findPageUser_result();
        try {
          result.success = iface.findPageUser(args.pageNum, args.pageSize, args.schoolId, args.officeId, args.groupType, args.username, args.realName);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPageUserWithJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPageUserWithJsonParams_args> {
      public findPageUserWithJsonParams() {
        super("findPageUserWithJsonParams");
      }

      public findPageUserWithJsonParams_args getEmptyArgsInstance() {
        return new findPageUserWithJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findPageUserWithJsonParams_result getResult(I iface, findPageUserWithJsonParams_args args) throws org.apache.thrift.TException {
        findPageUserWithJsonParams_result result = new findPageUserWithJsonParams_result();
        try {
          result.success = iface.findPageUserWithJsonParams(args.pageNum, args.pageSize, args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserIdListWithJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserIdListWithJsonParams_args> {
      public findUserIdListWithJsonParams() {
        super("findUserIdListWithJsonParams");
      }

      public findUserIdListWithJsonParams_args getEmptyArgsInstance() {
        return new findUserIdListWithJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserIdListWithJsonParams_result getResult(I iface, findUserIdListWithJsonParams_args args) throws org.apache.thrift.TException {
        findUserIdListWithJsonParams_result result = new findUserIdListWithJsonParams_result();
        try {
          result.success = iface.findUserIdListWithJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateUserByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserByUserId_args> {
      public updateUserByUserId() {
        super("updateUserByUserId");
      }

      public updateUserByUserId_args getEmptyArgsInstance() {
        return new updateUserByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateUserByUserId_result getResult(I iface, updateUserByUserId_args args) throws org.apache.thrift.TException {
        updateUserByUserId_result result = new updateUserByUserId_result();
        try {
          iface.updateUserByUserId(args.userId, args.wxOpenId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserByOpenId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserByOpenId_args> {
      public findUserByOpenId() {
        super("findUserByOpenId");
      }

      public findUserByOpenId_args getEmptyArgsInstance() {
        return new findUserByOpenId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserByOpenId_result getResult(I iface, findUserByOpenId_args args) throws org.apache.thrift.TException {
        findUserByOpenId_result result = new findUserByOpenId_result();
        try {
          result.success = iface.findUserByOpenId(args.openId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserIdBySchoolIdAndOtherParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserIdBySchoolIdAndOtherParams_args> {
      public findUserIdBySchoolIdAndOtherParams() {
        super("findUserIdBySchoolIdAndOtherParams");
      }

      public findUserIdBySchoolIdAndOtherParams_args getEmptyArgsInstance() {
        return new findUserIdBySchoolIdAndOtherParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserIdBySchoolIdAndOtherParams_result getResult(I iface, findUserIdBySchoolIdAndOtherParams_args args) throws org.apache.thrift.TException {
        findUserIdBySchoolIdAndOtherParams_result result = new findUserIdBySchoolIdAndOtherParams_result();
        try {
          result.success = iface.findUserIdBySchoolIdAndOtherParams(args.schoolId, args.officeId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findNjssoStudentByIdIn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNjssoStudentByIdIn_args> {
      public findNjssoStudentByIdIn() {
        super("findNjssoStudentByIdIn");
      }

      public findNjssoStudentByIdIn_args getEmptyArgsInstance() {
        return new findNjssoStudentByIdIn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findNjssoStudentByIdIn_result getResult(I iface, findNjssoStudentByIdIn_args args) throws org.apache.thrift.TException {
        findNjssoStudentByIdIn_result result = new findNjssoStudentByIdIn_result();
        try {
          result.success = iface.findNjssoStudentByIdIn(args.userIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findStudentBySchoolIdIdIn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStudentBySchoolIdIdIn_args> {
      public findStudentBySchoolIdIdIn() {
        super("findStudentBySchoolIdIdIn");
      }

      public findStudentBySchoolIdIdIn_args getEmptyArgsInstance() {
        return new findStudentBySchoolIdIdIn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findStudentBySchoolIdIdIn_result getResult(I iface, findStudentBySchoolIdIdIn_args args) throws org.apache.thrift.TException {
        findStudentBySchoolIdIdIn_result result = new findStudentBySchoolIdIdIn_result();
        try {
          result.success = iface.findStudentBySchoolIdIdIn(args.schoolId, args.userIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args> {
      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo() {
        super("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo");
      }

      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args getEmptyArgsInstance() {
        return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result getResult(I iface, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args args) throws org.apache.thrift.TException {
        findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result result = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result();
        try {
          result.success = iface.findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(args.schoolId, args.papersType, args.papersNo);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updatePassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePassword_args> {
      public updatePassword() {
        super("updatePassword");
      }

      public updatePassword_args getEmptyArgsInstance() {
        return new updatePassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updatePassword_result getResult(I iface, updatePassword_args args) throws org.apache.thrift.TException {
        updatePassword_result result = new updatePassword_result();
        try {
          iface.updatePassword(args.password, args.newPassword, args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findStudentUserByOfficeIdAndSchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStudentUserByOfficeIdAndSchoolId_args> {
      public findStudentUserByOfficeIdAndSchoolId() {
        super("findStudentUserByOfficeIdAndSchoolId");
      }

      public findStudentUserByOfficeIdAndSchoolId_args getEmptyArgsInstance() {
        return new findStudentUserByOfficeIdAndSchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findStudentUserByOfficeIdAndSchoolId_result getResult(I iface, findStudentUserByOfficeIdAndSchoolId_args args) throws org.apache.thrift.TException {
        findStudentUserByOfficeIdAndSchoolId_result result = new findStudentUserByOfficeIdAndSchoolId_result();
        try {
          result.success = iface.findStudentUserByOfficeIdAndSchoolId(args.officeId, args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserInfo_args> {
      public updateUserInfo() {
        super("updateUserInfo");
      }

      public updateUserInfo_args getEmptyArgsInstance() {
        return new updateUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateUserInfo_result getResult(I iface, updateUserInfo_args args) throws org.apache.thrift.TException {
        updateUserInfo_result result = new updateUserInfo_result();
        try {
          iface.updateUserInfo(args.paramsStr, args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateUserInfoByUserIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserInfoByUserIdAndJsonParams_args> {
      public updateUserInfoByUserIdAndJsonParams() {
        super("updateUserInfoByUserIdAndJsonParams");
      }

      public updateUserInfoByUserIdAndJsonParams_args getEmptyArgsInstance() {
        return new updateUserInfoByUserIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateUserInfoByUserIdAndJsonParams_result getResult(I iface, updateUserInfoByUserIdAndJsonParams_args args) throws org.apache.thrift.TException {
        updateUserInfoByUserIdAndJsonParams_result result = new updateUserInfoByUserIdAndJsonParams_result();
        try {
          iface.updateUserInfoByUserIdAndJsonParams(args.userId, args.paramsStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class loginByUsernameAndPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginByUsernameAndPassword_args> {
      public loginByUsernameAndPassword() {
        super("loginByUsernameAndPassword");
      }

      public loginByUsernameAndPassword_args getEmptyArgsInstance() {
        return new loginByUsernameAndPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public loginByUsernameAndPassword_result getResult(I iface, loginByUsernameAndPassword_args args) throws org.apache.thrift.TException {
        loginByUsernameAndPassword_result result = new loginByUsernameAndPassword_result();
        try {
          result.success = iface.loginByUsernameAndPassword(args.username, args.password);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findParentBySchoolIdAndUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findParentBySchoolIdAndUserId_args> {
      public findParentBySchoolIdAndUserId() {
        super("findParentBySchoolIdAndUserId");
      }

      public findParentBySchoolIdAndUserId_args getEmptyArgsInstance() {
        return new findParentBySchoolIdAndUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findParentBySchoolIdAndUserId_result getResult(I iface, findParentBySchoolIdAndUserId_args args) throws org.apache.thrift.TException {
        findParentBySchoolIdAndUserId_result result = new findParentBySchoolIdAndUserId_result();
        try {
          result.success = iface.findParentBySchoolIdAndUserId(args.schoolId, args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserBySchoolIdAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserBySchoolIdAndOtherJsonParams_args> {
      public findUserBySchoolIdAndOtherJsonParams() {
        super("findUserBySchoolIdAndOtherJsonParams");
      }

      public findUserBySchoolIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserBySchoolIdAndOtherJsonParams_result getResult(I iface, findUserBySchoolIdAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findUserBySchoolIdAndOtherJsonParams_result result = new findUserBySchoolIdAndOtherJsonParams_result();
        try {
          result.success = iface.findUserBySchoolIdAndOtherJsonParams(args.schoolId, args.paramsStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserBySchoolIdAndStaffNoInOrStudentNoIn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args> {
      public findUserBySchoolIdAndStaffNoInOrStudentNoIn() {
        super("findUserBySchoolIdAndStaffNoInOrStudentNoIn");
      }

      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_result getResult(I iface, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args args) throws org.apache.thrift.TException {
        findUserBySchoolIdAndStaffNoInOrStudentNoIn_result result = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_result();
        try {
          result.success = iface.findUserBySchoolIdAndStaffNoInOrStudentNoIn(args.schoolId, args.outIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserBySchoolIdAndOutIdIn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserBySchoolIdAndOutIdIn_args> {
      public findUserBySchoolIdAndOutIdIn() {
        super("findUserBySchoolIdAndOutIdIn");
      }

      public findUserBySchoolIdAndOutIdIn_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndOutIdIn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserBySchoolIdAndOutIdIn_result getResult(I iface, findUserBySchoolIdAndOutIdIn_args args) throws org.apache.thrift.TException {
        findUserBySchoolIdAndOutIdIn_result result = new findUserBySchoolIdAndOutIdIn_result();
        try {
          result.success = iface.findUserBySchoolIdAndOutIdIn(args.schoolId, args.outIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUnsyncUserBySchoolIdAndOtherParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUnsyncUserBySchoolIdAndOtherParams_args> {
      public findUnsyncUserBySchoolIdAndOtherParams() {
        super("findUnsyncUserBySchoolIdAndOtherParams");
      }

      public findUnsyncUserBySchoolIdAndOtherParams_args getEmptyArgsInstance() {
        return new findUnsyncUserBySchoolIdAndOtherParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUnsyncUserBySchoolIdAndOtherParams_result getResult(I iface, findUnsyncUserBySchoolIdAndOtherParams_args args) throws org.apache.thrift.TException {
        findUnsyncUserBySchoolIdAndOtherParams_result result = new findUnsyncUserBySchoolIdAndOtherParams_result();
        try {
          result.success = iface.findUnsyncUserBySchoolIdAndOtherParams(args.schoolId, args.preSyncTime, args.syncEndTime, args.userIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserWithOutIdByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserWithOutIdByUserId_args> {
      public findUserWithOutIdByUserId() {
        super("findUserWithOutIdByUserId");
      }

      public findUserWithOutIdByUserId_args getEmptyArgsInstance() {
        return new findUserWithOutIdByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserWithOutIdByUserId_result getResult(I iface, findUserWithOutIdByUserId_args args) throws org.apache.thrift.TException {
        findUserWithOutIdByUserId_result result = new findUserWithOutIdByUserId_result();
        try {
          result.success = iface.findUserWithOutIdByUserId(args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args> {
      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams() {
        super("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams");
      }

      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result getResult(I iface, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
        try {
          result.success = iface.findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(args.schoolId, args.preSyncTime, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findStudentBusiInfoBySchoolIdAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args> {
      public findStudentBusiInfoBySchoolIdAndOtherJsonParams() {
        super("findStudentBusiInfoBySchoolIdAndOtherJsonParams");
      }

      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_result getResult(I iface, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findStudentBusiInfoBySchoolIdAndOtherJsonParams_result result = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_result();
        try {
          result.success = iface.findStudentBusiInfoBySchoolIdAndOtherJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args> {
      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams() {
        super("findTeacherBusiInfoBySchoolIdAndOtherJsonParams");
      }

      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result getResult(I iface, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result result = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result();
        try {
          result.success = iface.findTeacherBusiInfoBySchoolIdAndOtherJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findChildBySchoolIdAndUserIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findChildBySchoolIdAndUserIds_args> {
      public findChildBySchoolIdAndUserIds() {
        super("findChildBySchoolIdAndUserIds");
      }

      public findChildBySchoolIdAndUserIds_args getEmptyArgsInstance() {
        return new findChildBySchoolIdAndUserIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findChildBySchoolIdAndUserIds_result getResult(I iface, findChildBySchoolIdAndUserIds_args args) throws org.apache.thrift.TException {
        findChildBySchoolIdAndUserIds_result result = new findChildBySchoolIdAndUserIds_result();
        try {
          result.success = iface.findChildBySchoolIdAndUserIds(args.schoolId, args.ids);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUnclassifiedUserBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUnclassifiedUserBySchoolId_args> {
      public findUnclassifiedUserBySchoolId() {
        super("findUnclassifiedUserBySchoolId");
      }

      public findUnclassifiedUserBySchoolId_args getEmptyArgsInstance() {
        return new findUnclassifiedUserBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUnclassifiedUserBySchoolId_result getResult(I iface, findUnclassifiedUserBySchoolId_args args) throws org.apache.thrift.TException {
        findUnclassifiedUserBySchoolId_result result = new findUnclassifiedUserBySchoolId_result();
        try {
          result.success = iface.findUnclassifiedUserBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findParentBySchoolIdAndChildIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findParentBySchoolIdAndChildIds_args> {
      public findParentBySchoolIdAndChildIds() {
        super("findParentBySchoolIdAndChildIds");
      }

      public findParentBySchoolIdAndChildIds_args getEmptyArgsInstance() {
        return new findParentBySchoolIdAndChildIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findParentBySchoolIdAndChildIds_result getResult(I iface, findParentBySchoolIdAndChildIds_args args) throws org.apache.thrift.TException {
        findParentBySchoolIdAndChildIds_result result = new findParentBySchoolIdAndChildIds_result();
        try {
          result.success = iface.findParentBySchoolIdAndChildIds(args.schoolId, args.ids);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findClassStudentUserIdsBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findClassStudentUserIdsBySchoolId_args> {
      public findClassStudentUserIdsBySchoolId() {
        super("findClassStudentUserIdsBySchoolId");
      }

      public findClassStudentUserIdsBySchoolId_args getEmptyArgsInstance() {
        return new findClassStudentUserIdsBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findClassStudentUserIdsBySchoolId_result getResult(I iface, findClassStudentUserIdsBySchoolId_args args) throws org.apache.thrift.TException {
        findClassStudentUserIdsBySchoolId_result result = new findClassStudentUserIdsBySchoolId_result();
        try {
          result.success = iface.findClassStudentUserIdsBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args> {
      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams() {
        super("findClassUserDetailBySchoolIdAndClassIdAndOtherParams");
      }

      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args getEmptyArgsInstance() {
        return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result getResult(I iface, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args args) throws org.apache.thrift.TException {
        findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result();
        try {
          result.success = iface.findClassUserDetailBySchoolIdAndClassIdAndOtherParams(args.schoolId, args.classId, args.type, args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class saveOrUpdateClassUserDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOrUpdateClassUserDetail_args> {
      public saveOrUpdateClassUserDetail() {
        super("saveOrUpdateClassUserDetail");
      }

      public saveOrUpdateClassUserDetail_args getEmptyArgsInstance() {
        return new saveOrUpdateClassUserDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public saveOrUpdateClassUserDetail_result getResult(I iface, saveOrUpdateClassUserDetail_args args) throws org.apache.thrift.TException {
        saveOrUpdateClassUserDetail_result result = new saveOrUpdateClassUserDetail_result();
        try {
          iface.saveOrUpdateClassUserDetail(args.paramsStr, args.operateUserId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class deleteClassUserDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteClassUserDetail_args> {
      public deleteClassUserDetail() {
        super("deleteClassUserDetail");
      }

      public deleteClassUserDetail_args getEmptyArgsInstance() {
        return new deleteClassUserDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteClassUserDetail_result getResult(I iface, deleteClassUserDetail_args args) throws org.apache.thrift.TException {
        deleteClassUserDetail_result result = new deleteClassUserDetail_result();
        try {
          iface.deleteClassUserDetail(args.schoolId, args.id, args.operateUserId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args> {
      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams() {
        super("findClassUserDetailBySchoolIdAndUserIdAndOtherParams");
      }

      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args getEmptyArgsInstance() {
        return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result getResult(I iface, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args args) throws org.apache.thrift.TException {
        findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result();
        try {
          result.success = iface.findClassUserDetailBySchoolIdAndUserIdAndOtherParams(args.schoolId, args.userId, args.type);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSchoolBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSchoolBySchoolId_args> {
      public findSchoolBySchoolId() {
        super("findSchoolBySchoolId");
      }

      public findSchoolBySchoolId_args getEmptyArgsInstance() {
        return new findSchoolBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSchoolBySchoolId_result getResult(I iface, findSchoolBySchoolId_args args) throws org.apache.thrift.TException {
        findSchoolBySchoolId_result result = new findSchoolBySchoolId_result();
        try {
          result.success = iface.findSchoolBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAllSchool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllSchool_args> {
      public findAllSchool() {
        super("findAllSchool");
      }

      public findAllSchool_args getEmptyArgsInstance() {
        return new findAllSchool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findAllSchool_result getResult(I iface, findAllSchool_args args) throws org.apache.thrift.TException {
        findAllSchool_result result = new findAllSchool_result();
        try {
          result.success = iface.findAllSchool();
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findOfficeByUserIdAndSchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOfficeByUserIdAndSchoolId_args> {
      public findOfficeByUserIdAndSchoolId() {
        super("findOfficeByUserIdAndSchoolId");
      }

      public findOfficeByUserIdAndSchoolId_args getEmptyArgsInstance() {
        return new findOfficeByUserIdAndSchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findOfficeByUserIdAndSchoolId_result getResult(I iface, findOfficeByUserIdAndSchoolId_args args) throws org.apache.thrift.TException {
        findOfficeByUserIdAndSchoolId_result result = new findOfficeByUserIdAndSchoolId_result();
        try {
          result.success = iface.findOfficeByUserIdAndSchoolId(args.userId, args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findOfficeBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOfficeBySchoolId_args> {
      public findOfficeBySchoolId() {
        super("findOfficeBySchoolId");
      }

      public findOfficeBySchoolId_args getEmptyArgsInstance() {
        return new findOfficeBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findOfficeBySchoolId_result getResult(I iface, findOfficeBySchoolId_args args) throws org.apache.thrift.TException {
        findOfficeBySchoolId_result result = new findOfficeBySchoolId_result();
        try {
          result.success = iface.findOfficeBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findTreeOfficeBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTreeOfficeBySchoolId_args> {
      public findTreeOfficeBySchoolId() {
        super("findTreeOfficeBySchoolId");
      }

      public findTreeOfficeBySchoolId_args getEmptyArgsInstance() {
        return new findTreeOfficeBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findTreeOfficeBySchoolId_result getResult(I iface, findTreeOfficeBySchoolId_args args) throws org.apache.thrift.TException {
        findTreeOfficeBySchoolId_result result = new findTreeOfficeBySchoolId_result();
        try {
          result.success = iface.findTreeOfficeBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findTreeOfficeBySchoolIdAndOfficeType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTreeOfficeBySchoolIdAndOfficeType_args> {
      public findTreeOfficeBySchoolIdAndOfficeType() {
        super("findTreeOfficeBySchoolIdAndOfficeType");
      }

      public findTreeOfficeBySchoolIdAndOfficeType_args getEmptyArgsInstance() {
        return new findTreeOfficeBySchoolIdAndOfficeType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findTreeOfficeBySchoolIdAndOfficeType_result getResult(I iface, findTreeOfficeBySchoolIdAndOfficeType_args args) throws org.apache.thrift.TException {
        findTreeOfficeBySchoolIdAndOfficeType_result result = new findTreeOfficeBySchoolIdAndOfficeType_result();
        try {
          result.success = iface.findTreeOfficeBySchoolIdAndOfficeType(args.schoolId, args.officeType);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findOfficeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOfficeById_args> {
      public findOfficeById() {
        super("findOfficeById");
      }

      public findOfficeById_args getEmptyArgsInstance() {
        return new findOfficeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findOfficeById_result getResult(I iface, findOfficeById_args args) throws org.apache.thrift.TException {
        findOfficeById_result result = new findOfficeById_result();
        try {
          result.success = iface.findOfficeById(args.officeId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findOfficeBySchoolIdAndOfficeType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOfficeBySchoolIdAndOfficeType_args> {
      public findOfficeBySchoolIdAndOfficeType() {
        super("findOfficeBySchoolIdAndOfficeType");
      }

      public findOfficeBySchoolIdAndOfficeType_args getEmptyArgsInstance() {
        return new findOfficeBySchoolIdAndOfficeType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findOfficeBySchoolIdAndOfficeType_result getResult(I iface, findOfficeBySchoolIdAndOfficeType_args args) throws org.apache.thrift.TException {
        findOfficeBySchoolIdAndOfficeType_result result = new findOfficeBySchoolIdAndOfficeType_result();
        try {
          result.success = iface.findOfficeBySchoolIdAndOfficeType(args.schoolId, args.officeType);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAccessableOfficeByUserIdAndSchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAccessableOfficeByUserIdAndSchoolId_args> {
      public findAccessableOfficeByUserIdAndSchoolId() {
        super("findAccessableOfficeByUserIdAndSchoolId");
      }

      public findAccessableOfficeByUserIdAndSchoolId_args getEmptyArgsInstance() {
        return new findAccessableOfficeByUserIdAndSchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findAccessableOfficeByUserIdAndSchoolId_result getResult(I iface, findAccessableOfficeByUserIdAndSchoolId_args args) throws org.apache.thrift.TException {
        findAccessableOfficeByUserIdAndSchoolId_result result = new findAccessableOfficeByUserIdAndSchoolId_result();
        try {
          result.success = iface.findAccessableOfficeByUserIdAndSchoolId(args.userId, args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args> {
      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams() {
        super("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams");
      }

      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result getResult(I iface, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result result = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result();
        try {
          result.success = iface.findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(args.userId, args.schoolId, args.roleId, args.paramsStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args> {
      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams() {
        super("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams");
      }

      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result getResult(I iface, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
        try {
          result.success = iface.findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(args.schoolId, args.userIdList, args.paramsStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserOfficeBySchoolIdAndUserIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserOfficeBySchoolIdAndUserIdList_args> {
      public findUserOfficeBySchoolIdAndUserIdList() {
        super("findUserOfficeBySchoolIdAndUserIdList");
      }

      public findUserOfficeBySchoolIdAndUserIdList_args getEmptyArgsInstance() {
        return new findUserOfficeBySchoolIdAndUserIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserOfficeBySchoolIdAndUserIdList_result getResult(I iface, findUserOfficeBySchoolIdAndUserIdList_args args) throws org.apache.thrift.TException {
        findUserOfficeBySchoolIdAndUserIdList_result result = new findUserOfficeBySchoolIdAndUserIdList_result();
        try {
          result.success = iface.findUserOfficeBySchoolIdAndUserIdList(args.schoolId, args.userIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args> {
      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams() {
        super("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams");
      }

      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result getResult(I iface, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
        try {
          result.success = iface.findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(args.schoolId, args.userIdList, args.paramsStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findMenuPermByUserIdAndSchoolCodeAndAppCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMenuPermByUserIdAndSchoolCodeAndAppCode_args> {
      public findMenuPermByUserIdAndSchoolCodeAndAppCode() {
        super("findMenuPermByUserIdAndSchoolCodeAndAppCode");
      }

      public findMenuPermByUserIdAndSchoolCodeAndAppCode_args getEmptyArgsInstance() {
        return new findMenuPermByUserIdAndSchoolCodeAndAppCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findMenuPermByUserIdAndSchoolCodeAndAppCode_result getResult(I iface, findMenuPermByUserIdAndSchoolCodeAndAppCode_args args) throws org.apache.thrift.TException {
        findMenuPermByUserIdAndSchoolCodeAndAppCode_result result = new findMenuPermByUserIdAndSchoolCodeAndAppCode_result();
        try {
          result.success = iface.findMenuPermByUserIdAndSchoolCodeAndAppCode(args.userId, args.schoolCode, args.appCode);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findMenuPermByUserIdAndSchoolIdAndAppCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMenuPermByUserIdAndSchoolIdAndAppCode_args> {
      public findMenuPermByUserIdAndSchoolIdAndAppCode() {
        super("findMenuPermByUserIdAndSchoolIdAndAppCode");
      }

      public findMenuPermByUserIdAndSchoolIdAndAppCode_args getEmptyArgsInstance() {
        return new findMenuPermByUserIdAndSchoolIdAndAppCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findMenuPermByUserIdAndSchoolIdAndAppCode_result getResult(I iface, findMenuPermByUserIdAndSchoolIdAndAppCode_args args) throws org.apache.thrift.TException {
        findMenuPermByUserIdAndSchoolIdAndAppCode_result result = new findMenuPermByUserIdAndSchoolIdAndAppCode_result();
        try {
          result.success = iface.findMenuPermByUserIdAndSchoolIdAndAppCode(args.userId, args.schoolId, args.appCode);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args> {
      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam() {
        super("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam");
      }

      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args getEmptyArgsInstance() {
        return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result getResult(I iface, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args args) throws org.apache.thrift.TException {
        findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result result = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result();
        try {
          result.success = iface.findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(args.schoolId, args.roleId, args.jsonStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findRoleByUserIdAndSchoolCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRoleByUserIdAndSchoolCode_args> {
      public findRoleByUserIdAndSchoolCode() {
        super("findRoleByUserIdAndSchoolCode");
      }

      public findRoleByUserIdAndSchoolCode_args getEmptyArgsInstance() {
        return new findRoleByUserIdAndSchoolCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findRoleByUserIdAndSchoolCode_result getResult(I iface, findRoleByUserIdAndSchoolCode_args args) throws org.apache.thrift.TException {
        findRoleByUserIdAndSchoolCode_result result = new findRoleByUserIdAndSchoolCode_result();
        try {
          result.success = iface.findRoleByUserIdAndSchoolCode(args.userId, args.schoolCode);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findRoleBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRoleBySchoolId_args> {
      public findRoleBySchoolId() {
        super("findRoleBySchoolId");
      }

      public findRoleBySchoolId_args getEmptyArgsInstance() {
        return new findRoleBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findRoleBySchoolId_result getResult(I iface, findRoleBySchoolId_args args) throws org.apache.thrift.TException {
        findRoleBySchoolId_result result = new findRoleBySchoolId_result();
        try {
          result.success = iface.findRoleBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findRoleByRoleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRoleByRoleId_args> {
      public findRoleByRoleId() {
        super("findRoleByRoleId");
      }

      public findRoleByRoleId_args getEmptyArgsInstance() {
        return new findRoleByRoleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findRoleByRoleId_result getResult(I iface, findRoleByRoleId_args args) throws org.apache.thrift.TException {
        findRoleByRoleId_result result = new findRoleByRoleId_result();
        try {
          result.success = iface.findRoleByRoleId(args.roleId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findRoleByUserIdAndSchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRoleByUserIdAndSchoolId_args> {
      public findRoleByUserIdAndSchoolId() {
        super("findRoleByUserIdAndSchoolId");
      }

      public findRoleByUserIdAndSchoolId_args getEmptyArgsInstance() {
        return new findRoleByUserIdAndSchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findRoleByUserIdAndSchoolId_result getResult(I iface, findRoleByUserIdAndSchoolId_args args) throws org.apache.thrift.TException {
        findRoleByUserIdAndSchoolId_result result = new findRoleByUserIdAndSchoolId_result();
        try {
          result.success = iface.findRoleByUserIdAndSchoolId(args.userId, args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSchoolRoleListByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSchoolRoleListByUserId_args> {
      public findSchoolRoleListByUserId() {
        super("findSchoolRoleListByUserId");
      }

      public findSchoolRoleListByUserId_args getEmptyArgsInstance() {
        return new findSchoolRoleListByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSchoolRoleListByUserId_result getResult(I iface, findSchoolRoleListByUserId_args args) throws org.apache.thrift.TException {
        findSchoolRoleListByUserId_result result = new findSchoolRoleListByUserId_result();
        try {
          result.success = iface.findSchoolRoleListByUserId(args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findOpenRoleBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOpenRoleBySchoolId_args> {
      public findOpenRoleBySchoolId() {
        super("findOpenRoleBySchoolId");
      }

      public findOpenRoleBySchoolId_args getEmptyArgsInstance() {
        return new findOpenRoleBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findOpenRoleBySchoolId_result getResult(I iface, findOpenRoleBySchoolId_args args) throws org.apache.thrift.TException {
        findOpenRoleBySchoolId_result result = new findOpenRoleBySchoolId_result();
        try {
          result.success = iface.findOpenRoleBySchoolId(args.schoolId, args.groupType);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class registerRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerRole_args> {
      public registerRole() {
        super("registerRole");
      }

      public registerRole_args getEmptyArgsInstance() {
        return new registerRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public registerRole_result getResult(I iface, registerRole_args args) throws org.apache.thrift.TException {
        registerRole_result result = new registerRole_result();
        try {
          iface.registerRole(args.paramsStr, args.userId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findRolesByUserIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRolesByUserIdList_args> {
      public findRolesByUserIdList() {
        super("findRolesByUserIdList");
      }

      public findRolesByUserIdList_args getEmptyArgsInstance() {
        return new findRolesByUserIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findRolesByUserIdList_result getResult(I iface, findRolesByUserIdList_args args) throws org.apache.thrift.TException {
        findRolesByUserIdList_result result = new findRolesByUserIdList_result();
        try {
          result.success = iface.findRolesByUserIdList(args.schoolId, args.userIdList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSchoolAppDetailBySchoolCodeAndAppCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSchoolAppDetailBySchoolCodeAndAppCode_args> {
      public findSchoolAppDetailBySchoolCodeAndAppCode() {
        super("findSchoolAppDetailBySchoolCodeAndAppCode");
      }

      public findSchoolAppDetailBySchoolCodeAndAppCode_args getEmptyArgsInstance() {
        return new findSchoolAppDetailBySchoolCodeAndAppCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSchoolAppDetailBySchoolCodeAndAppCode_result getResult(I iface, findSchoolAppDetailBySchoolCodeAndAppCode_args args) throws org.apache.thrift.TException {
        findSchoolAppDetailBySchoolCodeAndAppCode_result result = new findSchoolAppDetailBySchoolCodeAndAppCode_result();
        try {
          result.success = iface.findSchoolAppDetailBySchoolCodeAndAppCode(args.schoolCode, args.appCode);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSchoolByUserIdAndAppCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSchoolByUserIdAndAppCode_args> {
      public findSchoolByUserIdAndAppCode() {
        super("findSchoolByUserIdAndAppCode");
      }

      public findSchoolByUserIdAndAppCode_args getEmptyArgsInstance() {
        return new findSchoolByUserIdAndAppCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSchoolByUserIdAndAppCode_result getResult(I iface, findSchoolByUserIdAndAppCode_args args) throws org.apache.thrift.TException {
        findSchoolByUserIdAndAppCode_result result = new findSchoolByUserIdAndAppCode_result();
        try {
          result.success = iface.findSchoolByUserIdAndAppCode(args.userId, args.appCode);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSysRoleRegisterRequirementByRoleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSysRoleRegisterRequirementByRoleId_args> {
      public findSysRoleRegisterRequirementByRoleId() {
        super("findSysRoleRegisterRequirementByRoleId");
      }

      public findSysRoleRegisterRequirementByRoleId_args getEmptyArgsInstance() {
        return new findSysRoleRegisterRequirementByRoleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSysRoleRegisterRequirementByRoleId_result getResult(I iface, findSysRoleRegisterRequirementByRoleId_args args) throws org.apache.thrift.TException {
        findSysRoleRegisterRequirementByRoleId_result result = new findSysRoleRegisterRequirementByRoleId_result();
        try {
          result.success = iface.findSysRoleRegisterRequirementByRoleId(args.roleId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findNormalUserChildByParentIdAndSchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNormalUserChildByParentIdAndSchoolId_args> {
      public findNormalUserChildByParentIdAndSchoolId() {
        super("findNormalUserChildByParentIdAndSchoolId");
      }

      public findNormalUserChildByParentIdAndSchoolId_args getEmptyArgsInstance() {
        return new findNormalUserChildByParentIdAndSchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findNormalUserChildByParentIdAndSchoolId_result getResult(I iface, findNormalUserChildByParentIdAndSchoolId_args args) throws org.apache.thrift.TException {
        findNormalUserChildByParentIdAndSchoolId_result result = new findNormalUserChildByParentIdAndSchoolId_result();
        try {
          result.success = iface.findNormalUserChildByParentIdAndSchoolId(args.userId, args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findNormalUserParentByChildIdAndSchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNormalUserParentByChildIdAndSchoolId_args> {
      public findNormalUserParentByChildIdAndSchoolId() {
        super("findNormalUserParentByChildIdAndSchoolId");
      }

      public findNormalUserParentByChildIdAndSchoolId_args getEmptyArgsInstance() {
        return new findNormalUserParentByChildIdAndSchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findNormalUserParentByChildIdAndSchoolId_result getResult(I iface, findNormalUserParentByChildIdAndSchoolId_args args) throws org.apache.thrift.TException {
        findNormalUserParentByChildIdAndSchoolId_result result = new findNormalUserParentByChildIdAndSchoolId_result();
        try {
          result.success = iface.findNormalUserParentByChildIdAndSchoolId(args.userId, args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSchoolAppConfigBySchoolIdAndAppCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSchoolAppConfigBySchoolIdAndAppCode_args> {
      public findSchoolAppConfigBySchoolIdAndAppCode() {
        super("findSchoolAppConfigBySchoolIdAndAppCode");
      }

      public findSchoolAppConfigBySchoolIdAndAppCode_args getEmptyArgsInstance() {
        return new findSchoolAppConfigBySchoolIdAndAppCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSchoolAppConfigBySchoolIdAndAppCode_result getResult(I iface, findSchoolAppConfigBySchoolIdAndAppCode_args args) throws org.apache.thrift.TException {
        findSchoolAppConfigBySchoolIdAndAppCode_result result = new findSchoolAppConfigBySchoolIdAndAppCode_result();
        try {
          result.success = iface.findSchoolAppConfigBySchoolIdAndAppCode(args.schoolId, args.appCode);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findStudentOrTeacherUserBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStudentOrTeacherUserBySchoolIdAndJsonParams_args> {
      public findStudentOrTeacherUserBySchoolIdAndJsonParams() {
        super("findStudentOrTeacherUserBySchoolIdAndJsonParams");
      }

      public findStudentOrTeacherUserBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findStudentOrTeacherUserBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findStudentOrTeacherUserBySchoolIdAndJsonParams_result getResult(I iface, findStudentOrTeacherUserBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findStudentOrTeacherUserBySchoolIdAndJsonParams_result result = new findStudentOrTeacherUserBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findStudentOrTeacherUserBySchoolIdAndJsonParams(args.schoolId, args.jsonStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAppByJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAppByJsonParams_args> {
      public findAppByJsonParams() {
        super("findAppByJsonParams");
      }

      public findAppByJsonParams_args getEmptyArgsInstance() {
        return new findAppByJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findAppByJsonParams_result getResult(I iface, findAppByJsonParams_args args) throws org.apache.thrift.TException {
        findAppByJsonParams_result result = new findAppByJsonParams_result();
        try {
          result.success = iface.findAppByJsonParams(args.jsonStr);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findOfficeBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOfficeBySchoolIdAndJsonParams_args> {
      public findOfficeBySchoolIdAndJsonParams() {
        super("findOfficeBySchoolIdAndJsonParams");
      }

      public findOfficeBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findOfficeBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findOfficeBySchoolIdAndJsonParams_result getResult(I iface, findOfficeBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findOfficeBySchoolIdAndJsonParams_result result = new findOfficeBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findOfficeBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findDictDataByDictTypeCodeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findDictDataByDictTypeCodeList_args> {
      public findDictDataByDictTypeCodeList() {
        super("findDictDataByDictTypeCodeList");
      }

      public findDictDataByDictTypeCodeList_args getEmptyArgsInstance() {
        return new findDictDataByDictTypeCodeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findDictDataByDictTypeCodeList_result getResult(I iface, findDictDataByDictTypeCodeList_args args) throws org.apache.thrift.TException {
        findDictDataByDictTypeCodeList_result result = new findDictDataByDictTypeCodeList_result();
        try {
          result.success = iface.findDictDataByDictTypeCodeList(args.dictTypeCodeList);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSubjectBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSubjectBySchoolIdAndJsonParams_args> {
      public findSubjectBySchoolIdAndJsonParams() {
        super("findSubjectBySchoolIdAndJsonParams");
      }

      public findSubjectBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findSubjectBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSubjectBySchoolIdAndJsonParams_result getResult(I iface, findSubjectBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findSubjectBySchoolIdAndJsonParams_result result = new findSubjectBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findSubjectBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findLessonBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLessonBySchoolIdAndJsonParams_args> {
      public findLessonBySchoolIdAndJsonParams() {
        super("findLessonBySchoolIdAndJsonParams");
      }

      public findLessonBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findLessonBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findLessonBySchoolIdAndJsonParams_result getResult(I iface, findLessonBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findLessonBySchoolIdAndJsonParams_result result = new findLessonBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findLessonBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPlaceBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPlaceBySchoolIdAndJsonParams_args> {
      public findPlaceBySchoolIdAndJsonParams() {
        super("findPlaceBySchoolIdAndJsonParams");
      }

      public findPlaceBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findPlaceBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findPlaceBySchoolIdAndJsonParams_result getResult(I iface, findPlaceBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findPlaceBySchoolIdAndJsonParams_result result = new findPlaceBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findPlaceBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findGradeBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGradeBySchoolId_args> {
      public findGradeBySchoolId() {
        super("findGradeBySchoolId");
      }

      public findGradeBySchoolId_args getEmptyArgsInstance() {
        return new findGradeBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findGradeBySchoolId_result getResult(I iface, findGradeBySchoolId_args args) throws org.apache.thrift.TException {
        findGradeBySchoolId_result result = new findGradeBySchoolId_result();
        try {
          result.success = iface.findGradeBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findClassBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findClassBySchoolIdAndJsonParams_args> {
      public findClassBySchoolIdAndJsonParams() {
        super("findClassBySchoolIdAndJsonParams");
      }

      public findClassBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findClassBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findClassBySchoolIdAndJsonParams_result getResult(I iface, findClassBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findClassBySchoolIdAndJsonParams_result result = new findClassBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findClassBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findStudentBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStudentBySchoolIdAndJsonParams_args> {
      public findStudentBySchoolIdAndJsonParams() {
        super("findStudentBySchoolIdAndJsonParams");
      }

      public findStudentBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findStudentBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findStudentBySchoolIdAndJsonParams_result getResult(I iface, findStudentBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findStudentBySchoolIdAndJsonParams_result result = new findStudentBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findStudentBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findJobTypeBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findJobTypeBySchoolIdAndJsonParams_args> {
      public findJobTypeBySchoolIdAndJsonParams() {
        super("findJobTypeBySchoolIdAndJsonParams");
      }

      public findJobTypeBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findJobTypeBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findJobTypeBySchoolIdAndJsonParams_result getResult(I iface, findJobTypeBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findJobTypeBySchoolIdAndJsonParams_result result = new findJobTypeBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findJobTypeBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findJobBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findJobBySchoolIdAndJsonParams_args> {
      public findJobBySchoolIdAndJsonParams() {
        super("findJobBySchoolIdAndJsonParams");
      }

      public findJobBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findJobBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findJobBySchoolIdAndJsonParams_result getResult(I iface, findJobBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findJobBySchoolIdAndJsonParams_result result = new findJobBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findJobBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserBySchoolIdAndJsonParams_args> {
      public findUserBySchoolIdAndJsonParams() {
        super("findUserBySchoolIdAndJsonParams");
      }

      public findUserBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserBySchoolIdAndJsonParams_result getResult(I iface, findUserBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findUserBySchoolIdAndJsonParams_result result = new findUserBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findUserBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findCalendarBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCalendarBySchoolIdAndJsonParams_args> {
      public findCalendarBySchoolIdAndJsonParams() {
        super("findCalendarBySchoolIdAndJsonParams");
      }

      public findCalendarBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findCalendarBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findCalendarBySchoolIdAndJsonParams_result getResult(I iface, findCalendarBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findCalendarBySchoolIdAndJsonParams_result result = new findCalendarBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findCalendarBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findStaffBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStaffBySchoolIdAndJsonParams_args> {
      public findStaffBySchoolIdAndJsonParams() {
        super("findStaffBySchoolIdAndJsonParams");
      }

      public findStaffBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findStaffBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findStaffBySchoolIdAndJsonParams_result getResult(I iface, findStaffBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findStaffBySchoolIdAndJsonParams_result result = new findStaffBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findStaffBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findHeadTeacherBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findHeadTeacherBySchoolIdAndJsonParams_args> {
      public findHeadTeacherBySchoolIdAndJsonParams() {
        super("findHeadTeacherBySchoolIdAndJsonParams");
      }

      public findHeadTeacherBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findHeadTeacherBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findHeadTeacherBySchoolIdAndJsonParams_result getResult(I iface, findHeadTeacherBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findHeadTeacherBySchoolIdAndJsonParams_result result = new findHeadTeacherBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findHeadTeacherBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findClassUserDetailBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findClassUserDetailBySchoolIdAndJsonParams_args> {
      public findClassUserDetailBySchoolIdAndJsonParams() {
        super("findClassUserDetailBySchoolIdAndJsonParams");
      }

      public findClassUserDetailBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findClassUserDetailBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findClassUserDetailBySchoolIdAndJsonParams_result getResult(I iface, findClassUserDetailBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findClassUserDetailBySchoolIdAndJsonParams_result result = new findClassUserDetailBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findClassUserDetailBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findBriefUserByV5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findBriefUserByV5_args> {
      public findBriefUserByV5() {
        super("findBriefUserByV5");
      }

      public findBriefUserByV5_args getEmptyArgsInstance() {
        return new findBriefUserByV5_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findBriefUserByV5_result getResult(I iface, findBriefUserByV5_args args) throws org.apache.thrift.TException {
        findBriefUserByV5_result result = new findBriefUserByV5_result();
        try {
          result.success = iface.findBriefUserByV5(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findNewPageUserBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNewPageUserBy_args> {
      public findNewPageUserBy() {
        super("findNewPageUserBy");
      }

      public findNewPageUserBy_args getEmptyArgsInstance() {
        return new findNewPageUserBy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findNewPageUserBy_result getResult(I iface, findNewPageUserBy_args args) throws org.apache.thrift.TException {
        findNewPageUserBy_result result = new findNewPageUserBy_result();
        try {
          result.success = iface.findNewPageUserBy(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args> {
      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams() {
        super("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams");
      }

      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args getEmptyArgsInstance() {
        return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result getResult(I iface, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args args) throws org.apache.thrift.TException {
        findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result result = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result();
        try {
          result.success = iface.findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(args.schoolId, args.officeIdList, args.classIdList, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args> {
      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams() {
        super("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams");
      }

      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args getEmptyArgsInstance() {
        return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result getResult(I iface, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result result = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result();
        try {
          result.success = iface.findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(args.schoolId, args.classId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args> {
      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams() {
        super("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams");
      }

      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result getResult(I iface, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args) throws org.apache.thrift.TException {
        findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
        try {
          result.success = iface.findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(args.schoolId, args.preSyncTime, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args> {
      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams() {
        super("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams");
      }

      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args getEmptyArgsInstance() {
        return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result getResult(I iface, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result result = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result();
        try {
          result.success = iface.findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(args.schoolId, args.officeId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAbnormalUserIdListBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAbnormalUserIdListBySchoolId_args> {
      public findAbnormalUserIdListBySchoolId() {
        super("findAbnormalUserIdListBySchoolId");
      }

      public findAbnormalUserIdListBySchoolId_args getEmptyArgsInstance() {
        return new findAbnormalUserIdListBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findAbnormalUserIdListBySchoolId_result getResult(I iface, findAbnormalUserIdListBySchoolId_args args) throws org.apache.thrift.TException {
        findAbnormalUserIdListBySchoolId_result result = new findAbnormalUserIdListBySchoolId_result();
        try {
          result.success = iface.findAbnormalUserIdListBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSemesterBySchoolId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSemesterBySchoolId_args> {
      public findSemesterBySchoolId() {
        super("findSemesterBySchoolId");
      }

      public findSemesterBySchoolId_args getEmptyArgsInstance() {
        return new findSemesterBySchoolId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSemesterBySchoolId_result getResult(I iface, findSemesterBySchoolId_args args) throws org.apache.thrift.TException {
        findSemesterBySchoolId_result result = new findSemesterBySchoolId_result();
        try {
          result.success = iface.findSemesterBySchoolId(args.schoolId);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findRoleBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRoleBySchoolIdAndJsonParams_args> {
      public findRoleBySchoolIdAndJsonParams() {
        super("findRoleBySchoolIdAndJsonParams");
      }

      public findRoleBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findRoleBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findRoleBySchoolIdAndJsonParams_result getResult(I iface, findRoleBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findRoleBySchoolIdAndJsonParams_result result = new findRoleBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findRoleBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findSysRoleBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSysRoleBySchoolIdAndJsonParams_args> {
      public findSysRoleBySchoolIdAndJsonParams() {
        super("findSysRoleBySchoolIdAndJsonParams");
      }

      public findSysRoleBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findSysRoleBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findSysRoleBySchoolIdAndJsonParams_result getResult(I iface, findSysRoleBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findSysRoleBySchoolIdAndJsonParams_result result = new findSysRoleBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findSysRoleBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findBusiClassBySchoolIdAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findBusiClassBySchoolIdAndJsonParams_args> {
      public findBusiClassBySchoolIdAndJsonParams() {
        super("findBusiClassBySchoolIdAndJsonParams");
      }

      public findBusiClassBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findBusiClassBySchoolIdAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findBusiClassBySchoolIdAndJsonParams_result getResult(I iface, findBusiClassBySchoolIdAndJsonParams_args args) throws org.apache.thrift.TException {
        findBusiClassBySchoolIdAndJsonParams_result result = new findBusiClassBySchoolIdAndJsonParams_result();
        try {
          result.success = iface.findBusiClassBySchoolIdAndJsonParams(args.schoolId, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args> {
      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams() {
        super("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams");
      }

      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args getEmptyArgsInstance() {
        return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result getResult(I iface, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args args) throws org.apache.thrift.TException {
        findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result result = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result();
        try {
          result.success = iface.findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(args.schoolId, args.userIdList, args.jsonParams);
        } catch (ThriftBusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findUserByUserId", new findUserByUserId());
      processMap.put("findUserBySchoolIdAndOtherParams", new findUserBySchoolIdAndOtherParams());
      processMap.put("findUserByUserIdList", new findUserByUserIdList());
      processMap.put("findUserBySchoolIdAndRealNameLike", new findUserBySchoolIdAndRealNameLike());
      processMap.put("findPageUser", new findPageUser());
      processMap.put("findPageUserWithJsonParams", new findPageUserWithJsonParams());
      processMap.put("findUserIdListWithJsonParams", new findUserIdListWithJsonParams());
      processMap.put("updateUserByUserId", new updateUserByUserId());
      processMap.put("findUserByOpenId", new findUserByOpenId());
      processMap.put("findUserIdBySchoolIdAndOtherParams", new findUserIdBySchoolIdAndOtherParams());
      processMap.put("findNjssoStudentByIdIn", new findNjssoStudentByIdIn());
      processMap.put("findStudentBySchoolIdIdIn", new findStudentBySchoolIdIdIn());
      processMap.put("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo", new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo());
      processMap.put("updatePassword", new updatePassword());
      processMap.put("findStudentUserByOfficeIdAndSchoolId", new findStudentUserByOfficeIdAndSchoolId());
      processMap.put("updateUserInfo", new updateUserInfo());
      processMap.put("updateUserInfoByUserIdAndJsonParams", new updateUserInfoByUserIdAndJsonParams());
      processMap.put("loginByUsernameAndPassword", new loginByUsernameAndPassword());
      processMap.put("findParentBySchoolIdAndUserId", new findParentBySchoolIdAndUserId());
      processMap.put("findUserBySchoolIdAndOtherJsonParams", new findUserBySchoolIdAndOtherJsonParams());
      processMap.put("findUserBySchoolIdAndStaffNoInOrStudentNoIn", new findUserBySchoolIdAndStaffNoInOrStudentNoIn());
      processMap.put("findUserBySchoolIdAndOutIdIn", new findUserBySchoolIdAndOutIdIn());
      processMap.put("findUnsyncUserBySchoolIdAndOtherParams", new findUnsyncUserBySchoolIdAndOtherParams());
      processMap.put("findUserWithOutIdByUserId", new findUserWithOutIdByUserId());
      processMap.put("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams());
      processMap.put("findStudentBusiInfoBySchoolIdAndOtherJsonParams", new findStudentBusiInfoBySchoolIdAndOtherJsonParams());
      processMap.put("findTeacherBusiInfoBySchoolIdAndOtherJsonParams", new findTeacherBusiInfoBySchoolIdAndOtherJsonParams());
      processMap.put("findChildBySchoolIdAndUserIds", new findChildBySchoolIdAndUserIds());
      processMap.put("findUnclassifiedUserBySchoolId", new findUnclassifiedUserBySchoolId());
      processMap.put("findParentBySchoolIdAndChildIds", new findParentBySchoolIdAndChildIds());
      processMap.put("findClassStudentUserIdsBySchoolId", new findClassStudentUserIdsBySchoolId());
      processMap.put("findClassUserDetailBySchoolIdAndClassIdAndOtherParams", new findClassUserDetailBySchoolIdAndClassIdAndOtherParams());
      processMap.put("saveOrUpdateClassUserDetail", new saveOrUpdateClassUserDetail());
      processMap.put("deleteClassUserDetail", new deleteClassUserDetail());
      processMap.put("findClassUserDetailBySchoolIdAndUserIdAndOtherParams", new findClassUserDetailBySchoolIdAndUserIdAndOtherParams());
      processMap.put("findSchoolBySchoolId", new findSchoolBySchoolId());
      processMap.put("findAllSchool", new findAllSchool());
      processMap.put("findOfficeByUserIdAndSchoolId", new findOfficeByUserIdAndSchoolId());
      processMap.put("findOfficeBySchoolId", new findOfficeBySchoolId());
      processMap.put("findTreeOfficeBySchoolId", new findTreeOfficeBySchoolId());
      processMap.put("findTreeOfficeBySchoolIdAndOfficeType", new findTreeOfficeBySchoolIdAndOfficeType());
      processMap.put("findOfficeById", new findOfficeById());
      processMap.put("findOfficeBySchoolIdAndOfficeType", new findOfficeBySchoolIdAndOfficeType());
      processMap.put("findAccessableOfficeByUserIdAndSchoolId", new findAccessableOfficeByUserIdAndSchoolId());
      processMap.put("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams", new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams());
      processMap.put("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams", new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams());
      processMap.put("findUserOfficeBySchoolIdAndUserIdList", new findUserOfficeBySchoolIdAndUserIdList());
      processMap.put("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams", new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams());
      processMap.put("findMenuPermByUserIdAndSchoolCodeAndAppCode", new findMenuPermByUserIdAndSchoolCodeAndAppCode());
      processMap.put("findMenuPermByUserIdAndSchoolIdAndAppCode", new findMenuPermByUserIdAndSchoolIdAndAppCode());
      processMap.put("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam", new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam());
      processMap.put("findRoleByUserIdAndSchoolCode", new findRoleByUserIdAndSchoolCode());
      processMap.put("findRoleBySchoolId", new findRoleBySchoolId());
      processMap.put("findRoleByRoleId", new findRoleByRoleId());
      processMap.put("findRoleByUserIdAndSchoolId", new findRoleByUserIdAndSchoolId());
      processMap.put("findSchoolRoleListByUserId", new findSchoolRoleListByUserId());
      processMap.put("findOpenRoleBySchoolId", new findOpenRoleBySchoolId());
      processMap.put("registerRole", new registerRole());
      processMap.put("findRolesByUserIdList", new findRolesByUserIdList());
      processMap.put("findSchoolAppDetailBySchoolCodeAndAppCode", new findSchoolAppDetailBySchoolCodeAndAppCode());
      processMap.put("findSchoolByUserIdAndAppCode", new findSchoolByUserIdAndAppCode());
      processMap.put("findSysRoleRegisterRequirementByRoleId", new findSysRoleRegisterRequirementByRoleId());
      processMap.put("findNormalUserChildByParentIdAndSchoolId", new findNormalUserChildByParentIdAndSchoolId());
      processMap.put("findNormalUserParentByChildIdAndSchoolId", new findNormalUserParentByChildIdAndSchoolId());
      processMap.put("findSchoolAppConfigBySchoolIdAndAppCode", new findSchoolAppConfigBySchoolIdAndAppCode());
      processMap.put("findStudentOrTeacherUserBySchoolIdAndJsonParams", new findStudentOrTeacherUserBySchoolIdAndJsonParams());
      processMap.put("findAppByJsonParams", new findAppByJsonParams());
      processMap.put("findOfficeBySchoolIdAndJsonParams", new findOfficeBySchoolIdAndJsonParams());
      processMap.put("findDictDataByDictTypeCodeList", new findDictDataByDictTypeCodeList());
      processMap.put("findSubjectBySchoolIdAndJsonParams", new findSubjectBySchoolIdAndJsonParams());
      processMap.put("findLessonBySchoolIdAndJsonParams", new findLessonBySchoolIdAndJsonParams());
      processMap.put("findPlaceBySchoolIdAndJsonParams", new findPlaceBySchoolIdAndJsonParams());
      processMap.put("findGradeBySchoolId", new findGradeBySchoolId());
      processMap.put("findClassBySchoolIdAndJsonParams", new findClassBySchoolIdAndJsonParams());
      processMap.put("findStudentBySchoolIdAndJsonParams", new findStudentBySchoolIdAndJsonParams());
      processMap.put("findJobTypeBySchoolIdAndJsonParams", new findJobTypeBySchoolIdAndJsonParams());
      processMap.put("findJobBySchoolIdAndJsonParams", new findJobBySchoolIdAndJsonParams());
      processMap.put("findUserBySchoolIdAndJsonParams", new findUserBySchoolIdAndJsonParams());
      processMap.put("findCalendarBySchoolIdAndJsonParams", new findCalendarBySchoolIdAndJsonParams());
      processMap.put("findStaffBySchoolIdAndJsonParams", new findStaffBySchoolIdAndJsonParams());
      processMap.put("findHeadTeacherBySchoolIdAndJsonParams", new findHeadTeacherBySchoolIdAndJsonParams());
      processMap.put("findClassUserDetailBySchoolIdAndJsonParams", new findClassUserDetailBySchoolIdAndJsonParams());
      processMap.put("findBriefUserByV5", new findBriefUserByV5());
      processMap.put("findNewPageUserBy", new findNewPageUserBy());
      processMap.put("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams", new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams());
      processMap.put("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams", new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams());
      processMap.put("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams", new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams());
      processMap.put("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams", new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams());
      processMap.put("findAbnormalUserIdListBySchoolId", new findAbnormalUserIdListBySchoolId());
      processMap.put("findSemesterBySchoolId", new findSemesterBySchoolId());
      processMap.put("findRoleBySchoolIdAndJsonParams", new findRoleBySchoolIdAndJsonParams());
      processMap.put("findSysRoleBySchoolIdAndJsonParams", new findSysRoleBySchoolIdAndJsonParams());
      processMap.put("findBusiClassBySchoolIdAndJsonParams", new findBusiClassBySchoolIdAndJsonParams());
      processMap.put("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams", new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams());
      return processMap;
    }

    public static class findUserByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserByUserId_args, SysUserThrift> {
      public findUserByUserId() {
        super("findUserByUserId");
      }

      public findUserByUserId_args getEmptyArgsInstance() {
        return new findUserByUserId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SysUserThrift>() { 
          public void onComplete(SysUserThrift o) {
            findUserByUserId_result result = new findUserByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserByUserId_result result = new findUserByUserId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler) throws org.apache.thrift.TException {
        iface.findUserByUserId(args.userId,resultHandler);
      }
    }

    public static class findUserBySchoolIdAndOtherParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserBySchoolIdAndOtherParams_args, java.util.List<SysUserThrift>> {
      public findUserBySchoolIdAndOtherParams() {
        super("findUserBySchoolIdAndOtherParams");
      }

      public findUserBySchoolIdAndOtherParams_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndOtherParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>>() { 
          public void onComplete(java.util.List<SysUserThrift> o) {
            findUserBySchoolIdAndOtherParams_result result = new findUserBySchoolIdAndOtherParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserBySchoolIdAndOtherParams_result result = new findUserBySchoolIdAndOtherParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserBySchoolIdAndOtherParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findUserBySchoolIdAndOtherParams(args.schoolId, args.realName, args.username,resultHandler);
      }
    }

    public static class findUserByUserIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserByUserIdList_args, java.util.List<SysUserThrift>> {
      public findUserByUserIdList() {
        super("findUserByUserIdList");
      }

      public findUserByUserIdList_args getEmptyArgsInstance() {
        return new findUserByUserIdList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>>() { 
          public void onComplete(java.util.List<SysUserThrift> o) {
            findUserByUserIdList_result result = new findUserByUserIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserByUserIdList_result result = new findUserByUserIdList_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserByUserIdList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findUserByUserIdList(args.userIdList,resultHandler);
      }
    }

    public static class findUserBySchoolIdAndRealNameLike<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserBySchoolIdAndRealNameLike_args, java.util.List<SysUserThrift>> {
      public findUserBySchoolIdAndRealNameLike() {
        super("findUserBySchoolIdAndRealNameLike");
      }

      public findUserBySchoolIdAndRealNameLike_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndRealNameLike_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>>() { 
          public void onComplete(java.util.List<SysUserThrift> o) {
            findUserBySchoolIdAndRealNameLike_result result = new findUserBySchoolIdAndRealNameLike_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserBySchoolIdAndRealNameLike_result result = new findUserBySchoolIdAndRealNameLike_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserBySchoolIdAndRealNameLike_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysUserThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findUserBySchoolIdAndRealNameLike(args.schoolId, args.realName,resultHandler);
      }
    }

    public static class findPageUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPageUser_args, java.lang.String> {
      public findPageUser() {
        super("findPageUser");
      }

      public findPageUser_args getEmptyArgsInstance() {
        return new findPageUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findPageUser_result result = new findPageUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findPageUser_result result = new findPageUser_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPageUser_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findPageUser(args.pageNum, args.pageSize, args.schoolId, args.officeId, args.groupType, args.username, args.realName,resultHandler);
      }
    }

    public static class findPageUserWithJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPageUserWithJsonParams_args, java.lang.String> {
      public findPageUserWithJsonParams() {
        super("findPageUserWithJsonParams");
      }

      public findPageUserWithJsonParams_args getEmptyArgsInstance() {
        return new findPageUserWithJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findPageUserWithJsonParams_result result = new findPageUserWithJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findPageUserWithJsonParams_result result = new findPageUserWithJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPageUserWithJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findPageUserWithJsonParams(args.pageNum, args.pageSize, args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findUserIdListWithJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserIdListWithJsonParams_args, java.lang.String> {
      public findUserIdListWithJsonParams() {
        super("findUserIdListWithJsonParams");
      }

      public findUserIdListWithJsonParams_args getEmptyArgsInstance() {
        return new findUserIdListWithJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserIdListWithJsonParams_result result = new findUserIdListWithJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserIdListWithJsonParams_result result = new findUserIdListWithJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserIdListWithJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserIdListWithJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class updateUserByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserByUserId_args, Void> {
      public updateUserByUserId() {
        super("updateUserByUserId");
      }

      public updateUserByUserId_args getEmptyArgsInstance() {
        return new updateUserByUserId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateUserByUserId_result result = new updateUserByUserId_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateUserByUserId_result result = new updateUserByUserId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateUserByUserId(args.userId, args.wxOpenId,resultHandler);
      }
    }

    public static class findUserByOpenId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserByOpenId_args, SysUserThrift> {
      public findUserByOpenId() {
        super("findUserByOpenId");
      }

      public findUserByOpenId_args getEmptyArgsInstance() {
        return new findUserByOpenId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SysUserThrift>() { 
          public void onComplete(SysUserThrift o) {
            findUserByOpenId_result result = new findUserByOpenId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserByOpenId_result result = new findUserByOpenId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserByOpenId_args args, org.apache.thrift.async.AsyncMethodCallback<SysUserThrift> resultHandler) throws org.apache.thrift.TException {
        iface.findUserByOpenId(args.openId,resultHandler);
      }
    }

    public static class findUserIdBySchoolIdAndOtherParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserIdBySchoolIdAndOtherParams_args, java.util.List<java.lang.String>> {
      public findUserIdBySchoolIdAndOtherParams() {
        super("findUserIdBySchoolIdAndOtherParams");
      }

      public findUserIdBySchoolIdAndOtherParams_args getEmptyArgsInstance() {
        return new findUserIdBySchoolIdAndOtherParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            findUserIdBySchoolIdAndOtherParams_result result = new findUserIdBySchoolIdAndOtherParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserIdBySchoolIdAndOtherParams_result result = new findUserIdBySchoolIdAndOtherParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserIdBySchoolIdAndOtherParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.findUserIdBySchoolIdAndOtherParams(args.schoolId, args.officeId,resultHandler);
      }
    }

    public static class findNjssoStudentByIdIn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findNjssoStudentByIdIn_args, java.lang.String> {
      public findNjssoStudentByIdIn() {
        super("findNjssoStudentByIdIn");
      }

      public findNjssoStudentByIdIn_args getEmptyArgsInstance() {
        return new findNjssoStudentByIdIn_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findNjssoStudentByIdIn_result result = new findNjssoStudentByIdIn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findNjssoStudentByIdIn_result result = new findNjssoStudentByIdIn_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findNjssoStudentByIdIn_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findNjssoStudentByIdIn(args.userIdList,resultHandler);
      }
    }

    public static class findStudentBySchoolIdIdIn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStudentBySchoolIdIdIn_args, java.lang.String> {
      public findStudentBySchoolIdIdIn() {
        super("findStudentBySchoolIdIdIn");
      }

      public findStudentBySchoolIdIdIn_args getEmptyArgsInstance() {
        return new findStudentBySchoolIdIdIn_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findStudentBySchoolIdIdIn_result result = new findStudentBySchoolIdIdIn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findStudentBySchoolIdIdIn_result result = new findStudentBySchoolIdIdIn_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStudentBySchoolIdIdIn_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findStudentBySchoolIdIdIn(args.schoolId, args.userIdList,resultHandler);
      }
    }

    public static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args, java.lang.String> {
      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo() {
        super("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo");
      }

      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args getEmptyArgsInstance() {
        return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result result = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result result = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findSchoolUserBySchoolIdAndPapersTypeAndPapersNo(args.schoolId, args.papersType, args.papersNo,resultHandler);
      }
    }

    public static class updatePassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePassword_args, Void> {
      public updatePassword() {
        super("updatePassword");
      }

      public updatePassword_args getEmptyArgsInstance() {
        return new updatePassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updatePassword_result result = new updatePassword_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updatePassword_result result = new updatePassword_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePassword_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updatePassword(args.password, args.newPassword, args.userId,resultHandler);
      }
    }

    public static class findStudentUserByOfficeIdAndSchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStudentUserByOfficeIdAndSchoolId_args, java.lang.String> {
      public findStudentUserByOfficeIdAndSchoolId() {
        super("findStudentUserByOfficeIdAndSchoolId");
      }

      public findStudentUserByOfficeIdAndSchoolId_args getEmptyArgsInstance() {
        return new findStudentUserByOfficeIdAndSchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findStudentUserByOfficeIdAndSchoolId_result result = new findStudentUserByOfficeIdAndSchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findStudentUserByOfficeIdAndSchoolId_result result = new findStudentUserByOfficeIdAndSchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStudentUserByOfficeIdAndSchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findStudentUserByOfficeIdAndSchoolId(args.officeId, args.schoolId,resultHandler);
      }
    }

    public static class updateUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserInfo_args, Void> {
      public updateUserInfo() {
        super("updateUserInfo");
      }

      public updateUserInfo_args getEmptyArgsInstance() {
        return new updateUserInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateUserInfo_result result = new updateUserInfo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateUserInfo_result result = new updateUserInfo_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateUserInfo(args.paramsStr, args.userId,resultHandler);
      }
    }

    public static class updateUserInfoByUserIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserInfoByUserIdAndJsonParams_args, Void> {
      public updateUserInfoByUserIdAndJsonParams() {
        super("updateUserInfoByUserIdAndJsonParams");
      }

      public updateUserInfoByUserIdAndJsonParams_args getEmptyArgsInstance() {
        return new updateUserInfoByUserIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateUserInfoByUserIdAndJsonParams_result result = new updateUserInfoByUserIdAndJsonParams_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateUserInfoByUserIdAndJsonParams_result result = new updateUserInfoByUserIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserInfoByUserIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateUserInfoByUserIdAndJsonParams(args.userId, args.paramsStr,resultHandler);
      }
    }

    public static class loginByUsernameAndPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginByUsernameAndPassword_args, java.lang.String> {
      public loginByUsernameAndPassword() {
        super("loginByUsernameAndPassword");
      }

      public loginByUsernameAndPassword_args getEmptyArgsInstance() {
        return new loginByUsernameAndPassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            loginByUsernameAndPassword_result result = new loginByUsernameAndPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loginByUsernameAndPassword_result result = new loginByUsernameAndPassword_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginByUsernameAndPassword_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.loginByUsernameAndPassword(args.username, args.password,resultHandler);
      }
    }

    public static class findParentBySchoolIdAndUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findParentBySchoolIdAndUserId_args, java.lang.String> {
      public findParentBySchoolIdAndUserId() {
        super("findParentBySchoolIdAndUserId");
      }

      public findParentBySchoolIdAndUserId_args getEmptyArgsInstance() {
        return new findParentBySchoolIdAndUserId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findParentBySchoolIdAndUserId_result result = new findParentBySchoolIdAndUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findParentBySchoolIdAndUserId_result result = new findParentBySchoolIdAndUserId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findParentBySchoolIdAndUserId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findParentBySchoolIdAndUserId(args.schoolId, args.userId,resultHandler);
      }
    }

    public static class findUserBySchoolIdAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserBySchoolIdAndOtherJsonParams_args, java.lang.String> {
      public findUserBySchoolIdAndOtherJsonParams() {
        super("findUserBySchoolIdAndOtherJsonParams");
      }

      public findUserBySchoolIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserBySchoolIdAndOtherJsonParams_result result = new findUserBySchoolIdAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserBySchoolIdAndOtherJsonParams_result result = new findUserBySchoolIdAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserBySchoolIdAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserBySchoolIdAndOtherJsonParams(args.schoolId, args.paramsStr,resultHandler);
      }
    }

    public static class findUserBySchoolIdAndStaffNoInOrStudentNoIn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args, java.lang.String> {
      public findUserBySchoolIdAndStaffNoInOrStudentNoIn() {
        super("findUserBySchoolIdAndStaffNoInOrStudentNoIn");
      }

      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserBySchoolIdAndStaffNoInOrStudentNoIn_result result = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserBySchoolIdAndStaffNoInOrStudentNoIn_result result = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserBySchoolIdAndStaffNoInOrStudentNoIn(args.schoolId, args.outIdList,resultHandler);
      }
    }

    public static class findUserBySchoolIdAndOutIdIn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserBySchoolIdAndOutIdIn_args, java.lang.String> {
      public findUserBySchoolIdAndOutIdIn() {
        super("findUserBySchoolIdAndOutIdIn");
      }

      public findUserBySchoolIdAndOutIdIn_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndOutIdIn_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserBySchoolIdAndOutIdIn_result result = new findUserBySchoolIdAndOutIdIn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserBySchoolIdAndOutIdIn_result result = new findUserBySchoolIdAndOutIdIn_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserBySchoolIdAndOutIdIn_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserBySchoolIdAndOutIdIn(args.schoolId, args.outIdList,resultHandler);
      }
    }

    public static class findUnsyncUserBySchoolIdAndOtherParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUnsyncUserBySchoolIdAndOtherParams_args, java.lang.String> {
      public findUnsyncUserBySchoolIdAndOtherParams() {
        super("findUnsyncUserBySchoolIdAndOtherParams");
      }

      public findUnsyncUserBySchoolIdAndOtherParams_args getEmptyArgsInstance() {
        return new findUnsyncUserBySchoolIdAndOtherParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUnsyncUserBySchoolIdAndOtherParams_result result = new findUnsyncUserBySchoolIdAndOtherParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUnsyncUserBySchoolIdAndOtherParams_result result = new findUnsyncUserBySchoolIdAndOtherParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUnsyncUserBySchoolIdAndOtherParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUnsyncUserBySchoolIdAndOtherParams(args.schoolId, args.preSyncTime, args.syncEndTime, args.userIdList,resultHandler);
      }
    }

    public static class findUserWithOutIdByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserWithOutIdByUserId_args, java.lang.String> {
      public findUserWithOutIdByUserId() {
        super("findUserWithOutIdByUserId");
      }

      public findUserWithOutIdByUserId_args getEmptyArgsInstance() {
        return new findUserWithOutIdByUserId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserWithOutIdByUserId_result result = new findUserWithOutIdByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserWithOutIdByUserId_result result = new findUserWithOutIdByUserId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserWithOutIdByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserWithOutIdByUserId(args.userId,resultHandler);
      }
    }

    public static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args, java.lang.String> {
      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams() {
        super("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams");
      }

      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(args.schoolId, args.preSyncTime, args.jsonParams,resultHandler);
      }
    }

    public static class findStudentBusiInfoBySchoolIdAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args, java.lang.String> {
      public findStudentBusiInfoBySchoolIdAndOtherJsonParams() {
        super("findStudentBusiInfoBySchoolIdAndOtherJsonParams");
      }

      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findStudentBusiInfoBySchoolIdAndOtherJsonParams_result result = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findStudentBusiInfoBySchoolIdAndOtherJsonParams_result result = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findStudentBusiInfoBySchoolIdAndOtherJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args, java.lang.String> {
      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams() {
        super("findTeacherBusiInfoBySchoolIdAndOtherJsonParams");
      }

      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result result = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result result = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findTeacherBusiInfoBySchoolIdAndOtherJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findChildBySchoolIdAndUserIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findChildBySchoolIdAndUserIds_args, java.lang.String> {
      public findChildBySchoolIdAndUserIds() {
        super("findChildBySchoolIdAndUserIds");
      }

      public findChildBySchoolIdAndUserIds_args getEmptyArgsInstance() {
        return new findChildBySchoolIdAndUserIds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findChildBySchoolIdAndUserIds_result result = new findChildBySchoolIdAndUserIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findChildBySchoolIdAndUserIds_result result = new findChildBySchoolIdAndUserIds_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findChildBySchoolIdAndUserIds_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findChildBySchoolIdAndUserIds(args.schoolId, args.ids,resultHandler);
      }
    }

    public static class findUnclassifiedUserBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUnclassifiedUserBySchoolId_args, java.lang.String> {
      public findUnclassifiedUserBySchoolId() {
        super("findUnclassifiedUserBySchoolId");
      }

      public findUnclassifiedUserBySchoolId_args getEmptyArgsInstance() {
        return new findUnclassifiedUserBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUnclassifiedUserBySchoolId_result result = new findUnclassifiedUserBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUnclassifiedUserBySchoolId_result result = new findUnclassifiedUserBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUnclassifiedUserBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUnclassifiedUserBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findParentBySchoolIdAndChildIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findParentBySchoolIdAndChildIds_args, java.lang.String> {
      public findParentBySchoolIdAndChildIds() {
        super("findParentBySchoolIdAndChildIds");
      }

      public findParentBySchoolIdAndChildIds_args getEmptyArgsInstance() {
        return new findParentBySchoolIdAndChildIds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findParentBySchoolIdAndChildIds_result result = new findParentBySchoolIdAndChildIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findParentBySchoolIdAndChildIds_result result = new findParentBySchoolIdAndChildIds_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findParentBySchoolIdAndChildIds_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findParentBySchoolIdAndChildIds(args.schoolId, args.ids,resultHandler);
      }
    }

    public static class findClassStudentUserIdsBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findClassStudentUserIdsBySchoolId_args, java.lang.String> {
      public findClassStudentUserIdsBySchoolId() {
        super("findClassStudentUserIdsBySchoolId");
      }

      public findClassStudentUserIdsBySchoolId_args getEmptyArgsInstance() {
        return new findClassStudentUserIdsBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findClassStudentUserIdsBySchoolId_result result = new findClassStudentUserIdsBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findClassStudentUserIdsBySchoolId_result result = new findClassStudentUserIdsBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findClassStudentUserIdsBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findClassStudentUserIdsBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args, java.lang.String> {
      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams() {
        super("findClassUserDetailBySchoolIdAndClassIdAndOtherParams");
      }

      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args getEmptyArgsInstance() {
        return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findClassUserDetailBySchoolIdAndClassIdAndOtherParams(args.schoolId, args.classId, args.type, args.userId,resultHandler);
      }
    }

    public static class saveOrUpdateClassUserDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOrUpdateClassUserDetail_args, Void> {
      public saveOrUpdateClassUserDetail() {
        super("saveOrUpdateClassUserDetail");
      }

      public saveOrUpdateClassUserDetail_args getEmptyArgsInstance() {
        return new saveOrUpdateClassUserDetail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveOrUpdateClassUserDetail_result result = new saveOrUpdateClassUserDetail_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveOrUpdateClassUserDetail_result result = new saveOrUpdateClassUserDetail_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOrUpdateClassUserDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.saveOrUpdateClassUserDetail(args.paramsStr, args.operateUserId,resultHandler);
      }
    }

    public static class deleteClassUserDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteClassUserDetail_args, Void> {
      public deleteClassUserDetail() {
        super("deleteClassUserDetail");
      }

      public deleteClassUserDetail_args getEmptyArgsInstance() {
        return new deleteClassUserDetail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteClassUserDetail_result result = new deleteClassUserDetail_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteClassUserDetail_result result = new deleteClassUserDetail_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteClassUserDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteClassUserDetail(args.schoolId, args.id, args.operateUserId,resultHandler);
      }
    }

    public static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args, java.lang.String> {
      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams() {
        super("findClassUserDetailBySchoolIdAndUserIdAndOtherParams");
      }

      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args getEmptyArgsInstance() {
        return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result result = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findClassUserDetailBySchoolIdAndUserIdAndOtherParams(args.schoolId, args.userId, args.type,resultHandler);
      }
    }

    public static class findSchoolBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSchoolBySchoolId_args, java.lang.String> {
      public findSchoolBySchoolId() {
        super("findSchoolBySchoolId");
      }

      public findSchoolBySchoolId_args getEmptyArgsInstance() {
        return new findSchoolBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findSchoolBySchoolId_result result = new findSchoolBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSchoolBySchoolId_result result = new findSchoolBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSchoolBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findSchoolBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findAllSchool<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllSchool_args, java.util.List<SysOfficeThrift>> {
      public findAllSchool() {
        super("findAllSchool");
      }

      public findAllSchool_args getEmptyArgsInstance() {
        return new findAllSchool_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>>() { 
          public void onComplete(java.util.List<SysOfficeThrift> o) {
            findAllSchool_result result = new findAllSchool_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAllSchool_result result = new findAllSchool_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllSchool_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findAllSchool(resultHandler);
      }
    }

    public static class findOfficeByUserIdAndSchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOfficeByUserIdAndSchoolId_args, java.util.List<SysOfficeThrift>> {
      public findOfficeByUserIdAndSchoolId() {
        super("findOfficeByUserIdAndSchoolId");
      }

      public findOfficeByUserIdAndSchoolId_args getEmptyArgsInstance() {
        return new findOfficeByUserIdAndSchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>>() { 
          public void onComplete(java.util.List<SysOfficeThrift> o) {
            findOfficeByUserIdAndSchoolId_result result = new findOfficeByUserIdAndSchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOfficeByUserIdAndSchoolId_result result = new findOfficeByUserIdAndSchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOfficeByUserIdAndSchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findOfficeByUserIdAndSchoolId(args.userId, args.schoolId,resultHandler);
      }
    }

    public static class findOfficeBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOfficeBySchoolId_args, java.util.List<SysOfficeThrift>> {
      public findOfficeBySchoolId() {
        super("findOfficeBySchoolId");
      }

      public findOfficeBySchoolId_args getEmptyArgsInstance() {
        return new findOfficeBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>>() { 
          public void onComplete(java.util.List<SysOfficeThrift> o) {
            findOfficeBySchoolId_result result = new findOfficeBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOfficeBySchoolId_result result = new findOfficeBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOfficeBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findOfficeBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findTreeOfficeBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findTreeOfficeBySchoolId_args, java.util.List<SysOfficeThrift>> {
      public findTreeOfficeBySchoolId() {
        super("findTreeOfficeBySchoolId");
      }

      public findTreeOfficeBySchoolId_args getEmptyArgsInstance() {
        return new findTreeOfficeBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>>() { 
          public void onComplete(java.util.List<SysOfficeThrift> o) {
            findTreeOfficeBySchoolId_result result = new findTreeOfficeBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findTreeOfficeBySchoolId_result result = new findTreeOfficeBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findTreeOfficeBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findTreeOfficeBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findTreeOfficeBySchoolIdAndOfficeType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findTreeOfficeBySchoolIdAndOfficeType_args, java.util.List<SysOfficeThrift>> {
      public findTreeOfficeBySchoolIdAndOfficeType() {
        super("findTreeOfficeBySchoolIdAndOfficeType");
      }

      public findTreeOfficeBySchoolIdAndOfficeType_args getEmptyArgsInstance() {
        return new findTreeOfficeBySchoolIdAndOfficeType_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>>() { 
          public void onComplete(java.util.List<SysOfficeThrift> o) {
            findTreeOfficeBySchoolIdAndOfficeType_result result = new findTreeOfficeBySchoolIdAndOfficeType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findTreeOfficeBySchoolIdAndOfficeType_result result = new findTreeOfficeBySchoolIdAndOfficeType_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findTreeOfficeBySchoolIdAndOfficeType_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findTreeOfficeBySchoolIdAndOfficeType(args.schoolId, args.officeType,resultHandler);
      }
    }

    public static class findOfficeById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOfficeById_args, SysOfficeThrift> {
      public findOfficeById() {
        super("findOfficeById");
      }

      public findOfficeById_args getEmptyArgsInstance() {
        return new findOfficeById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SysOfficeThrift> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SysOfficeThrift>() { 
          public void onComplete(SysOfficeThrift o) {
            findOfficeById_result result = new findOfficeById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOfficeById_result result = new findOfficeById_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOfficeById_args args, org.apache.thrift.async.AsyncMethodCallback<SysOfficeThrift> resultHandler) throws org.apache.thrift.TException {
        iface.findOfficeById(args.officeId,resultHandler);
      }
    }

    public static class findOfficeBySchoolIdAndOfficeType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOfficeBySchoolIdAndOfficeType_args, java.util.List<SysOfficeThrift>> {
      public findOfficeBySchoolIdAndOfficeType() {
        super("findOfficeBySchoolIdAndOfficeType");
      }

      public findOfficeBySchoolIdAndOfficeType_args getEmptyArgsInstance() {
        return new findOfficeBySchoolIdAndOfficeType_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>>() { 
          public void onComplete(java.util.List<SysOfficeThrift> o) {
            findOfficeBySchoolIdAndOfficeType_result result = new findOfficeBySchoolIdAndOfficeType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOfficeBySchoolIdAndOfficeType_result result = new findOfficeBySchoolIdAndOfficeType_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOfficeBySchoolIdAndOfficeType_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysOfficeThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findOfficeBySchoolIdAndOfficeType(args.schoolId, args.officeType,resultHandler);
      }
    }

    public static class findAccessableOfficeByUserIdAndSchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAccessableOfficeByUserIdAndSchoolId_args, java.lang.String> {
      public findAccessableOfficeByUserIdAndSchoolId() {
        super("findAccessableOfficeByUserIdAndSchoolId");
      }

      public findAccessableOfficeByUserIdAndSchoolId_args getEmptyArgsInstance() {
        return new findAccessableOfficeByUserIdAndSchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findAccessableOfficeByUserIdAndSchoolId_result result = new findAccessableOfficeByUserIdAndSchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAccessableOfficeByUserIdAndSchoolId_result result = new findAccessableOfficeByUserIdAndSchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAccessableOfficeByUserIdAndSchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findAccessableOfficeByUserIdAndSchoolId(args.userId, args.schoolId,resultHandler);
      }
    }

    public static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args, java.lang.String> {
      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams() {
        super("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams");
      }

      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result result = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result result = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams(args.userId, args.schoolId, args.roleId, args.paramsStr,resultHandler);
      }
    }

    public static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args, java.lang.String> {
      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams() {
        super("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams");
      }

      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findOfficeBySchoolIdAndUserIdListAndOtherJsonParams(args.schoolId, args.userIdList, args.paramsStr,resultHandler);
      }
    }

    public static class findUserOfficeBySchoolIdAndUserIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserOfficeBySchoolIdAndUserIdList_args, java.lang.String> {
      public findUserOfficeBySchoolIdAndUserIdList() {
        super("findUserOfficeBySchoolIdAndUserIdList");
      }

      public findUserOfficeBySchoolIdAndUserIdList_args getEmptyArgsInstance() {
        return new findUserOfficeBySchoolIdAndUserIdList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserOfficeBySchoolIdAndUserIdList_result result = new findUserOfficeBySchoolIdAndUserIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserOfficeBySchoolIdAndUserIdList_result result = new findUserOfficeBySchoolIdAndUserIdList_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserOfficeBySchoolIdAndUserIdList_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserOfficeBySchoolIdAndUserIdList(args.schoolId, args.userIdList,resultHandler);
      }
    }

    public static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args, java.lang.String> {
      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams() {
        super("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams");
      }

      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result result = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams(args.schoolId, args.userIdList, args.paramsStr,resultHandler);
      }
    }

    public static class findMenuPermByUserIdAndSchoolCodeAndAppCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMenuPermByUserIdAndSchoolCodeAndAppCode_args, java.util.List<SysMenuPermissionThrift>> {
      public findMenuPermByUserIdAndSchoolCodeAndAppCode() {
        super("findMenuPermByUserIdAndSchoolCodeAndAppCode");
      }

      public findMenuPermByUserIdAndSchoolCodeAndAppCode_args getEmptyArgsInstance() {
        return new findMenuPermByUserIdAndSchoolCodeAndAppCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>>() { 
          public void onComplete(java.util.List<SysMenuPermissionThrift> o) {
            findMenuPermByUserIdAndSchoolCodeAndAppCode_result result = new findMenuPermByUserIdAndSchoolCodeAndAppCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findMenuPermByUserIdAndSchoolCodeAndAppCode_result result = new findMenuPermByUserIdAndSchoolCodeAndAppCode_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMenuPermByUserIdAndSchoolCodeAndAppCode_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findMenuPermByUserIdAndSchoolCodeAndAppCode(args.userId, args.schoolCode, args.appCode,resultHandler);
      }
    }

    public static class findMenuPermByUserIdAndSchoolIdAndAppCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMenuPermByUserIdAndSchoolIdAndAppCode_args, java.util.List<SysMenuPermissionThrift>> {
      public findMenuPermByUserIdAndSchoolIdAndAppCode() {
        super("findMenuPermByUserIdAndSchoolIdAndAppCode");
      }

      public findMenuPermByUserIdAndSchoolIdAndAppCode_args getEmptyArgsInstance() {
        return new findMenuPermByUserIdAndSchoolIdAndAppCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>>() { 
          public void onComplete(java.util.List<SysMenuPermissionThrift> o) {
            findMenuPermByUserIdAndSchoolIdAndAppCode_result result = new findMenuPermByUserIdAndSchoolIdAndAppCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findMenuPermByUserIdAndSchoolIdAndAppCode_result result = new findMenuPermByUserIdAndSchoolIdAndAppCode_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMenuPermByUserIdAndSchoolIdAndAppCode_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysMenuPermissionThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findMenuPermByUserIdAndSchoolIdAndAppCode(args.userId, args.schoolId, args.appCode,resultHandler);
      }
    }

    public static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args, java.lang.String> {
      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam() {
        super("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam");
      }

      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args getEmptyArgsInstance() {
        return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result result = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result result = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam(args.schoolId, args.roleId, args.jsonStr,resultHandler);
      }
    }

    public static class findRoleByUserIdAndSchoolCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRoleByUserIdAndSchoolCode_args, java.util.List<SysRoleThrift>> {
      public findRoleByUserIdAndSchoolCode() {
        super("findRoleByUserIdAndSchoolCode");
      }

      public findRoleByUserIdAndSchoolCode_args getEmptyArgsInstance() {
        return new findRoleByUserIdAndSchoolCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>>() { 
          public void onComplete(java.util.List<SysRoleThrift> o) {
            findRoleByUserIdAndSchoolCode_result result = new findRoleByUserIdAndSchoolCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findRoleByUserIdAndSchoolCode_result result = new findRoleByUserIdAndSchoolCode_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRoleByUserIdAndSchoolCode_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findRoleByUserIdAndSchoolCode(args.userId, args.schoolCode,resultHandler);
      }
    }

    public static class findRoleBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRoleBySchoolId_args, java.util.List<SysRoleThrift>> {
      public findRoleBySchoolId() {
        super("findRoleBySchoolId");
      }

      public findRoleBySchoolId_args getEmptyArgsInstance() {
        return new findRoleBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>>() { 
          public void onComplete(java.util.List<SysRoleThrift> o) {
            findRoleBySchoolId_result result = new findRoleBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findRoleBySchoolId_result result = new findRoleBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRoleBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findRoleBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findRoleByRoleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRoleByRoleId_args, SysRoleThrift> {
      public findRoleByRoleId() {
        super("findRoleByRoleId");
      }

      public findRoleByRoleId_args getEmptyArgsInstance() {
        return new findRoleByRoleId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SysRoleThrift> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SysRoleThrift>() { 
          public void onComplete(SysRoleThrift o) {
            findRoleByRoleId_result result = new findRoleByRoleId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findRoleByRoleId_result result = new findRoleByRoleId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRoleByRoleId_args args, org.apache.thrift.async.AsyncMethodCallback<SysRoleThrift> resultHandler) throws org.apache.thrift.TException {
        iface.findRoleByRoleId(args.roleId,resultHandler);
      }
    }

    public static class findRoleByUserIdAndSchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRoleByUserIdAndSchoolId_args, java.util.List<SysRoleThrift>> {
      public findRoleByUserIdAndSchoolId() {
        super("findRoleByUserIdAndSchoolId");
      }

      public findRoleByUserIdAndSchoolId_args getEmptyArgsInstance() {
        return new findRoleByUserIdAndSchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>>() { 
          public void onComplete(java.util.List<SysRoleThrift> o) {
            findRoleByUserIdAndSchoolId_result result = new findRoleByUserIdAndSchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findRoleByUserIdAndSchoolId_result result = new findRoleByUserIdAndSchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRoleByUserIdAndSchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findRoleByUserIdAndSchoolId(args.userId, args.schoolId,resultHandler);
      }
    }

    public static class findSchoolRoleListByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSchoolRoleListByUserId_args, java.lang.String> {
      public findSchoolRoleListByUserId() {
        super("findSchoolRoleListByUserId");
      }

      public findSchoolRoleListByUserId_args getEmptyArgsInstance() {
        return new findSchoolRoleListByUserId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findSchoolRoleListByUserId_result result = new findSchoolRoleListByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSchoolRoleListByUserId_result result = new findSchoolRoleListByUserId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSchoolRoleListByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findSchoolRoleListByUserId(args.userId,resultHandler);
      }
    }

    public static class findOpenRoleBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOpenRoleBySchoolId_args, java.util.List<SysRoleThrift>> {
      public findOpenRoleBySchoolId() {
        super("findOpenRoleBySchoolId");
      }

      public findOpenRoleBySchoolId_args getEmptyArgsInstance() {
        return new findOpenRoleBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>>() { 
          public void onComplete(java.util.List<SysRoleThrift> o) {
            findOpenRoleBySchoolId_result result = new findOpenRoleBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOpenRoleBySchoolId_result result = new findOpenRoleBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOpenRoleBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findOpenRoleBySchoolId(args.schoolId, args.groupType,resultHandler);
      }
    }

    public static class registerRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerRole_args, Void> {
      public registerRole() {
        super("registerRole");
      }

      public registerRole_args getEmptyArgsInstance() {
        return new registerRole_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registerRole_result result = new registerRole_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerRole_result result = new registerRole_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerRole_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.registerRole(args.paramsStr, args.userId,resultHandler);
      }
    }

    public static class findRolesByUserIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRolesByUserIdList_args, java.lang.String> {
      public findRolesByUserIdList() {
        super("findRolesByUserIdList");
      }

      public findRolesByUserIdList_args getEmptyArgsInstance() {
        return new findRolesByUserIdList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findRolesByUserIdList_result result = new findRolesByUserIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findRolesByUserIdList_result result = new findRolesByUserIdList_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRolesByUserIdList_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findRolesByUserIdList(args.schoolId, args.userIdList,resultHandler);
      }
    }

    public static class findSchoolAppDetailBySchoolCodeAndAppCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSchoolAppDetailBySchoolCodeAndAppCode_args, SysSchoolAppDetailThrift> {
      public findSchoolAppDetailBySchoolCodeAndAppCode() {
        super("findSchoolAppDetailBySchoolCodeAndAppCode");
      }

      public findSchoolAppDetailBySchoolCodeAndAppCode_args getEmptyArgsInstance() {
        return new findSchoolAppDetailBySchoolCodeAndAppCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SysSchoolAppDetailThrift> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SysSchoolAppDetailThrift>() { 
          public void onComplete(SysSchoolAppDetailThrift o) {
            findSchoolAppDetailBySchoolCodeAndAppCode_result result = new findSchoolAppDetailBySchoolCodeAndAppCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSchoolAppDetailBySchoolCodeAndAppCode_result result = new findSchoolAppDetailBySchoolCodeAndAppCode_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSchoolAppDetailBySchoolCodeAndAppCode_args args, org.apache.thrift.async.AsyncMethodCallback<SysSchoolAppDetailThrift> resultHandler) throws org.apache.thrift.TException {
        iface.findSchoolAppDetailBySchoolCodeAndAppCode(args.schoolCode, args.appCode,resultHandler);
      }
    }

    public static class findSchoolByUserIdAndAppCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSchoolByUserIdAndAppCode_args, java.util.List<SchoolRoleVoThrift>> {
      public findSchoolByUserIdAndAppCode() {
        super("findSchoolByUserIdAndAppCode");
      }

      public findSchoolByUserIdAndAppCode_args getEmptyArgsInstance() {
        return new findSchoolByUserIdAndAppCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SchoolRoleVoThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SchoolRoleVoThrift>>() { 
          public void onComplete(java.util.List<SchoolRoleVoThrift> o) {
            findSchoolByUserIdAndAppCode_result result = new findSchoolByUserIdAndAppCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSchoolByUserIdAndAppCode_result result = new findSchoolByUserIdAndAppCode_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSchoolByUserIdAndAppCode_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SchoolRoleVoThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findSchoolByUserIdAndAppCode(args.userId, args.appCode,resultHandler);
      }
    }

    public static class findSysRoleRegisterRequirementByRoleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSysRoleRegisterRequirementByRoleId_args, java.util.List<SysRoleRegisterRequirementThrift>> {
      public findSysRoleRegisterRequirementByRoleId() {
        super("findSysRoleRegisterRequirementByRoleId");
      }

      public findSysRoleRegisterRequirementByRoleId_args getEmptyArgsInstance() {
        return new findSysRoleRegisterRequirementByRoleId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleRegisterRequirementThrift>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleRegisterRequirementThrift>>() { 
          public void onComplete(java.util.List<SysRoleRegisterRequirementThrift> o) {
            findSysRoleRegisterRequirementByRoleId_result result = new findSysRoleRegisterRequirementByRoleId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSysRoleRegisterRequirementByRoleId_result result = new findSysRoleRegisterRequirementByRoleId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSysRoleRegisterRequirementByRoleId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<SysRoleRegisterRequirementThrift>> resultHandler) throws org.apache.thrift.TException {
        iface.findSysRoleRegisterRequirementByRoleId(args.roleId,resultHandler);
      }
    }

    public static class findNormalUserChildByParentIdAndSchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findNormalUserChildByParentIdAndSchoolId_args, java.lang.String> {
      public findNormalUserChildByParentIdAndSchoolId() {
        super("findNormalUserChildByParentIdAndSchoolId");
      }

      public findNormalUserChildByParentIdAndSchoolId_args getEmptyArgsInstance() {
        return new findNormalUserChildByParentIdAndSchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findNormalUserChildByParentIdAndSchoolId_result result = new findNormalUserChildByParentIdAndSchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findNormalUserChildByParentIdAndSchoolId_result result = new findNormalUserChildByParentIdAndSchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findNormalUserChildByParentIdAndSchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findNormalUserChildByParentIdAndSchoolId(args.userId, args.schoolId,resultHandler);
      }
    }

    public static class findNormalUserParentByChildIdAndSchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findNormalUserParentByChildIdAndSchoolId_args, java.lang.String> {
      public findNormalUserParentByChildIdAndSchoolId() {
        super("findNormalUserParentByChildIdAndSchoolId");
      }

      public findNormalUserParentByChildIdAndSchoolId_args getEmptyArgsInstance() {
        return new findNormalUserParentByChildIdAndSchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findNormalUserParentByChildIdAndSchoolId_result result = new findNormalUserParentByChildIdAndSchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findNormalUserParentByChildIdAndSchoolId_result result = new findNormalUserParentByChildIdAndSchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findNormalUserParentByChildIdAndSchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findNormalUserParentByChildIdAndSchoolId(args.userId, args.schoolId,resultHandler);
      }
    }

    public static class findSchoolAppConfigBySchoolIdAndAppCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSchoolAppConfigBySchoolIdAndAppCode_args, java.lang.String> {
      public findSchoolAppConfigBySchoolIdAndAppCode() {
        super("findSchoolAppConfigBySchoolIdAndAppCode");
      }

      public findSchoolAppConfigBySchoolIdAndAppCode_args getEmptyArgsInstance() {
        return new findSchoolAppConfigBySchoolIdAndAppCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findSchoolAppConfigBySchoolIdAndAppCode_result result = new findSchoolAppConfigBySchoolIdAndAppCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSchoolAppConfigBySchoolIdAndAppCode_result result = new findSchoolAppConfigBySchoolIdAndAppCode_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSchoolAppConfigBySchoolIdAndAppCode_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findSchoolAppConfigBySchoolIdAndAppCode(args.schoolId, args.appCode,resultHandler);
      }
    }

    public static class findStudentOrTeacherUserBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStudentOrTeacherUserBySchoolIdAndJsonParams_args, java.lang.String> {
      public findStudentOrTeacherUserBySchoolIdAndJsonParams() {
        super("findStudentOrTeacherUserBySchoolIdAndJsonParams");
      }

      public findStudentOrTeacherUserBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findStudentOrTeacherUserBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findStudentOrTeacherUserBySchoolIdAndJsonParams_result result = new findStudentOrTeacherUserBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findStudentOrTeacherUserBySchoolIdAndJsonParams_result result = new findStudentOrTeacherUserBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStudentOrTeacherUserBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findStudentOrTeacherUserBySchoolIdAndJsonParams(args.schoolId, args.jsonStr,resultHandler);
      }
    }

    public static class findAppByJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAppByJsonParams_args, java.lang.String> {
      public findAppByJsonParams() {
        super("findAppByJsonParams");
      }

      public findAppByJsonParams_args getEmptyArgsInstance() {
        return new findAppByJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findAppByJsonParams_result result = new findAppByJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAppByJsonParams_result result = new findAppByJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAppByJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findAppByJsonParams(args.jsonStr,resultHandler);
      }
    }

    public static class findOfficeBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOfficeBySchoolIdAndJsonParams_args, java.lang.String> {
      public findOfficeBySchoolIdAndJsonParams() {
        super("findOfficeBySchoolIdAndJsonParams");
      }

      public findOfficeBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findOfficeBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findOfficeBySchoolIdAndJsonParams_result result = new findOfficeBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findOfficeBySchoolIdAndJsonParams_result result = new findOfficeBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOfficeBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findOfficeBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findDictDataByDictTypeCodeList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findDictDataByDictTypeCodeList_args, java.lang.String> {
      public findDictDataByDictTypeCodeList() {
        super("findDictDataByDictTypeCodeList");
      }

      public findDictDataByDictTypeCodeList_args getEmptyArgsInstance() {
        return new findDictDataByDictTypeCodeList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findDictDataByDictTypeCodeList_result result = new findDictDataByDictTypeCodeList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findDictDataByDictTypeCodeList_result result = new findDictDataByDictTypeCodeList_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findDictDataByDictTypeCodeList_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findDictDataByDictTypeCodeList(args.dictTypeCodeList,resultHandler);
      }
    }

    public static class findSubjectBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSubjectBySchoolIdAndJsonParams_args, java.lang.String> {
      public findSubjectBySchoolIdAndJsonParams() {
        super("findSubjectBySchoolIdAndJsonParams");
      }

      public findSubjectBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findSubjectBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findSubjectBySchoolIdAndJsonParams_result result = new findSubjectBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSubjectBySchoolIdAndJsonParams_result result = new findSubjectBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSubjectBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findSubjectBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findLessonBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLessonBySchoolIdAndJsonParams_args, java.lang.String> {
      public findLessonBySchoolIdAndJsonParams() {
        super("findLessonBySchoolIdAndJsonParams");
      }

      public findLessonBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findLessonBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findLessonBySchoolIdAndJsonParams_result result = new findLessonBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findLessonBySchoolIdAndJsonParams_result result = new findLessonBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findLessonBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findLessonBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findPlaceBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPlaceBySchoolIdAndJsonParams_args, java.lang.String> {
      public findPlaceBySchoolIdAndJsonParams() {
        super("findPlaceBySchoolIdAndJsonParams");
      }

      public findPlaceBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findPlaceBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findPlaceBySchoolIdAndJsonParams_result result = new findPlaceBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findPlaceBySchoolIdAndJsonParams_result result = new findPlaceBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPlaceBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findPlaceBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findGradeBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findGradeBySchoolId_args, java.lang.String> {
      public findGradeBySchoolId() {
        super("findGradeBySchoolId");
      }

      public findGradeBySchoolId_args getEmptyArgsInstance() {
        return new findGradeBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findGradeBySchoolId_result result = new findGradeBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findGradeBySchoolId_result result = new findGradeBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findGradeBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findGradeBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findClassBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findClassBySchoolIdAndJsonParams_args, java.lang.String> {
      public findClassBySchoolIdAndJsonParams() {
        super("findClassBySchoolIdAndJsonParams");
      }

      public findClassBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findClassBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findClassBySchoolIdAndJsonParams_result result = new findClassBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findClassBySchoolIdAndJsonParams_result result = new findClassBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findClassBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findClassBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findStudentBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStudentBySchoolIdAndJsonParams_args, java.lang.String> {
      public findStudentBySchoolIdAndJsonParams() {
        super("findStudentBySchoolIdAndJsonParams");
      }

      public findStudentBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findStudentBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findStudentBySchoolIdAndJsonParams_result result = new findStudentBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findStudentBySchoolIdAndJsonParams_result result = new findStudentBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStudentBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findStudentBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findJobTypeBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findJobTypeBySchoolIdAndJsonParams_args, java.lang.String> {
      public findJobTypeBySchoolIdAndJsonParams() {
        super("findJobTypeBySchoolIdAndJsonParams");
      }

      public findJobTypeBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findJobTypeBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findJobTypeBySchoolIdAndJsonParams_result result = new findJobTypeBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findJobTypeBySchoolIdAndJsonParams_result result = new findJobTypeBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findJobTypeBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findJobTypeBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findJobBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findJobBySchoolIdAndJsonParams_args, java.lang.String> {
      public findJobBySchoolIdAndJsonParams() {
        super("findJobBySchoolIdAndJsonParams");
      }

      public findJobBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findJobBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findJobBySchoolIdAndJsonParams_result result = new findJobBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findJobBySchoolIdAndJsonParams_result result = new findJobBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findJobBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findJobBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findUserBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserBySchoolIdAndJsonParams_args, java.lang.String> {
      public findUserBySchoolIdAndJsonParams() {
        super("findUserBySchoolIdAndJsonParams");
      }

      public findUserBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findUserBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserBySchoolIdAndJsonParams_result result = new findUserBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserBySchoolIdAndJsonParams_result result = new findUserBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findCalendarBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCalendarBySchoolIdAndJsonParams_args, java.lang.String> {
      public findCalendarBySchoolIdAndJsonParams() {
        super("findCalendarBySchoolIdAndJsonParams");
      }

      public findCalendarBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findCalendarBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findCalendarBySchoolIdAndJsonParams_result result = new findCalendarBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findCalendarBySchoolIdAndJsonParams_result result = new findCalendarBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCalendarBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findCalendarBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findStaffBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStaffBySchoolIdAndJsonParams_args, java.lang.String> {
      public findStaffBySchoolIdAndJsonParams() {
        super("findStaffBySchoolIdAndJsonParams");
      }

      public findStaffBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findStaffBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findStaffBySchoolIdAndJsonParams_result result = new findStaffBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findStaffBySchoolIdAndJsonParams_result result = new findStaffBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStaffBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findStaffBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findHeadTeacherBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findHeadTeacherBySchoolIdAndJsonParams_args, java.lang.String> {
      public findHeadTeacherBySchoolIdAndJsonParams() {
        super("findHeadTeacherBySchoolIdAndJsonParams");
      }

      public findHeadTeacherBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findHeadTeacherBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findHeadTeacherBySchoolIdAndJsonParams_result result = new findHeadTeacherBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findHeadTeacherBySchoolIdAndJsonParams_result result = new findHeadTeacherBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findHeadTeacherBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findHeadTeacherBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findClassUserDetailBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findClassUserDetailBySchoolIdAndJsonParams_args, java.lang.String> {
      public findClassUserDetailBySchoolIdAndJsonParams() {
        super("findClassUserDetailBySchoolIdAndJsonParams");
      }

      public findClassUserDetailBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findClassUserDetailBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findClassUserDetailBySchoolIdAndJsonParams_result result = new findClassUserDetailBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findClassUserDetailBySchoolIdAndJsonParams_result result = new findClassUserDetailBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findClassUserDetailBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findClassUserDetailBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findBriefUserByV5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findBriefUserByV5_args, java.lang.String> {
      public findBriefUserByV5() {
        super("findBriefUserByV5");
      }

      public findBriefUserByV5_args getEmptyArgsInstance() {
        return new findBriefUserByV5_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findBriefUserByV5_result result = new findBriefUserByV5_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findBriefUserByV5_result result = new findBriefUserByV5_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findBriefUserByV5_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findBriefUserByV5(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findNewPageUserBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findNewPageUserBy_args, java.lang.String> {
      public findNewPageUserBy() {
        super("findNewPageUserBy");
      }

      public findNewPageUserBy_args getEmptyArgsInstance() {
        return new findNewPageUserBy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findNewPageUserBy_result result = new findNewPageUserBy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findNewPageUserBy_result result = new findNewPageUserBy_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findNewPageUserBy_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findNewPageUserBy(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args, java.lang.String> {
      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams() {
        super("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams");
      }

      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args getEmptyArgsInstance() {
        return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result result = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result result = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams(args.schoolId, args.officeIdList, args.classIdList, args.jsonParams,resultHandler);
      }
    }

    public static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args, java.lang.String> {
      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams() {
        super("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams");
      }

      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args getEmptyArgsInstance() {
        return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result result = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result result = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams(args.schoolId, args.classId, args.jsonParams,resultHandler);
      }
    }

    public static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args, java.lang.String> {
      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams() {
        super("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams");
      }

      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args getEmptyArgsInstance() {
        return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result result = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams(args.schoolId, args.preSyncTime, args.jsonParams,resultHandler);
      }
    }

    public static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args, java.lang.String> {
      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams() {
        super("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams");
      }

      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args getEmptyArgsInstance() {
        return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result result = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result result = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams(args.schoolId, args.officeId, args.jsonParams,resultHandler);
      }
    }

    public static class findAbnormalUserIdListBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAbnormalUserIdListBySchoolId_args, java.lang.String> {
      public findAbnormalUserIdListBySchoolId() {
        super("findAbnormalUserIdListBySchoolId");
      }

      public findAbnormalUserIdListBySchoolId_args getEmptyArgsInstance() {
        return new findAbnormalUserIdListBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findAbnormalUserIdListBySchoolId_result result = new findAbnormalUserIdListBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findAbnormalUserIdListBySchoolId_result result = new findAbnormalUserIdListBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAbnormalUserIdListBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findAbnormalUserIdListBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findSemesterBySchoolId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSemesterBySchoolId_args, java.lang.String> {
      public findSemesterBySchoolId() {
        super("findSemesterBySchoolId");
      }

      public findSemesterBySchoolId_args getEmptyArgsInstance() {
        return new findSemesterBySchoolId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findSemesterBySchoolId_result result = new findSemesterBySchoolId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSemesterBySchoolId_result result = new findSemesterBySchoolId_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSemesterBySchoolId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findSemesterBySchoolId(args.schoolId,resultHandler);
      }
    }

    public static class findRoleBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRoleBySchoolIdAndJsonParams_args, java.lang.String> {
      public findRoleBySchoolIdAndJsonParams() {
        super("findRoleBySchoolIdAndJsonParams");
      }

      public findRoleBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findRoleBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findRoleBySchoolIdAndJsonParams_result result = new findRoleBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findRoleBySchoolIdAndJsonParams_result result = new findRoleBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRoleBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findRoleBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findSysRoleBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSysRoleBySchoolIdAndJsonParams_args, java.lang.String> {
      public findSysRoleBySchoolIdAndJsonParams() {
        super("findSysRoleBySchoolIdAndJsonParams");
      }

      public findSysRoleBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findSysRoleBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findSysRoleBySchoolIdAndJsonParams_result result = new findSysRoleBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findSysRoleBySchoolIdAndJsonParams_result result = new findSysRoleBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSysRoleBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findSysRoleBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findBusiClassBySchoolIdAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findBusiClassBySchoolIdAndJsonParams_args, java.lang.String> {
      public findBusiClassBySchoolIdAndJsonParams() {
        super("findBusiClassBySchoolIdAndJsonParams");
      }

      public findBusiClassBySchoolIdAndJsonParams_args getEmptyArgsInstance() {
        return new findBusiClassBySchoolIdAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findBusiClassBySchoolIdAndJsonParams_result result = new findBusiClassBySchoolIdAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findBusiClassBySchoolIdAndJsonParams_result result = new findBusiClassBySchoolIdAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findBusiClassBySchoolIdAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findBusiClassBySchoolIdAndJsonParams(args.schoolId, args.jsonParams,resultHandler);
      }
    }

    public static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args, java.lang.String> {
      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams() {
        super("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams");
      }

      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args getEmptyArgsInstance() {
        return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result result = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result result = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result();
            if (e instanceof ThriftBusinessException) {
              result.ex = (ThriftBusinessException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.findUserJobTypeBySchoolIdAndUserIdListAndJsonParams(args.schoolId, args.userIdList, args.jsonParams,resultHandler);
      }
    }

  }

  public static class findUserByUserId_args implements org.apache.thrift.TBase<findUserByUserId_args, findUserByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserByUserId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserByUserId_argsTupleSchemeFactory();

    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserByUserId_args.class, metaDataMap);
    }

    public findUserByUserId_args() {
    }

    public findUserByUserId_args(
      java.lang.String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserByUserId_args(findUserByUserId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public findUserByUserId_args deepCopy() {
      return new findUserByUserId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findUserByUserId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserByUserId_args)
        return this.equals((findUserByUserId_args)that);
      return false;
    }

    public boolean equals(findUserByUserId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserByUserId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserId_argsStandardScheme getScheme() {
        return new findUserByUserId_argsStandardScheme();
      }
    }

    private static class findUserByUserId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserByUserId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserId_argsTupleScheme getScheme() {
        return new findUserByUserId_argsTupleScheme();
      }
    }

    private static class findUserByUserId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserByUserId_result implements org.apache.thrift.TBase<findUserByUserId_result, findUserByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserByUserId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserByUserId_resultTupleSchemeFactory();

    public SysUserThrift success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserThrift.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserByUserId_result.class, metaDataMap);
    }

    public findUserByUserId_result() {
    }

    public findUserByUserId_result(
      SysUserThrift success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserByUserId_result(findUserByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysUserThrift(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserByUserId_result deepCopy() {
      return new findUserByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public SysUserThrift getSuccess() {
      return this.success;
    }

    public findUserByUserId_result setSuccess(SysUserThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserByUserId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysUserThrift)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserByUserId_result)
        return this.equals((findUserByUserId_result)that);
      return false;
    }

    public boolean equals(findUserByUserId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserByUserId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserId_resultStandardScheme getScheme() {
        return new findUserByUserId_resultStandardScheme();
      }
    }

    private static class findUserByUserId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysUserThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserByUserId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserId_resultTupleScheme getScheme() {
        return new findUserByUserId_resultTupleScheme();
      }
    }

    private static class findUserByUserId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SysUserThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndOtherParams_args implements org.apache.thrift.TBase<findUserBySchoolIdAndOtherParams_args, findUserBySchoolIdAndOtherParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndOtherParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndOtherParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndOtherParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndOtherParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String realName; // required
    public java.lang.String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      REAL_NAME((short)2, "realName"),
      USERNAME((short)3, "username");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // REAL_NAME
            return REAL_NAME;
          case 3: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndOtherParams_args.class, metaDataMap);
    }

    public findUserBySchoolIdAndOtherParams_args() {
    }

    public findUserBySchoolIdAndOtherParams_args(
      java.lang.String schoolId,
      java.lang.String realName,
      java.lang.String username)
    {
      this();
      this.schoolId = schoolId;
      this.realName = realName;
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndOtherParams_args(findUserBySchoolIdAndOtherParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetRealName()) {
        this.realName = other.realName;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public findUserBySchoolIdAndOtherParams_args deepCopy() {
      return new findUserBySchoolIdAndOtherParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.realName = null;
      this.username = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserBySchoolIdAndOtherParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getRealName() {
      return this.realName;
    }

    public findUserBySchoolIdAndOtherParams_args setRealName(java.lang.String realName) {
      this.realName = realName;
      return this;
    }

    public void unsetRealName() {
      this.realName = null;
    }

    /** Returns true if field realName is set (has been assigned a value) and false otherwise */
    public boolean isSetRealName() {
      return this.realName != null;
    }

    public void setRealNameIsSet(boolean value) {
      if (!value) {
        this.realName = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public findUserBySchoolIdAndOtherParams_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case REAL_NAME:
        if (value == null) {
          unsetRealName();
        } else {
          setRealName((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case REAL_NAME:
        return getRealName();

      case USERNAME:
        return getUsername();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case REAL_NAME:
        return isSetRealName();
      case USERNAME:
        return isSetUsername();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndOtherParams_args)
        return this.equals((findUserBySchoolIdAndOtherParams_args)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndOtherParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_realName = true && this.isSetRealName();
      boolean that_present_realName = true && that.isSetRealName();
      if (this_present_realName || that_present_realName) {
        if (!(this_present_realName && that_present_realName))
          return false;
        if (!this.realName.equals(that.realName))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRealName()) ? 131071 : 524287);
      if (isSetRealName())
        hashCode = hashCode * 8191 + realName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndOtherParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRealName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndOtherParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("realName:");
      if (this.realName == null) {
        sb.append("null");
      } else {
        sb.append(this.realName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndOtherParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherParams_argsStandardScheme getScheme() {
        return new findUserBySchoolIdAndOtherParams_argsStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndOtherParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REAL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.realName = iprot.readString();
                struct.setRealNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.realName != null) {
          oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
          oprot.writeString(struct.realName);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndOtherParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherParams_argsTupleScheme getScheme() {
        return new findUserBySchoolIdAndOtherParams_argsTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndOtherParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetRealName()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetRealName()) {
          oprot.writeString(struct.realName);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.realName = iprot.readString();
          struct.setRealNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndOtherParams_result implements org.apache.thrift.TBase<findUserBySchoolIdAndOtherParams_result, findUserBySchoolIdAndOtherParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndOtherParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndOtherParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndOtherParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndOtherParams_resultTupleSchemeFactory();

    public java.util.List<SysUserThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndOtherParams_result.class, metaDataMap);
    }

    public findUserBySchoolIdAndOtherParams_result() {
    }

    public findUserBySchoolIdAndOtherParams_result(
      java.util.List<SysUserThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndOtherParams_result(findUserBySchoolIdAndOtherParams_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysUserThrift> __this__success = new java.util.ArrayList<SysUserThrift>(other.success.size());
        for (SysUserThrift other_element : other.success) {
          __this__success.add(new SysUserThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserBySchoolIdAndOtherParams_result deepCopy() {
      return new findUserBySchoolIdAndOtherParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysUserThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysUserThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysUserThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysUserThrift> getSuccess() {
      return this.success;
    }

    public findUserBySchoolIdAndOtherParams_result setSuccess(java.util.List<SysUserThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserBySchoolIdAndOtherParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysUserThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndOtherParams_result)
        return this.equals((findUserBySchoolIdAndOtherParams_result)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndOtherParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndOtherParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndOtherParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndOtherParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherParams_resultStandardScheme getScheme() {
        return new findUserBySchoolIdAndOtherParams_resultStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndOtherParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysUserThrift>(_list16.size);
                  SysUserThrift _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new SysUserThrift();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysUserThrift _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndOtherParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherParams_resultTupleScheme getScheme() {
        return new findUserBySchoolIdAndOtherParams_resultTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndOtherParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysUserThrift _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysUserThrift>(_list21.size);
            SysUserThrift _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new SysUserThrift();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserByUserIdList_args implements org.apache.thrift.TBase<findUserByUserIdList_args, findUserByUserIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserByUserIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserByUserIdList_args");

    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserByUserIdList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserByUserIdList_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> userIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID_LIST((short)1, "userIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID_LIST
            return USER_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserByUserIdList_args.class, metaDataMap);
    }

    public findUserByUserIdList_args() {
    }

    public findUserByUserIdList_args(
      java.util.List<java.lang.String> userIdList)
    {
      this();
      this.userIdList = userIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserByUserIdList_args(findUserByUserIdList_args other) {
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
    }

    public findUserByUserIdList_args deepCopy() {
      return new findUserByUserIdList_args(this);
    }

    @Override
    public void clear() {
      this.userIdList = null;
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findUserByUserIdList_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID_LIST:
        return getUserIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID_LIST:
        return isSetUserIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserByUserIdList_args)
        return this.equals((findUserByUserIdList_args)that);
      return false;
    }

    public boolean equals(findUserByUserIdList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserByUserIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserByUserIdList_args(");
      boolean first = true;

      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserByUserIdList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserIdList_argsStandardScheme getScheme() {
        return new findUserByUserIdList_argsStandardScheme();
      }
    }

    private static class findUserByUserIdList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserByUserIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserByUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list24.size);
                  java.lang.String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.userIdList.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserByUserIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter27 : struct.userIdList)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserByUserIdList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserIdList_argsTupleScheme getScheme() {
        return new findUserByUserIdList_argsTupleScheme();
      }
    }

    private static class findUserByUserIdList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserByUserIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserByUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter28 : struct.userIdList)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserByUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list29.size);
            java.lang.String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.userIdList.add(_elem30);
            }
          }
          struct.setUserIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserByUserIdList_result implements org.apache.thrift.TBase<findUserByUserIdList_result, findUserByUserIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserByUserIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserByUserIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserByUserIdList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserByUserIdList_resultTupleSchemeFactory();

    public java.util.List<SysUserThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserByUserIdList_result.class, metaDataMap);
    }

    public findUserByUserIdList_result() {
    }

    public findUserByUserIdList_result(
      java.util.List<SysUserThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserByUserIdList_result(findUserByUserIdList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysUserThrift> __this__success = new java.util.ArrayList<SysUserThrift>(other.success.size());
        for (SysUserThrift other_element : other.success) {
          __this__success.add(new SysUserThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserByUserIdList_result deepCopy() {
      return new findUserByUserIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysUserThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysUserThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysUserThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysUserThrift> getSuccess() {
      return this.success;
    }

    public findUserByUserIdList_result setSuccess(java.util.List<SysUserThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserByUserIdList_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysUserThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserByUserIdList_result)
        return this.equals((findUserByUserIdList_result)that);
      return false;
    }

    public boolean equals(findUserByUserIdList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserByUserIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserByUserIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserByUserIdList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserIdList_resultStandardScheme getScheme() {
        return new findUserByUserIdList_resultStandardScheme();
      }
    }

    private static class findUserByUserIdList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserByUserIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserByUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysUserThrift>(_list32.size);
                  SysUserThrift _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new SysUserThrift();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserByUserIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysUserThrift _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserByUserIdList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByUserIdList_resultTupleScheme getScheme() {
        return new findUserByUserIdList_resultTupleScheme();
      }
    }

    private static class findUserByUserIdList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserByUserIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserByUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysUserThrift _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserByUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysUserThrift>(_list37.size);
            SysUserThrift _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new SysUserThrift();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndRealNameLike_args implements org.apache.thrift.TBase<findUserBySchoolIdAndRealNameLike_args, findUserBySchoolIdAndRealNameLike_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndRealNameLike_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndRealNameLike_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndRealNameLike_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndRealNameLike_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String realName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      REAL_NAME((short)2, "realName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // REAL_NAME
            return REAL_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndRealNameLike_args.class, metaDataMap);
    }

    public findUserBySchoolIdAndRealNameLike_args() {
    }

    public findUserBySchoolIdAndRealNameLike_args(
      java.lang.String schoolId,
      java.lang.String realName)
    {
      this();
      this.schoolId = schoolId;
      this.realName = realName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndRealNameLike_args(findUserBySchoolIdAndRealNameLike_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetRealName()) {
        this.realName = other.realName;
      }
    }

    public findUserBySchoolIdAndRealNameLike_args deepCopy() {
      return new findUserBySchoolIdAndRealNameLike_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.realName = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserBySchoolIdAndRealNameLike_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getRealName() {
      return this.realName;
    }

    public findUserBySchoolIdAndRealNameLike_args setRealName(java.lang.String realName) {
      this.realName = realName;
      return this;
    }

    public void unsetRealName() {
      this.realName = null;
    }

    /** Returns true if field realName is set (has been assigned a value) and false otherwise */
    public boolean isSetRealName() {
      return this.realName != null;
    }

    public void setRealNameIsSet(boolean value) {
      if (!value) {
        this.realName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case REAL_NAME:
        if (value == null) {
          unsetRealName();
        } else {
          setRealName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case REAL_NAME:
        return getRealName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case REAL_NAME:
        return isSetRealName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndRealNameLike_args)
        return this.equals((findUserBySchoolIdAndRealNameLike_args)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndRealNameLike_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_realName = true && this.isSetRealName();
      boolean that_present_realName = true && that.isSetRealName();
      if (this_present_realName || that_present_realName) {
        if (!(this_present_realName && that_present_realName))
          return false;
        if (!this.realName.equals(that.realName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRealName()) ? 131071 : 524287);
      if (isSetRealName())
        hashCode = hashCode * 8191 + realName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndRealNameLike_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRealName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndRealNameLike_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("realName:");
      if (this.realName == null) {
        sb.append("null");
      } else {
        sb.append(this.realName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndRealNameLike_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndRealNameLike_argsStandardScheme getScheme() {
        return new findUserBySchoolIdAndRealNameLike_argsStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndRealNameLike_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndRealNameLike_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndRealNameLike_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REAL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.realName = iprot.readString();
                struct.setRealNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndRealNameLike_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.realName != null) {
          oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
          oprot.writeString(struct.realName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndRealNameLike_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndRealNameLike_argsTupleScheme getScheme() {
        return new findUserBySchoolIdAndRealNameLike_argsTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndRealNameLike_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndRealNameLike_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndRealNameLike_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetRealName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetRealName()) {
          oprot.writeString(struct.realName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndRealNameLike_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.realName = iprot.readString();
          struct.setRealNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndRealNameLike_result implements org.apache.thrift.TBase<findUserBySchoolIdAndRealNameLike_result, findUserBySchoolIdAndRealNameLike_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndRealNameLike_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndRealNameLike_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndRealNameLike_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndRealNameLike_resultTupleSchemeFactory();

    public java.util.List<SysUserThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndRealNameLike_result.class, metaDataMap);
    }

    public findUserBySchoolIdAndRealNameLike_result() {
    }

    public findUserBySchoolIdAndRealNameLike_result(
      java.util.List<SysUserThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndRealNameLike_result(findUserBySchoolIdAndRealNameLike_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysUserThrift> __this__success = new java.util.ArrayList<SysUserThrift>(other.success.size());
        for (SysUserThrift other_element : other.success) {
          __this__success.add(new SysUserThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserBySchoolIdAndRealNameLike_result deepCopy() {
      return new findUserBySchoolIdAndRealNameLike_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysUserThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysUserThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysUserThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysUserThrift> getSuccess() {
      return this.success;
    }

    public findUserBySchoolIdAndRealNameLike_result setSuccess(java.util.List<SysUserThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserBySchoolIdAndRealNameLike_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysUserThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndRealNameLike_result)
        return this.equals((findUserBySchoolIdAndRealNameLike_result)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndRealNameLike_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndRealNameLike_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndRealNameLike_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndRealNameLike_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndRealNameLike_resultStandardScheme getScheme() {
        return new findUserBySchoolIdAndRealNameLike_resultStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndRealNameLike_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndRealNameLike_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndRealNameLike_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysUserThrift>(_list40.size);
                  SysUserThrift _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new SysUserThrift();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndRealNameLike_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysUserThrift _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndRealNameLike_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndRealNameLike_resultTupleScheme getScheme() {
        return new findUserBySchoolIdAndRealNameLike_resultTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndRealNameLike_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndRealNameLike_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndRealNameLike_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysUserThrift _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndRealNameLike_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysUserThrift>(_list45.size);
            SysUserThrift _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new SysUserThrift();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPageUser_args implements org.apache.thrift.TBase<findPageUser_args, findPageUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPageUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPageUser_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OFFICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("officeId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPageUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPageUser_argsTupleSchemeFactory();

    public int pageNum; // required
    public int pageSize; // required
    public java.lang.String schoolId; // required
    public java.lang.String officeId; // required
    public java.lang.String groupType; // required
    public java.lang.String username; // required
    public java.lang.String realName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum"),
      PAGE_SIZE((short)2, "pageSize"),
      SCHOOL_ID((short)3, "schoolId"),
      OFFICE_ID((short)4, "officeId"),
      GROUP_TYPE((short)5, "groupType"),
      USERNAME((short)6, "username"),
      REAL_NAME((short)7, "realName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          case 3: // SCHOOL_ID
            return SCHOOL_ID;
          case 4: // OFFICE_ID
            return OFFICE_ID;
          case 5: // GROUP_TYPE
            return GROUP_TYPE;
          case 6: // USERNAME
            return USERNAME;
          case 7: // REAL_NAME
            return REAL_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFICE_ID, new org.apache.thrift.meta_data.FieldMetaData("officeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPageUser_args.class, metaDataMap);
    }

    public findPageUser_args() {
    }

    public findPageUser_args(
      int pageNum,
      int pageSize,
      java.lang.String schoolId,
      java.lang.String officeId,
      java.lang.String groupType,
      java.lang.String username,
      java.lang.String realName)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.schoolId = schoolId;
      this.officeId = officeId;
      this.groupType = groupType;
      this.username = username;
      this.realName = realName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPageUser_args(findPageUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetOfficeId()) {
        this.officeId = other.officeId;
      }
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRealName()) {
        this.realName = other.realName;
      }
    }

    public findPageUser_args deepCopy() {
      return new findPageUser_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.schoolId = null;
      this.officeId = null;
      this.groupType = null;
      this.username = null;
      this.realName = null;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public findPageUser_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPageUser_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findPageUser_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getOfficeId() {
      return this.officeId;
    }

    public findPageUser_args setOfficeId(java.lang.String officeId) {
      this.officeId = officeId;
      return this;
    }

    public void unsetOfficeId() {
      this.officeId = null;
    }

    /** Returns true if field officeId is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeId() {
      return this.officeId != null;
    }

    public void setOfficeIdIsSet(boolean value) {
      if (!value) {
        this.officeId = null;
      }
    }

    public java.lang.String getGroupType() {
      return this.groupType;
    }

    public findPageUser_args setGroupType(java.lang.String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public findPageUser_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getRealName() {
      return this.realName;
    }

    public findPageUser_args setRealName(java.lang.String realName) {
      this.realName = realName;
      return this;
    }

    public void unsetRealName() {
      this.realName = null;
    }

    /** Returns true if field realName is set (has been assigned a value) and false otherwise */
    public boolean isSetRealName() {
      return this.realName != null;
    }

    public void setRealNameIsSet(boolean value) {
      if (!value) {
        this.realName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OFFICE_ID:
        if (value == null) {
          unsetOfficeId();
        } else {
          setOfficeId((java.lang.String)value);
        }
        break;

      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case REAL_NAME:
        if (value == null) {
          unsetRealName();
        } else {
          setRealName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return getPageNum();

      case PAGE_SIZE:
        return getPageSize();

      case SCHOOL_ID:
        return getSchoolId();

      case OFFICE_ID:
        return getOfficeId();

      case GROUP_TYPE:
        return getGroupType();

      case USERNAME:
        return getUsername();

      case REAL_NAME:
        return getRealName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      case SCHOOL_ID:
        return isSetSchoolId();
      case OFFICE_ID:
        return isSetOfficeId();
      case GROUP_TYPE:
        return isSetGroupType();
      case USERNAME:
        return isSetUsername();
      case REAL_NAME:
        return isSetRealName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPageUser_args)
        return this.equals((findPageUser_args)that);
      return false;
    }

    public boolean equals(findPageUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_officeId = true && this.isSetOfficeId();
      boolean that_present_officeId = true && that.isSetOfficeId();
      if (this_present_officeId || that_present_officeId) {
        if (!(this_present_officeId && that_present_officeId))
          return false;
        if (!this.officeId.equals(that.officeId))
          return false;
      }

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_realName = true && this.isSetRealName();
      boolean that_present_realName = true && that.isSetRealName();
      if (this_present_realName || that_present_realName) {
        if (!(this_present_realName && that_present_realName))
          return false;
        if (!this.realName.equals(that.realName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + pageNum;

      hashCode = hashCode * 8191 + pageSize;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOfficeId()) ? 131071 : 524287);
      if (isSetOfficeId())
        hashCode = hashCode * 8191 + officeId.hashCode();

      hashCode = hashCode * 8191 + ((isSetGroupType()) ? 131071 : 524287);
      if (isSetGroupType())
        hashCode = hashCode * 8191 + groupType.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetRealName()) ? 131071 : 524287);
      if (isSetRealName())
        hashCode = hashCode * 8191 + realName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPageUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOfficeId()).compareTo(other.isSetOfficeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeId, other.officeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGroupType()).compareTo(other.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, other.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRealName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPageUser_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("officeId:");
      if (this.officeId == null) {
        sb.append("null");
      } else {
        sb.append(this.officeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("realName:");
      if (this.realName == null) {
        sb.append("null");
      } else {
        sb.append(this.realName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPageUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUser_argsStandardScheme getScheme() {
        return new findPageUser_argsStandardScheme();
      }
    }

    private static class findPageUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPageUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPageUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.officeId = iprot.readString();
                struct.setOfficeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // REAL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.realName = iprot.readString();
                struct.setRealNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPageUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.officeId != null) {
          oprot.writeFieldBegin(OFFICE_ID_FIELD_DESC);
          oprot.writeString(struct.officeId);
          oprot.writeFieldEnd();
        }
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.realName != null) {
          oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
          oprot.writeString(struct.realName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPageUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUser_argsTupleScheme getScheme() {
        return new findPageUser_argsTupleScheme();
      }
    }

    private static class findPageUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPageUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPageUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        if (struct.isSetPageSize()) {
          optionals.set(1);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(2);
        }
        if (struct.isSetOfficeId()) {
          optionals.set(3);
        }
        if (struct.isSetGroupType()) {
          optionals.set(4);
        }
        if (struct.isSetUsername()) {
          optionals.set(5);
        }
        if (struct.isSetRealName()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOfficeId()) {
          oprot.writeString(struct.officeId);
        }
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetRealName()) {
          oprot.writeString(struct.realName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPageUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.officeId = iprot.readString();
          struct.setOfficeIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.realName = iprot.readString();
          struct.setRealNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPageUser_result implements org.apache.thrift.TBase<findPageUser_result, findPageUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPageUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPageUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPageUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPageUser_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPageUser_result.class, metaDataMap);
    }

    public findPageUser_result() {
    }

    public findPageUser_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPageUser_result(findPageUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findPageUser_result deepCopy() {
      return new findPageUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findPageUser_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findPageUser_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPageUser_result)
        return this.equals((findPageUser_result)that);
      return false;
    }

    public boolean equals(findPageUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPageUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPageUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPageUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUser_resultStandardScheme getScheme() {
        return new findPageUser_resultStandardScheme();
      }
    }

    private static class findPageUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPageUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPageUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPageUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPageUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUser_resultTupleScheme getScheme() {
        return new findPageUser_resultTupleScheme();
      }
    }

    private static class findPageUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPageUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPageUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPageUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPageUserWithJsonParams_args implements org.apache.thrift.TBase<findPageUserWithJsonParams_args, findPageUserWithJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPageUserWithJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPageUserWithJsonParams_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPageUserWithJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPageUserWithJsonParams_argsTupleSchemeFactory();

    public int pageNum; // required
    public int pageSize; // required
    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum"),
      PAGE_SIZE((short)2, "pageSize"),
      SCHOOL_ID((short)3, "schoolId"),
      JSON_PARAMS((short)4, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          case 3: // SCHOOL_ID
            return SCHOOL_ID;
          case 4: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPageUserWithJsonParams_args.class, metaDataMap);
    }

    public findPageUserWithJsonParams_args() {
    }

    public findPageUserWithJsonParams_args(
      int pageNum,
      int pageSize,
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPageUserWithJsonParams_args(findPageUserWithJsonParams_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findPageUserWithJsonParams_args deepCopy() {
      return new findPageUserWithJsonParams_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.schoolId = null;
      this.jsonParams = null;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public findPageUserWithJsonParams_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPageUserWithJsonParams_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findPageUserWithJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findPageUserWithJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return getPageNum();

      case PAGE_SIZE:
        return getPageSize();

      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPageUserWithJsonParams_args)
        return this.equals((findPageUserWithJsonParams_args)that);
      return false;
    }

    public boolean equals(findPageUserWithJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + pageNum;

      hashCode = hashCode * 8191 + pageSize;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPageUserWithJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPageUserWithJsonParams_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPageUserWithJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUserWithJsonParams_argsStandardScheme getScheme() {
        return new findPageUserWithJsonParams_argsStandardScheme();
      }
    }

    private static class findPageUserWithJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPageUserWithJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPageUserWithJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPageUserWithJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPageUserWithJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUserWithJsonParams_argsTupleScheme getScheme() {
        return new findPageUserWithJsonParams_argsTupleScheme();
      }
    }

    private static class findPageUserWithJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPageUserWithJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPageUserWithJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        if (struct.isSetPageSize()) {
          optionals.set(1);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(2);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPageUserWithJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPageUserWithJsonParams_result implements org.apache.thrift.TBase<findPageUserWithJsonParams_result, findPageUserWithJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPageUserWithJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPageUserWithJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPageUserWithJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPageUserWithJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPageUserWithJsonParams_result.class, metaDataMap);
    }

    public findPageUserWithJsonParams_result() {
    }

    public findPageUserWithJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPageUserWithJsonParams_result(findPageUserWithJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findPageUserWithJsonParams_result deepCopy() {
      return new findPageUserWithJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findPageUserWithJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findPageUserWithJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPageUserWithJsonParams_result)
        return this.equals((findPageUserWithJsonParams_result)that);
      return false;
    }

    public boolean equals(findPageUserWithJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPageUserWithJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPageUserWithJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPageUserWithJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUserWithJsonParams_resultStandardScheme getScheme() {
        return new findPageUserWithJsonParams_resultStandardScheme();
      }
    }

    private static class findPageUserWithJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPageUserWithJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPageUserWithJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPageUserWithJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPageUserWithJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPageUserWithJsonParams_resultTupleScheme getScheme() {
        return new findPageUserWithJsonParams_resultTupleScheme();
      }
    }

    private static class findPageUserWithJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPageUserWithJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPageUserWithJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPageUserWithJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserIdListWithJsonParams_args implements org.apache.thrift.TBase<findUserIdListWithJsonParams_args, findUserIdListWithJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserIdListWithJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserIdListWithJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserIdListWithJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserIdListWithJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserIdListWithJsonParams_args.class, metaDataMap);
    }

    public findUserIdListWithJsonParams_args() {
    }

    public findUserIdListWithJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserIdListWithJsonParams_args(findUserIdListWithJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findUserIdListWithJsonParams_args deepCopy() {
      return new findUserIdListWithJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserIdListWithJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findUserIdListWithJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserIdListWithJsonParams_args)
        return this.equals((findUserIdListWithJsonParams_args)that);
      return false;
    }

    public boolean equals(findUserIdListWithJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserIdListWithJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserIdListWithJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserIdListWithJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdListWithJsonParams_argsStandardScheme getScheme() {
        return new findUserIdListWithJsonParams_argsStandardScheme();
      }
    }

    private static class findUserIdListWithJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserIdListWithJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserIdListWithJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserIdListWithJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserIdListWithJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdListWithJsonParams_argsTupleScheme getScheme() {
        return new findUserIdListWithJsonParams_argsTupleScheme();
      }
    }

    private static class findUserIdListWithJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserIdListWithJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserIdListWithJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserIdListWithJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserIdListWithJsonParams_result implements org.apache.thrift.TBase<findUserIdListWithJsonParams_result, findUserIdListWithJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserIdListWithJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserIdListWithJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserIdListWithJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserIdListWithJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserIdListWithJsonParams_result.class, metaDataMap);
    }

    public findUserIdListWithJsonParams_result() {
    }

    public findUserIdListWithJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserIdListWithJsonParams_result(findUserIdListWithJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserIdListWithJsonParams_result deepCopy() {
      return new findUserIdListWithJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserIdListWithJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserIdListWithJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserIdListWithJsonParams_result)
        return this.equals((findUserIdListWithJsonParams_result)that);
      return false;
    }

    public boolean equals(findUserIdListWithJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserIdListWithJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserIdListWithJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserIdListWithJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdListWithJsonParams_resultStandardScheme getScheme() {
        return new findUserIdListWithJsonParams_resultStandardScheme();
      }
    }

    private static class findUserIdListWithJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserIdListWithJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserIdListWithJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserIdListWithJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserIdListWithJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdListWithJsonParams_resultTupleScheme getScheme() {
        return new findUserIdListWithJsonParams_resultTupleScheme();
      }
    }

    private static class findUserIdListWithJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserIdListWithJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserIdListWithJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserIdListWithJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserByUserId_args implements org.apache.thrift.TBase<updateUserByUserId_args, updateUserByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WX_OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wxOpenId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserByUserId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserByUserId_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String wxOpenId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      WX_OPEN_ID((short)2, "wxOpenId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // WX_OPEN_ID
            return WX_OPEN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WX_OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("wxOpenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserByUserId_args.class, metaDataMap);
    }

    public updateUserByUserId_args() {
    }

    public updateUserByUserId_args(
      java.lang.String userId,
      java.lang.String wxOpenId)
    {
      this();
      this.userId = userId;
      this.wxOpenId = wxOpenId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserByUserId_args(updateUserByUserId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetWxOpenId()) {
        this.wxOpenId = other.wxOpenId;
      }
    }

    public updateUserByUserId_args deepCopy() {
      return new updateUserByUserId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.wxOpenId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public updateUserByUserId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getWxOpenId() {
      return this.wxOpenId;
    }

    public updateUserByUserId_args setWxOpenId(java.lang.String wxOpenId) {
      this.wxOpenId = wxOpenId;
      return this;
    }

    public void unsetWxOpenId() {
      this.wxOpenId = null;
    }

    /** Returns true if field wxOpenId is set (has been assigned a value) and false otherwise */
    public boolean isSetWxOpenId() {
      return this.wxOpenId != null;
    }

    public void setWxOpenIdIsSet(boolean value) {
      if (!value) {
        this.wxOpenId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case WX_OPEN_ID:
        if (value == null) {
          unsetWxOpenId();
        } else {
          setWxOpenId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case WX_OPEN_ID:
        return getWxOpenId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case WX_OPEN_ID:
        return isSetWxOpenId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserByUserId_args)
        return this.equals((updateUserByUserId_args)that);
      return false;
    }

    public boolean equals(updateUserByUserId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_wxOpenId = true && this.isSetWxOpenId();
      boolean that_present_wxOpenId = true && that.isSetWxOpenId();
      if (this_present_wxOpenId || that_present_wxOpenId) {
        if (!(this_present_wxOpenId && that_present_wxOpenId))
          return false;
        if (!this.wxOpenId.equals(that.wxOpenId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetWxOpenId()) ? 131071 : 524287);
      if (isSetWxOpenId())
        hashCode = hashCode * 8191 + wxOpenId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWxOpenId()).compareTo(other.isSetWxOpenId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWxOpenId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxOpenId, other.wxOpenId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wxOpenId:");
      if (this.wxOpenId == null) {
        sb.append("null");
      } else {
        sb.append(this.wxOpenId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserByUserId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserByUserId_argsStandardScheme getScheme() {
        return new updateUserByUserId_argsStandardScheme();
      }
    }

    private static class updateUserByUserId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WX_OPEN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wxOpenId = iprot.readString();
                struct.setWxOpenIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.wxOpenId != null) {
          oprot.writeFieldBegin(WX_OPEN_ID_FIELD_DESC);
          oprot.writeString(struct.wxOpenId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserByUserId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserByUserId_argsTupleScheme getScheme() {
        return new updateUserByUserId_argsTupleScheme();
      }
    }

    private static class updateUserByUserId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetWxOpenId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetWxOpenId()) {
          oprot.writeString(struct.wxOpenId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.wxOpenId = iprot.readString();
          struct.setWxOpenIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserByUserId_result implements org.apache.thrift.TBase<updateUserByUserId_result, updateUserByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserByUserId_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserByUserId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserByUserId_resultTupleSchemeFactory();

    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserByUserId_result.class, metaDataMap);
    }

    public updateUserByUserId_result() {
    }

    public updateUserByUserId_result(
      ThriftBusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserByUserId_result(updateUserByUserId_result other) {
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public updateUserByUserId_result deepCopy() {
      return new updateUserByUserId_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public updateUserByUserId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserByUserId_result)
        return this.equals((updateUserByUserId_result)that);
      return false;
    }

    public boolean equals(updateUserByUserId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserByUserId_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserByUserId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserByUserId_resultStandardScheme getScheme() {
        return new updateUserByUserId_resultStandardScheme();
      }
    }

    private static class updateUserByUserId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserByUserId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserByUserId_resultTupleScheme getScheme() {
        return new updateUserByUserId_resultTupleScheme();
      }
    }

    private static class updateUserByUserId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserByOpenId_args implements org.apache.thrift.TBase<findUserByOpenId_args, findUserByOpenId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserByOpenId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserByOpenId_args");

    private static final org.apache.thrift.protocol.TField OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("openId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserByOpenId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserByOpenId_argsTupleSchemeFactory();

    public java.lang.String openId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPEN_ID((short)1, "openId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPEN_ID
            return OPEN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("openId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserByOpenId_args.class, metaDataMap);
    }

    public findUserByOpenId_args() {
    }

    public findUserByOpenId_args(
      java.lang.String openId)
    {
      this();
      this.openId = openId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserByOpenId_args(findUserByOpenId_args other) {
      if (other.isSetOpenId()) {
        this.openId = other.openId;
      }
    }

    public findUserByOpenId_args deepCopy() {
      return new findUserByOpenId_args(this);
    }

    @Override
    public void clear() {
      this.openId = null;
    }

    public java.lang.String getOpenId() {
      return this.openId;
    }

    public findUserByOpenId_args setOpenId(java.lang.String openId) {
      this.openId = openId;
      return this;
    }

    public void unsetOpenId() {
      this.openId = null;
    }

    /** Returns true if field openId is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenId() {
      return this.openId != null;
    }

    public void setOpenIdIsSet(boolean value) {
      if (!value) {
        this.openId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OPEN_ID:
        if (value == null) {
          unsetOpenId();
        } else {
          setOpenId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OPEN_ID:
        return getOpenId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OPEN_ID:
        return isSetOpenId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserByOpenId_args)
        return this.equals((findUserByOpenId_args)that);
      return false;
    }

    public boolean equals(findUserByOpenId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_openId = true && this.isSetOpenId();
      boolean that_present_openId = true && that.isSetOpenId();
      if (this_present_openId || that_present_openId) {
        if (!(this_present_openId && that_present_openId))
          return false;
        if (!this.openId.equals(that.openId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOpenId()) ? 131071 : 524287);
      if (isSetOpenId())
        hashCode = hashCode * 8191 + openId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserByOpenId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOpenId()).compareTo(other.isSetOpenId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openId, other.openId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserByOpenId_args(");
      boolean first = true;

      sb.append("openId:");
      if (this.openId == null) {
        sb.append("null");
      } else {
        sb.append(this.openId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserByOpenId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByOpenId_argsStandardScheme getScheme() {
        return new findUserByOpenId_argsStandardScheme();
      }
    }

    private static class findUserByOpenId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserByOpenId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserByOpenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPEN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.openId = iprot.readString();
                struct.setOpenIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserByOpenId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.openId != null) {
          oprot.writeFieldBegin(OPEN_ID_FIELD_DESC);
          oprot.writeString(struct.openId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserByOpenId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByOpenId_argsTupleScheme getScheme() {
        return new findUserByOpenId_argsTupleScheme();
      }
    }

    private static class findUserByOpenId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserByOpenId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserByOpenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOpenId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOpenId()) {
          oprot.writeString(struct.openId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserByOpenId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.openId = iprot.readString();
          struct.setOpenIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserByOpenId_result implements org.apache.thrift.TBase<findUserByOpenId_result, findUserByOpenId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserByOpenId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserByOpenId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserByOpenId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserByOpenId_resultTupleSchemeFactory();

    public SysUserThrift success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserThrift.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserByOpenId_result.class, metaDataMap);
    }

    public findUserByOpenId_result() {
    }

    public findUserByOpenId_result(
      SysUserThrift success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserByOpenId_result(findUserByOpenId_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysUserThrift(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserByOpenId_result deepCopy() {
      return new findUserByOpenId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public SysUserThrift getSuccess() {
      return this.success;
    }

    public findUserByOpenId_result setSuccess(SysUserThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserByOpenId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysUserThrift)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserByOpenId_result)
        return this.equals((findUserByOpenId_result)that);
      return false;
    }

    public boolean equals(findUserByOpenId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserByOpenId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserByOpenId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserByOpenId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByOpenId_resultStandardScheme getScheme() {
        return new findUserByOpenId_resultStandardScheme();
      }
    }

    private static class findUserByOpenId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserByOpenId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserByOpenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysUserThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserByOpenId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserByOpenId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserByOpenId_resultTupleScheme getScheme() {
        return new findUserByOpenId_resultTupleScheme();
      }
    }

    private static class findUserByOpenId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserByOpenId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserByOpenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserByOpenId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SysUserThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserIdBySchoolIdAndOtherParams_args implements org.apache.thrift.TBase<findUserIdBySchoolIdAndOtherParams_args, findUserIdBySchoolIdAndOtherParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserIdBySchoolIdAndOtherParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserIdBySchoolIdAndOtherParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("officeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserIdBySchoolIdAndOtherParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserIdBySchoolIdAndOtherParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String officeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      OFFICE_ID((short)2, "officeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // OFFICE_ID
            return OFFICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFICE_ID, new org.apache.thrift.meta_data.FieldMetaData("officeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserIdBySchoolIdAndOtherParams_args.class, metaDataMap);
    }

    public findUserIdBySchoolIdAndOtherParams_args() {
    }

    public findUserIdBySchoolIdAndOtherParams_args(
      java.lang.String schoolId,
      java.lang.String officeId)
    {
      this();
      this.schoolId = schoolId;
      this.officeId = officeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserIdBySchoolIdAndOtherParams_args(findUserIdBySchoolIdAndOtherParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetOfficeId()) {
        this.officeId = other.officeId;
      }
    }

    public findUserIdBySchoolIdAndOtherParams_args deepCopy() {
      return new findUserIdBySchoolIdAndOtherParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.officeId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserIdBySchoolIdAndOtherParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getOfficeId() {
      return this.officeId;
    }

    public findUserIdBySchoolIdAndOtherParams_args setOfficeId(java.lang.String officeId) {
      this.officeId = officeId;
      return this;
    }

    public void unsetOfficeId() {
      this.officeId = null;
    }

    /** Returns true if field officeId is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeId() {
      return this.officeId != null;
    }

    public void setOfficeIdIsSet(boolean value) {
      if (!value) {
        this.officeId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OFFICE_ID:
        if (value == null) {
          unsetOfficeId();
        } else {
          setOfficeId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case OFFICE_ID:
        return getOfficeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case OFFICE_ID:
        return isSetOfficeId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserIdBySchoolIdAndOtherParams_args)
        return this.equals((findUserIdBySchoolIdAndOtherParams_args)that);
      return false;
    }

    public boolean equals(findUserIdBySchoolIdAndOtherParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_officeId = true && this.isSetOfficeId();
      boolean that_present_officeId = true && that.isSetOfficeId();
      if (this_present_officeId || that_present_officeId) {
        if (!(this_present_officeId && that_present_officeId))
          return false;
        if (!this.officeId.equals(that.officeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOfficeId()) ? 131071 : 524287);
      if (isSetOfficeId())
        hashCode = hashCode * 8191 + officeId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserIdBySchoolIdAndOtherParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOfficeId()).compareTo(other.isSetOfficeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeId, other.officeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserIdBySchoolIdAndOtherParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("officeId:");
      if (this.officeId == null) {
        sb.append("null");
      } else {
        sb.append(this.officeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserIdBySchoolIdAndOtherParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdBySchoolIdAndOtherParams_argsStandardScheme getScheme() {
        return new findUserIdBySchoolIdAndOtherParams_argsStandardScheme();
      }
    }

    private static class findUserIdBySchoolIdAndOtherParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserIdBySchoolIdAndOtherParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserIdBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.officeId = iprot.readString();
                struct.setOfficeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserIdBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.officeId != null) {
          oprot.writeFieldBegin(OFFICE_ID_FIELD_DESC);
          oprot.writeString(struct.officeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserIdBySchoolIdAndOtherParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdBySchoolIdAndOtherParams_argsTupleScheme getScheme() {
        return new findUserIdBySchoolIdAndOtherParams_argsTupleScheme();
      }
    }

    private static class findUserIdBySchoolIdAndOtherParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserIdBySchoolIdAndOtherParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserIdBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetOfficeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOfficeId()) {
          oprot.writeString(struct.officeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserIdBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.officeId = iprot.readString();
          struct.setOfficeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserIdBySchoolIdAndOtherParams_result implements org.apache.thrift.TBase<findUserIdBySchoolIdAndOtherParams_result, findUserIdBySchoolIdAndOtherParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserIdBySchoolIdAndOtherParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserIdBySchoolIdAndOtherParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserIdBySchoolIdAndOtherParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserIdBySchoolIdAndOtherParams_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserIdBySchoolIdAndOtherParams_result.class, metaDataMap);
    }

    public findUserIdBySchoolIdAndOtherParams_result() {
    }

    public findUserIdBySchoolIdAndOtherParams_result(
      java.util.List<java.lang.String> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserIdBySchoolIdAndOtherParams_result(findUserIdBySchoolIdAndOtherParams_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserIdBySchoolIdAndOtherParams_result deepCopy() {
      return new findUserIdBySchoolIdAndOtherParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public findUserIdBySchoolIdAndOtherParams_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserIdBySchoolIdAndOtherParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserIdBySchoolIdAndOtherParams_result)
        return this.equals((findUserIdBySchoolIdAndOtherParams_result)that);
      return false;
    }

    public boolean equals(findUserIdBySchoolIdAndOtherParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserIdBySchoolIdAndOtherParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserIdBySchoolIdAndOtherParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserIdBySchoolIdAndOtherParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdBySchoolIdAndOtherParams_resultStandardScheme getScheme() {
        return new findUserIdBySchoolIdAndOtherParams_resultStandardScheme();
      }
    }

    private static class findUserIdBySchoolIdAndOtherParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserIdBySchoolIdAndOtherParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserIdBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list48.size);
                  java.lang.String _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readString();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserIdBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter51 : struct.success)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserIdBySchoolIdAndOtherParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserIdBySchoolIdAndOtherParams_resultTupleScheme getScheme() {
        return new findUserIdBySchoolIdAndOtherParams_resultTupleScheme();
      }
    }

    private static class findUserIdBySchoolIdAndOtherParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserIdBySchoolIdAndOtherParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserIdBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter52 : struct.success)
            {
              oprot.writeString(_iter52);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserIdBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list53.size);
            java.lang.String _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readString();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNjssoStudentByIdIn_args implements org.apache.thrift.TBase<findNjssoStudentByIdIn_args, findNjssoStudentByIdIn_args._Fields>, java.io.Serializable, Cloneable, Comparable<findNjssoStudentByIdIn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNjssoStudentByIdIn_args");

    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNjssoStudentByIdIn_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNjssoStudentByIdIn_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> userIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID_LIST((short)1, "userIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID_LIST
            return USER_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNjssoStudentByIdIn_args.class, metaDataMap);
    }

    public findNjssoStudentByIdIn_args() {
    }

    public findNjssoStudentByIdIn_args(
      java.util.List<java.lang.String> userIdList)
    {
      this();
      this.userIdList = userIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNjssoStudentByIdIn_args(findNjssoStudentByIdIn_args other) {
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
    }

    public findNjssoStudentByIdIn_args deepCopy() {
      return new findNjssoStudentByIdIn_args(this);
    }

    @Override
    public void clear() {
      this.userIdList = null;
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findNjssoStudentByIdIn_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID_LIST:
        return getUserIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID_LIST:
        return isSetUserIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNjssoStudentByIdIn_args)
        return this.equals((findNjssoStudentByIdIn_args)that);
      return false;
    }

    public boolean equals(findNjssoStudentByIdIn_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNjssoStudentByIdIn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNjssoStudentByIdIn_args(");
      boolean first = true;

      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNjssoStudentByIdIn_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNjssoStudentByIdIn_argsStandardScheme getScheme() {
        return new findNjssoStudentByIdIn_argsStandardScheme();
      }
    }

    private static class findNjssoStudentByIdIn_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNjssoStudentByIdIn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNjssoStudentByIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list56.size);
                  java.lang.String _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readString();
                    struct.userIdList.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNjssoStudentByIdIn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter59 : struct.userIdList)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNjssoStudentByIdIn_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNjssoStudentByIdIn_argsTupleScheme getScheme() {
        return new findNjssoStudentByIdIn_argsTupleScheme();
      }
    }

    private static class findNjssoStudentByIdIn_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNjssoStudentByIdIn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNjssoStudentByIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter60 : struct.userIdList)
            {
              oprot.writeString(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNjssoStudentByIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list61.size);
            java.lang.String _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readString();
              struct.userIdList.add(_elem62);
            }
          }
          struct.setUserIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNjssoStudentByIdIn_result implements org.apache.thrift.TBase<findNjssoStudentByIdIn_result, findNjssoStudentByIdIn_result._Fields>, java.io.Serializable, Cloneable, Comparable<findNjssoStudentByIdIn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNjssoStudentByIdIn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNjssoStudentByIdIn_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNjssoStudentByIdIn_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNjssoStudentByIdIn_result.class, metaDataMap);
    }

    public findNjssoStudentByIdIn_result() {
    }

    public findNjssoStudentByIdIn_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNjssoStudentByIdIn_result(findNjssoStudentByIdIn_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findNjssoStudentByIdIn_result deepCopy() {
      return new findNjssoStudentByIdIn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findNjssoStudentByIdIn_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findNjssoStudentByIdIn_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNjssoStudentByIdIn_result)
        return this.equals((findNjssoStudentByIdIn_result)that);
      return false;
    }

    public boolean equals(findNjssoStudentByIdIn_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNjssoStudentByIdIn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNjssoStudentByIdIn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNjssoStudentByIdIn_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNjssoStudentByIdIn_resultStandardScheme getScheme() {
        return new findNjssoStudentByIdIn_resultStandardScheme();
      }
    }

    private static class findNjssoStudentByIdIn_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNjssoStudentByIdIn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNjssoStudentByIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNjssoStudentByIdIn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNjssoStudentByIdIn_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNjssoStudentByIdIn_resultTupleScheme getScheme() {
        return new findNjssoStudentByIdIn_resultTupleScheme();
      }
    }

    private static class findNjssoStudentByIdIn_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNjssoStudentByIdIn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNjssoStudentByIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNjssoStudentByIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentBySchoolIdIdIn_args implements org.apache.thrift.TBase<findStudentBySchoolIdIdIn_args, findStudentBySchoolIdIdIn_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentBySchoolIdIdIn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentBySchoolIdIdIn_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentBySchoolIdIdIn_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentBySchoolIdIdIn_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> userIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID_LIST((short)2, "userIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID_LIST
            return USER_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentBySchoolIdIdIn_args.class, metaDataMap);
    }

    public findStudentBySchoolIdIdIn_args() {
    }

    public findStudentBySchoolIdIdIn_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> userIdList)
    {
      this();
      this.schoolId = schoolId;
      this.userIdList = userIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentBySchoolIdIdIn_args(findStudentBySchoolIdIdIn_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
    }

    public findStudentBySchoolIdIdIn_args deepCopy() {
      return new findStudentBySchoolIdIdIn_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userIdList = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findStudentBySchoolIdIdIn_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findStudentBySchoolIdIdIn_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID_LIST:
        return getUserIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID_LIST:
        return isSetUserIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentBySchoolIdIdIn_args)
        return this.equals((findStudentBySchoolIdIdIn_args)that);
      return false;
    }

    public boolean equals(findStudentBySchoolIdIdIn_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentBySchoolIdIdIn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentBySchoolIdIdIn_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentBySchoolIdIdIn_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdIdIn_argsStandardScheme getScheme() {
        return new findStudentBySchoolIdIdIn_argsStandardScheme();
      }
    }

    private static class findStudentBySchoolIdIdIn_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentBySchoolIdIdIn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentBySchoolIdIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list64.size);
                  java.lang.String _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readString();
                    struct.userIdList.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentBySchoolIdIdIn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter67 : struct.userIdList)
            {
              oprot.writeString(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentBySchoolIdIdIn_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdIdIn_argsTupleScheme getScheme() {
        return new findStudentBySchoolIdIdIn_argsTupleScheme();
      }
    }

    private static class findStudentBySchoolIdIdIn_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentBySchoolIdIdIn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter68 : struct.userIdList)
            {
              oprot.writeString(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list69.size);
            java.lang.String _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readString();
              struct.userIdList.add(_elem70);
            }
          }
          struct.setUserIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentBySchoolIdIdIn_result implements org.apache.thrift.TBase<findStudentBySchoolIdIdIn_result, findStudentBySchoolIdIdIn_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentBySchoolIdIdIn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentBySchoolIdIdIn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentBySchoolIdIdIn_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentBySchoolIdIdIn_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentBySchoolIdIdIn_result.class, metaDataMap);
    }

    public findStudentBySchoolIdIdIn_result() {
    }

    public findStudentBySchoolIdIdIn_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentBySchoolIdIdIn_result(findStudentBySchoolIdIdIn_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findStudentBySchoolIdIdIn_result deepCopy() {
      return new findStudentBySchoolIdIdIn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findStudentBySchoolIdIdIn_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findStudentBySchoolIdIdIn_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentBySchoolIdIdIn_result)
        return this.equals((findStudentBySchoolIdIdIn_result)that);
      return false;
    }

    public boolean equals(findStudentBySchoolIdIdIn_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentBySchoolIdIdIn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentBySchoolIdIdIn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentBySchoolIdIdIn_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdIdIn_resultStandardScheme getScheme() {
        return new findStudentBySchoolIdIdIn_resultStandardScheme();
      }
    }

    private static class findStudentBySchoolIdIdIn_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentBySchoolIdIdIn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentBySchoolIdIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentBySchoolIdIdIn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentBySchoolIdIdIn_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdIdIn_resultTupleScheme getScheme() {
        return new findStudentBySchoolIdIdIn_resultTupleScheme();
      }
    }

    private static class findStudentBySchoolIdIdIn_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentBySchoolIdIdIn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args implements org.apache.thrift.TBase<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAPERS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("papersType", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField PAPERS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("papersNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public byte papersType; // required
    public java.lang.String papersNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      PAPERS_TYPE((short)2, "papersType"),
      PAPERS_NO((short)3, "papersNo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // PAPERS_TYPE
            return PAPERS_TYPE;
          case 3: // PAPERS_NO
            return PAPERS_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAPERSTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAPERS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("papersType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.PAPERS_NO, new org.apache.thrift.meta_data.FieldMetaData("papersNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args.class, metaDataMap);
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args() {
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args(
      java.lang.String schoolId,
      byte papersType,
      java.lang.String papersNo)
    {
      this();
      this.schoolId = schoolId;
      this.papersType = papersType;
      setPapersTypeIsSet(true);
      this.papersNo = papersNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      this.papersType = other.papersType;
      if (other.isSetPapersNo()) {
        this.papersNo = other.papersNo;
      }
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args deepCopy() {
      return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      setPapersTypeIsSet(false);
      this.papersType = 0;
      this.papersNo = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public byte getPapersType() {
      return this.papersType;
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args setPapersType(byte papersType) {
      this.papersType = papersType;
      setPapersTypeIsSet(true);
      return this;
    }

    public void unsetPapersType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAPERSTYPE_ISSET_ID);
    }

    /** Returns true if field papersType is set (has been assigned a value) and false otherwise */
    public boolean isSetPapersType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAPERSTYPE_ISSET_ID);
    }

    public void setPapersTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAPERSTYPE_ISSET_ID, value);
    }

    public java.lang.String getPapersNo() {
      return this.papersNo;
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args setPapersNo(java.lang.String papersNo) {
      this.papersNo = papersNo;
      return this;
    }

    public void unsetPapersNo() {
      this.papersNo = null;
    }

    /** Returns true if field papersNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPapersNo() {
      return this.papersNo != null;
    }

    public void setPapersNoIsSet(boolean value) {
      if (!value) {
        this.papersNo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case PAPERS_TYPE:
        if (value == null) {
          unsetPapersType();
        } else {
          setPapersType((java.lang.Byte)value);
        }
        break;

      case PAPERS_NO:
        if (value == null) {
          unsetPapersNo();
        } else {
          setPapersNo((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case PAPERS_TYPE:
        return getPapersType();

      case PAPERS_NO:
        return getPapersNo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case PAPERS_TYPE:
        return isSetPapersType();
      case PAPERS_NO:
        return isSetPapersNo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args)
        return this.equals((findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args)that);
      return false;
    }

    public boolean equals(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_papersType = true;
      boolean that_present_papersType = true;
      if (this_present_papersType || that_present_papersType) {
        if (!(this_present_papersType && that_present_papersType))
          return false;
        if (this.papersType != that.papersType)
          return false;
      }

      boolean this_present_papersNo = true && this.isSetPapersNo();
      boolean that_present_papersNo = true && that.isSetPapersNo();
      if (this_present_papersNo || that_present_papersNo) {
        if (!(this_present_papersNo && that_present_papersNo))
          return false;
        if (!this.papersNo.equals(that.papersNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + (int) (papersType);

      hashCode = hashCode * 8191 + ((isSetPapersNo()) ? 131071 : 524287);
      if (isSetPapersNo())
        hashCode = hashCode * 8191 + papersNo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPapersType()).compareTo(other.isSetPapersType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPapersType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.papersType, other.papersType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPapersNo()).compareTo(other.isSetPapersNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPapersNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.papersNo, other.papersNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("papersType:");
      sb.append(this.papersType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("papersNo:");
      if (this.papersNo == null) {
        sb.append("null");
      } else {
        sb.append(this.papersNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsStandardScheme getScheme() {
        return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsStandardScheme();
      }
    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAPERS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.papersType = iprot.readByte();
                struct.setPapersTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAPERS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.papersNo = iprot.readString();
                struct.setPapersNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAPERS_TYPE_FIELD_DESC);
        oprot.writeByte(struct.papersType);
        oprot.writeFieldEnd();
        if (struct.papersNo != null) {
          oprot.writeFieldBegin(PAPERS_NO_FIELD_DESC);
          oprot.writeString(struct.papersNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsTupleScheme getScheme() {
        return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsTupleScheme();
      }
    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetPapersType()) {
          optionals.set(1);
        }
        if (struct.isSetPapersNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetPapersType()) {
          oprot.writeByte(struct.papersType);
        }
        if (struct.isSetPapersNo()) {
          oprot.writeString(struct.papersNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.papersType = iprot.readByte();
          struct.setPapersTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.papersNo = iprot.readString();
          struct.setPapersNoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result implements org.apache.thrift.TBase<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result.class, metaDataMap);
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result() {
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result deepCopy() {
      return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result)
        return this.equals((findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result)that);
      return false;
    }

    public boolean equals(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultStandardScheme getScheme() {
        return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultStandardScheme();
      }
    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultTupleScheme getScheme() {
        return new findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultTupleScheme();
      }
    }

    private static class findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolUserBySchoolIdAndPapersTypeAndPapersNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updatePassword_args implements org.apache.thrift.TBase<updatePassword_args, updatePassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePassword_args");

    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePassword_argsTupleSchemeFactory();

    public java.lang.String password; // required
    public java.lang.String newPassword; // required
    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PASSWORD((short)1, "password"),
      NEW_PASSWORD((short)2, "newPassword"),
      USER_ID((short)3, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSWORD
            return PASSWORD;
          case 2: // NEW_PASSWORD
            return NEW_PASSWORD;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePassword_args.class, metaDataMap);
    }

    public updatePassword_args() {
    }

    public updatePassword_args(
      java.lang.String password,
      java.lang.String newPassword,
      java.lang.String userId)
    {
      this();
      this.password = password;
      this.newPassword = newPassword;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePassword_args(updatePassword_args other) {
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetNewPassword()) {
        this.newPassword = other.newPassword;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public updatePassword_args deepCopy() {
      return new updatePassword_args(this);
    }

    @Override
    public void clear() {
      this.password = null;
      this.newPassword = null;
      this.userId = null;
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public updatePassword_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getNewPassword() {
      return this.newPassword;
    }

    public updatePassword_args setNewPassword(java.lang.String newPassword) {
      this.newPassword = newPassword;
      return this;
    }

    public void unsetNewPassword() {
      this.newPassword = null;
    }

    /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPassword() {
      return this.newPassword != null;
    }

    public void setNewPasswordIsSet(boolean value) {
      if (!value) {
        this.newPassword = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public updatePassword_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case NEW_PASSWORD:
        if (value == null) {
          unsetNewPassword();
        } else {
          setNewPassword((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSWORD:
        return getPassword();

      case NEW_PASSWORD:
        return getNewPassword();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PASSWORD:
        return isSetPassword();
      case NEW_PASSWORD:
        return isSetNewPassword();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePassword_args)
        return this.equals((updatePassword_args)that);
      return false;
    }

    public boolean equals(updatePassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_newPassword = true && this.isSetNewPassword();
      boolean that_present_newPassword = true && that.isSetNewPassword();
      if (this_present_newPassword || that_present_newPassword) {
        if (!(this_present_newPassword && that_present_newPassword))
          return false;
        if (!this.newPassword.equals(that.newPassword))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewPassword()) ? 131071 : 524287);
      if (isSetNewPassword())
        hashCode = hashCode * 8191 + newPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updatePassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewPassword()).compareTo(other.isSetNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, other.newPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePassword_args(");
      boolean first = true;

      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPassword:");
      if (this.newPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.newPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePassword_argsStandardScheme getScheme() {
        return new updatePassword_argsStandardScheme();
      }
    }

    private static class updatePassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPassword = iprot.readString();
                struct.setNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.newPassword != null) {
          oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.newPassword);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePassword_argsTupleScheme getScheme() {
        return new updatePassword_argsTupleScheme();
      }
    }

    private static class updatePassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPassword()) {
          optionals.set(0);
        }
        if (struct.isSetNewPassword()) {
          optionals.set(1);
        }
        if (struct.isSetUserId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetNewPassword()) {
          oprot.writeString(struct.newPassword);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newPassword = iprot.readString();
          struct.setNewPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updatePassword_result implements org.apache.thrift.TBase<updatePassword_result, updatePassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePassword_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updatePassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updatePassword_resultTupleSchemeFactory();

    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePassword_result.class, metaDataMap);
    }

    public updatePassword_result() {
    }

    public updatePassword_result(
      ThriftBusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePassword_result(updatePassword_result other) {
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public updatePassword_result deepCopy() {
      return new updatePassword_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public updatePassword_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePassword_result)
        return this.equals((updatePassword_result)that);
      return false;
    }

    public boolean equals(updatePassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updatePassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updatePassword_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePassword_resultStandardScheme getScheme() {
        return new updatePassword_resultStandardScheme();
      }
    }

    private static class updatePassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updatePassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updatePassword_resultTupleScheme getScheme() {
        return new updatePassword_resultTupleScheme();
      }
    }

    private static class updatePassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updatePassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentUserByOfficeIdAndSchoolId_args implements org.apache.thrift.TBase<findStudentUserByOfficeIdAndSchoolId_args, findStudentUserByOfficeIdAndSchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentUserByOfficeIdAndSchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentUserByOfficeIdAndSchoolId_args");

    private static final org.apache.thrift.protocol.TField OFFICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("officeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentUserByOfficeIdAndSchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentUserByOfficeIdAndSchoolId_argsTupleSchemeFactory();

    public java.lang.String officeId; // required
    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OFFICE_ID((short)1, "officeId"),
      SCHOOL_ID((short)2, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OFFICE_ID
            return OFFICE_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OFFICE_ID, new org.apache.thrift.meta_data.FieldMetaData("officeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentUserByOfficeIdAndSchoolId_args.class, metaDataMap);
    }

    public findStudentUserByOfficeIdAndSchoolId_args() {
    }

    public findStudentUserByOfficeIdAndSchoolId_args(
      java.lang.String officeId,
      java.lang.String schoolId)
    {
      this();
      this.officeId = officeId;
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentUserByOfficeIdAndSchoolId_args(findStudentUserByOfficeIdAndSchoolId_args other) {
      if (other.isSetOfficeId()) {
        this.officeId = other.officeId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findStudentUserByOfficeIdAndSchoolId_args deepCopy() {
      return new findStudentUserByOfficeIdAndSchoolId_args(this);
    }

    @Override
    public void clear() {
      this.officeId = null;
      this.schoolId = null;
    }

    public java.lang.String getOfficeId() {
      return this.officeId;
    }

    public findStudentUserByOfficeIdAndSchoolId_args setOfficeId(java.lang.String officeId) {
      this.officeId = officeId;
      return this;
    }

    public void unsetOfficeId() {
      this.officeId = null;
    }

    /** Returns true if field officeId is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeId() {
      return this.officeId != null;
    }

    public void setOfficeIdIsSet(boolean value) {
      if (!value) {
        this.officeId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findStudentUserByOfficeIdAndSchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OFFICE_ID:
        if (value == null) {
          unsetOfficeId();
        } else {
          setOfficeId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OFFICE_ID:
        return getOfficeId();

      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OFFICE_ID:
        return isSetOfficeId();
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentUserByOfficeIdAndSchoolId_args)
        return this.equals((findStudentUserByOfficeIdAndSchoolId_args)that);
      return false;
    }

    public boolean equals(findStudentUserByOfficeIdAndSchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_officeId = true && this.isSetOfficeId();
      boolean that_present_officeId = true && that.isSetOfficeId();
      if (this_present_officeId || that_present_officeId) {
        if (!(this_present_officeId && that_present_officeId))
          return false;
        if (!this.officeId.equals(that.officeId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOfficeId()) ? 131071 : 524287);
      if (isSetOfficeId())
        hashCode = hashCode * 8191 + officeId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentUserByOfficeIdAndSchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOfficeId()).compareTo(other.isSetOfficeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeId, other.officeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentUserByOfficeIdAndSchoolId_args(");
      boolean first = true;

      sb.append("officeId:");
      if (this.officeId == null) {
        sb.append("null");
      } else {
        sb.append(this.officeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentUserByOfficeIdAndSchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentUserByOfficeIdAndSchoolId_argsStandardScheme getScheme() {
        return new findStudentUserByOfficeIdAndSchoolId_argsStandardScheme();
      }
    }

    private static class findStudentUserByOfficeIdAndSchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentUserByOfficeIdAndSchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentUserByOfficeIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OFFICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.officeId = iprot.readString();
                struct.setOfficeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentUserByOfficeIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.officeId != null) {
          oprot.writeFieldBegin(OFFICE_ID_FIELD_DESC);
          oprot.writeString(struct.officeId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentUserByOfficeIdAndSchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentUserByOfficeIdAndSchoolId_argsTupleScheme getScheme() {
        return new findStudentUserByOfficeIdAndSchoolId_argsTupleScheme();
      }
    }

    private static class findStudentUserByOfficeIdAndSchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentUserByOfficeIdAndSchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentUserByOfficeIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOfficeId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOfficeId()) {
          oprot.writeString(struct.officeId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentUserByOfficeIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.officeId = iprot.readString();
          struct.setOfficeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentUserByOfficeIdAndSchoolId_result implements org.apache.thrift.TBase<findStudentUserByOfficeIdAndSchoolId_result, findStudentUserByOfficeIdAndSchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentUserByOfficeIdAndSchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentUserByOfficeIdAndSchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentUserByOfficeIdAndSchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentUserByOfficeIdAndSchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentUserByOfficeIdAndSchoolId_result.class, metaDataMap);
    }

    public findStudentUserByOfficeIdAndSchoolId_result() {
    }

    public findStudentUserByOfficeIdAndSchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentUserByOfficeIdAndSchoolId_result(findStudentUserByOfficeIdAndSchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findStudentUserByOfficeIdAndSchoolId_result deepCopy() {
      return new findStudentUserByOfficeIdAndSchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findStudentUserByOfficeIdAndSchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findStudentUserByOfficeIdAndSchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentUserByOfficeIdAndSchoolId_result)
        return this.equals((findStudentUserByOfficeIdAndSchoolId_result)that);
      return false;
    }

    public boolean equals(findStudentUserByOfficeIdAndSchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentUserByOfficeIdAndSchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentUserByOfficeIdAndSchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentUserByOfficeIdAndSchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentUserByOfficeIdAndSchoolId_resultStandardScheme getScheme() {
        return new findStudentUserByOfficeIdAndSchoolId_resultStandardScheme();
      }
    }

    private static class findStudentUserByOfficeIdAndSchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentUserByOfficeIdAndSchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentUserByOfficeIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentUserByOfficeIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentUserByOfficeIdAndSchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentUserByOfficeIdAndSchoolId_resultTupleScheme getScheme() {
        return new findStudentUserByOfficeIdAndSchoolId_resultTupleScheme();
      }
    }

    private static class findStudentUserByOfficeIdAndSchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentUserByOfficeIdAndSchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentUserByOfficeIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentUserByOfficeIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserInfo_args implements org.apache.thrift.TBase<updateUserInfo_args, updateUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserInfo_args");

    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserInfo_argsTupleSchemeFactory();

    public java.lang.String paramsStr; // required
    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS_STR((short)1, "paramsStr"),
      USER_ID((short)2, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS_STR
            return PARAMS_STR;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserInfo_args.class, metaDataMap);
    }

    public updateUserInfo_args() {
    }

    public updateUserInfo_args(
      java.lang.String paramsStr,
      java.lang.String userId)
    {
      this();
      this.paramsStr = paramsStr;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserInfo_args(updateUserInfo_args other) {
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public updateUserInfo_args deepCopy() {
      return new updateUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.paramsStr = null;
      this.userId = null;
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public updateUserInfo_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public updateUserInfo_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS_STR:
        return getParamsStr();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PARAMS_STR:
        return isSetParamsStr();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserInfo_args)
        return this.equals((updateUserInfo_args)that);
      return false;
    }

    public boolean equals(updateUserInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserInfo_args(");
      boolean first = true;

      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_argsStandardScheme getScheme() {
        return new updateUserInfo_argsStandardScheme();
      }
    }

    private static class updateUserInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_argsTupleScheme getScheme() {
        return new updateUserInfo_argsTupleScheme();
      }
    }

    private static class updateUserInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetParamsStr()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserInfo_result implements org.apache.thrift.TBase<updateUserInfo_result, updateUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserInfo_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserInfo_resultTupleSchemeFactory();

    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserInfo_result.class, metaDataMap);
    }

    public updateUserInfo_result() {
    }

    public updateUserInfo_result(
      ThriftBusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserInfo_result(updateUserInfo_result other) {
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public updateUserInfo_result deepCopy() {
      return new updateUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public updateUserInfo_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserInfo_result)
        return this.equals((updateUserInfo_result)that);
      return false;
    }

    public boolean equals(updateUserInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserInfo_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_resultStandardScheme getScheme() {
        return new updateUserInfo_resultStandardScheme();
      }
    }

    private static class updateUserInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfo_resultTupleScheme getScheme() {
        return new updateUserInfo_resultTupleScheme();
      }
    }

    private static class updateUserInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserInfoByUserIdAndJsonParams_args implements org.apache.thrift.TBase<updateUserInfoByUserIdAndJsonParams_args, updateUserInfoByUserIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserInfoByUserIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserInfoByUserIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserInfoByUserIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserInfoByUserIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String paramsStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PARAMS_STR((short)2, "paramsStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PARAMS_STR
            return PARAMS_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserInfoByUserIdAndJsonParams_args.class, metaDataMap);
    }

    public updateUserInfoByUserIdAndJsonParams_args() {
    }

    public updateUserInfoByUserIdAndJsonParams_args(
      java.lang.String userId,
      java.lang.String paramsStr)
    {
      this();
      this.userId = userId;
      this.paramsStr = paramsStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserInfoByUserIdAndJsonParams_args(updateUserInfoByUserIdAndJsonParams_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
    }

    public updateUserInfoByUserIdAndJsonParams_args deepCopy() {
      return new updateUserInfoByUserIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.paramsStr = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public updateUserInfoByUserIdAndJsonParams_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public updateUserInfoByUserIdAndJsonParams_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case PARAMS_STR:
        return getParamsStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case PARAMS_STR:
        return isSetParamsStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserInfoByUserIdAndJsonParams_args)
        return this.equals((updateUserInfoByUserIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(updateUserInfoByUserIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserInfoByUserIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserInfoByUserIdAndJsonParams_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserInfoByUserIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfoByUserIdAndJsonParams_argsStandardScheme getScheme() {
        return new updateUserInfoByUserIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class updateUserInfoByUserIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserInfoByUserIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserInfoByUserIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserInfoByUserIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserInfoByUserIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfoByUserIdAndJsonParams_argsTupleScheme getScheme() {
        return new updateUserInfoByUserIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class updateUserInfoByUserIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserInfoByUserIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserInfoByUserIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetParamsStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserInfoByUserIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserInfoByUserIdAndJsonParams_result implements org.apache.thrift.TBase<updateUserInfoByUserIdAndJsonParams_result, updateUserInfoByUserIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserInfoByUserIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserInfoByUserIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserInfoByUserIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserInfoByUserIdAndJsonParams_resultTupleSchemeFactory();

    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserInfoByUserIdAndJsonParams_result.class, metaDataMap);
    }

    public updateUserInfoByUserIdAndJsonParams_result() {
    }

    public updateUserInfoByUserIdAndJsonParams_result(
      ThriftBusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserInfoByUserIdAndJsonParams_result(updateUserInfoByUserIdAndJsonParams_result other) {
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public updateUserInfoByUserIdAndJsonParams_result deepCopy() {
      return new updateUserInfoByUserIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public updateUserInfoByUserIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserInfoByUserIdAndJsonParams_result)
        return this.equals((updateUserInfoByUserIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(updateUserInfoByUserIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserInfoByUserIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserInfoByUserIdAndJsonParams_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserInfoByUserIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfoByUserIdAndJsonParams_resultStandardScheme getScheme() {
        return new updateUserInfoByUserIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class updateUserInfoByUserIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserInfoByUserIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserInfoByUserIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserInfoByUserIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserInfoByUserIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserInfoByUserIdAndJsonParams_resultTupleScheme getScheme() {
        return new updateUserInfoByUserIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class updateUserInfoByUserIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserInfoByUserIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserInfoByUserIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserInfoByUserIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginByUsernameAndPassword_args implements org.apache.thrift.TBase<loginByUsernameAndPassword_args, loginByUsernameAndPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginByUsernameAndPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginByUsernameAndPassword_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginByUsernameAndPassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginByUsernameAndPassword_argsTupleSchemeFactory();

    public java.lang.String username; // required
    public java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginByUsernameAndPassword_args.class, metaDataMap);
    }

    public loginByUsernameAndPassword_args() {
    }

    public loginByUsernameAndPassword_args(
      java.lang.String username,
      java.lang.String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginByUsernameAndPassword_args(loginByUsernameAndPassword_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public loginByUsernameAndPassword_args deepCopy() {
      return new loginByUsernameAndPassword_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public loginByUsernameAndPassword_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public loginByUsernameAndPassword_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loginByUsernameAndPassword_args)
        return this.equals((loginByUsernameAndPassword_args)that);
      return false;
    }

    public boolean equals(loginByUsernameAndPassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginByUsernameAndPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginByUsernameAndPassword_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginByUsernameAndPassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginByUsernameAndPassword_argsStandardScheme getScheme() {
        return new loginByUsernameAndPassword_argsStandardScheme();
      }
    }

    private static class loginByUsernameAndPassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginByUsernameAndPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginByUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginByUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginByUsernameAndPassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginByUsernameAndPassword_argsTupleScheme getScheme() {
        return new loginByUsernameAndPassword_argsTupleScheme();
      }
    }

    private static class loginByUsernameAndPassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginByUsernameAndPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginByUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginByUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginByUsernameAndPassword_result implements org.apache.thrift.TBase<loginByUsernameAndPassword_result, loginByUsernameAndPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginByUsernameAndPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginByUsernameAndPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginByUsernameAndPassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginByUsernameAndPassword_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginByUsernameAndPassword_result.class, metaDataMap);
    }

    public loginByUsernameAndPassword_result() {
    }

    public loginByUsernameAndPassword_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginByUsernameAndPassword_result(loginByUsernameAndPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public loginByUsernameAndPassword_result deepCopy() {
      return new loginByUsernameAndPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public loginByUsernameAndPassword_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public loginByUsernameAndPassword_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loginByUsernameAndPassword_result)
        return this.equals((loginByUsernameAndPassword_result)that);
      return false;
    }

    public boolean equals(loginByUsernameAndPassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginByUsernameAndPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginByUsernameAndPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginByUsernameAndPassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginByUsernameAndPassword_resultStandardScheme getScheme() {
        return new loginByUsernameAndPassword_resultStandardScheme();
      }
    }

    private static class loginByUsernameAndPassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginByUsernameAndPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginByUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginByUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginByUsernameAndPassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginByUsernameAndPassword_resultTupleScheme getScheme() {
        return new loginByUsernameAndPassword_resultTupleScheme();
      }
    }

    private static class loginByUsernameAndPassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginByUsernameAndPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginByUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginByUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findParentBySchoolIdAndUserId_args implements org.apache.thrift.TBase<findParentBySchoolIdAndUserId_args, findParentBySchoolIdAndUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findParentBySchoolIdAndUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findParentBySchoolIdAndUserId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findParentBySchoolIdAndUserId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findParentBySchoolIdAndUserId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID((short)2, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findParentBySchoolIdAndUserId_args.class, metaDataMap);
    }

    public findParentBySchoolIdAndUserId_args() {
    }

    public findParentBySchoolIdAndUserId_args(
      java.lang.String schoolId,
      java.lang.String userId)
    {
      this();
      this.schoolId = schoolId;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findParentBySchoolIdAndUserId_args(findParentBySchoolIdAndUserId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public findParentBySchoolIdAndUserId_args deepCopy() {
      return new findParentBySchoolIdAndUserId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findParentBySchoolIdAndUserId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findParentBySchoolIdAndUserId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findParentBySchoolIdAndUserId_args)
        return this.equals((findParentBySchoolIdAndUserId_args)that);
      return false;
    }

    public boolean equals(findParentBySchoolIdAndUserId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findParentBySchoolIdAndUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findParentBySchoolIdAndUserId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findParentBySchoolIdAndUserId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndUserId_argsStandardScheme getScheme() {
        return new findParentBySchoolIdAndUserId_argsStandardScheme();
      }
    }

    private static class findParentBySchoolIdAndUserId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findParentBySchoolIdAndUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findParentBySchoolIdAndUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findParentBySchoolIdAndUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findParentBySchoolIdAndUserId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndUserId_argsTupleScheme getScheme() {
        return new findParentBySchoolIdAndUserId_argsTupleScheme();
      }
    }

    private static class findParentBySchoolIdAndUserId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findParentBySchoolIdAndUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findParentBySchoolIdAndUserId_result implements org.apache.thrift.TBase<findParentBySchoolIdAndUserId_result, findParentBySchoolIdAndUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findParentBySchoolIdAndUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findParentBySchoolIdAndUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findParentBySchoolIdAndUserId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findParentBySchoolIdAndUserId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findParentBySchoolIdAndUserId_result.class, metaDataMap);
    }

    public findParentBySchoolIdAndUserId_result() {
    }

    public findParentBySchoolIdAndUserId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findParentBySchoolIdAndUserId_result(findParentBySchoolIdAndUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findParentBySchoolIdAndUserId_result deepCopy() {
      return new findParentBySchoolIdAndUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findParentBySchoolIdAndUserId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findParentBySchoolIdAndUserId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findParentBySchoolIdAndUserId_result)
        return this.equals((findParentBySchoolIdAndUserId_result)that);
      return false;
    }

    public boolean equals(findParentBySchoolIdAndUserId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findParentBySchoolIdAndUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findParentBySchoolIdAndUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findParentBySchoolIdAndUserId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndUserId_resultStandardScheme getScheme() {
        return new findParentBySchoolIdAndUserId_resultStandardScheme();
      }
    }

    private static class findParentBySchoolIdAndUserId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findParentBySchoolIdAndUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findParentBySchoolIdAndUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findParentBySchoolIdAndUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findParentBySchoolIdAndUserId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndUserId_resultTupleScheme getScheme() {
        return new findParentBySchoolIdAndUserId_resultTupleScheme();
      }
    }

    private static class findParentBySchoolIdAndUserId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findParentBySchoolIdAndUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndOtherJsonParams_args implements org.apache.thrift.TBase<findUserBySchoolIdAndOtherJsonParams_args, findUserBySchoolIdAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String paramsStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      PARAMS_STR((short)2, "paramsStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // PARAMS_STR
            return PARAMS_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndOtherJsonParams_args.class, metaDataMap);
    }

    public findUserBySchoolIdAndOtherJsonParams_args() {
    }

    public findUserBySchoolIdAndOtherJsonParams_args(
      java.lang.String schoolId,
      java.lang.String paramsStr)
    {
      this();
      this.schoolId = schoolId;
      this.paramsStr = paramsStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndOtherJsonParams_args(findUserBySchoolIdAndOtherJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
    }

    public findUserBySchoolIdAndOtherJsonParams_args deepCopy() {
      return new findUserBySchoolIdAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.paramsStr = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserBySchoolIdAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public findUserBySchoolIdAndOtherJsonParams_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case PARAMS_STR:
        return getParamsStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case PARAMS_STR:
        return isSetParamsStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndOtherJsonParams_args)
        return this.equals((findUserBySchoolIdAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findUserBySchoolIdAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findUserBySchoolIdAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetParamsStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndOtherJsonParams_result implements org.apache.thrift.TBase<findUserBySchoolIdAndOtherJsonParams_result, findUserBySchoolIdAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndOtherJsonParams_result.class, metaDataMap);
    }

    public findUserBySchoolIdAndOtherJsonParams_result() {
    }

    public findUserBySchoolIdAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndOtherJsonParams_result(findUserBySchoolIdAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserBySchoolIdAndOtherJsonParams_result deepCopy() {
      return new findUserBySchoolIdAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserBySchoolIdAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserBySchoolIdAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndOtherJsonParams_result)
        return this.equals((findUserBySchoolIdAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findUserBySchoolIdAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findUserBySchoolIdAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_args implements org.apache.thrift.TBase<findUserBySchoolIdAndStaffNoInOrStudentNoIn_args, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndStaffNoInOrStudentNoIn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndStaffNoInOrStudentNoIn_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("outIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> outIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      OUT_ID_LIST((short)2, "outIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // OUT_ID_LIST
            return OUT_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("outIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndStaffNoInOrStudentNoIn_args.class, metaDataMap);
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args() {
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> outIdList)
    {
      this();
      this.schoolId = schoolId;
      this.outIdList = outIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args(findUserBySchoolIdAndStaffNoInOrStudentNoIn_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetOutIdList()) {
        java.util.List<java.lang.String> __this__outIdList = new java.util.ArrayList<java.lang.String>(other.outIdList);
        this.outIdList = __this__outIdList;
      }
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args deepCopy() {
      return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.outIdList = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getOutIdListSize() {
      return (this.outIdList == null) ? 0 : this.outIdList.size();
    }

    public java.util.Iterator<java.lang.String> getOutIdListIterator() {
      return (this.outIdList == null) ? null : this.outIdList.iterator();
    }

    public void addToOutIdList(java.lang.String elem) {
      if (this.outIdList == null) {
        this.outIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.outIdList.add(elem);
    }

    public java.util.List<java.lang.String> getOutIdList() {
      return this.outIdList;
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_args setOutIdList(java.util.List<java.lang.String> outIdList) {
      this.outIdList = outIdList;
      return this;
    }

    public void unsetOutIdList() {
      this.outIdList = null;
    }

    /** Returns true if field outIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetOutIdList() {
      return this.outIdList != null;
    }

    public void setOutIdListIsSet(boolean value) {
      if (!value) {
        this.outIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OUT_ID_LIST:
        if (value == null) {
          unsetOutIdList();
        } else {
          setOutIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case OUT_ID_LIST:
        return getOutIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case OUT_ID_LIST:
        return isSetOutIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndStaffNoInOrStudentNoIn_args)
        return this.equals((findUserBySchoolIdAndStaffNoInOrStudentNoIn_args)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndStaffNoInOrStudentNoIn_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_outIdList = true && this.isSetOutIdList();
      boolean that_present_outIdList = true && that.isSetOutIdList();
      if (this_present_outIdList || that_present_outIdList) {
        if (!(this_present_outIdList && that_present_outIdList))
          return false;
        if (!this.outIdList.equals(that.outIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutIdList()) ? 131071 : 524287);
      if (isSetOutIdList())
        hashCode = hashCode * 8191 + outIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndStaffNoInOrStudentNoIn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutIdList()).compareTo(other.isSetOutIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outIdList, other.outIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndStaffNoInOrStudentNoIn_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outIdList:");
      if (this.outIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.outIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsStandardScheme getScheme() {
        return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndStaffNoInOrStudentNoIn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUT_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.outIdList = new java.util.ArrayList<java.lang.String>(_list72.size);
                  java.lang.String _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = iprot.readString();
                    struct.outIdList.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setOutIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.outIdList != null) {
          oprot.writeFieldBegin(OUT_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outIdList.size()));
            for (java.lang.String _iter75 : struct.outIdList)
            {
              oprot.writeString(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsTupleScheme getScheme() {
        return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndStaffNoInOrStudentNoIn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetOutIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOutIdList()) {
          {
            oprot.writeI32(struct.outIdList.size());
            for (java.lang.String _iter76 : struct.outIdList)
            {
              oprot.writeString(_iter76);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outIdList = new java.util.ArrayList<java.lang.String>(_list77.size);
            java.lang.String _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = iprot.readString();
              struct.outIdList.add(_elem78);
            }
          }
          struct.setOutIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_result implements org.apache.thrift.TBase<findUserBySchoolIdAndStaffNoInOrStudentNoIn_result, findUserBySchoolIdAndStaffNoInOrStudentNoIn_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndStaffNoInOrStudentNoIn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndStaffNoInOrStudentNoIn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndStaffNoInOrStudentNoIn_result.class, metaDataMap);
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_result() {
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_result(findUserBySchoolIdAndStaffNoInOrStudentNoIn_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_result deepCopy() {
      return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserBySchoolIdAndStaffNoInOrStudentNoIn_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndStaffNoInOrStudentNoIn_result)
        return this.equals((findUserBySchoolIdAndStaffNoInOrStudentNoIn_result)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndStaffNoInOrStudentNoIn_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndStaffNoInOrStudentNoIn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndStaffNoInOrStudentNoIn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultStandardScheme getScheme() {
        return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndStaffNoInOrStudentNoIn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultTupleScheme getScheme() {
        return new findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndStaffNoInOrStudentNoIn_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndStaffNoInOrStudentNoIn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndStaffNoInOrStudentNoIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndOutIdIn_args implements org.apache.thrift.TBase<findUserBySchoolIdAndOutIdIn_args, findUserBySchoolIdAndOutIdIn_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndOutIdIn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndOutIdIn_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("outIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndOutIdIn_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndOutIdIn_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> outIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      OUT_ID_LIST((short)2, "outIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // OUT_ID_LIST
            return OUT_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("outIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndOutIdIn_args.class, metaDataMap);
    }

    public findUserBySchoolIdAndOutIdIn_args() {
    }

    public findUserBySchoolIdAndOutIdIn_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> outIdList)
    {
      this();
      this.schoolId = schoolId;
      this.outIdList = outIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndOutIdIn_args(findUserBySchoolIdAndOutIdIn_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetOutIdList()) {
        java.util.List<java.lang.String> __this__outIdList = new java.util.ArrayList<java.lang.String>(other.outIdList);
        this.outIdList = __this__outIdList;
      }
    }

    public findUserBySchoolIdAndOutIdIn_args deepCopy() {
      return new findUserBySchoolIdAndOutIdIn_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.outIdList = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserBySchoolIdAndOutIdIn_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getOutIdListSize() {
      return (this.outIdList == null) ? 0 : this.outIdList.size();
    }

    public java.util.Iterator<java.lang.String> getOutIdListIterator() {
      return (this.outIdList == null) ? null : this.outIdList.iterator();
    }

    public void addToOutIdList(java.lang.String elem) {
      if (this.outIdList == null) {
        this.outIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.outIdList.add(elem);
    }

    public java.util.List<java.lang.String> getOutIdList() {
      return this.outIdList;
    }

    public findUserBySchoolIdAndOutIdIn_args setOutIdList(java.util.List<java.lang.String> outIdList) {
      this.outIdList = outIdList;
      return this;
    }

    public void unsetOutIdList() {
      this.outIdList = null;
    }

    /** Returns true if field outIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetOutIdList() {
      return this.outIdList != null;
    }

    public void setOutIdListIsSet(boolean value) {
      if (!value) {
        this.outIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OUT_ID_LIST:
        if (value == null) {
          unsetOutIdList();
        } else {
          setOutIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case OUT_ID_LIST:
        return getOutIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case OUT_ID_LIST:
        return isSetOutIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndOutIdIn_args)
        return this.equals((findUserBySchoolIdAndOutIdIn_args)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndOutIdIn_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_outIdList = true && this.isSetOutIdList();
      boolean that_present_outIdList = true && that.isSetOutIdList();
      if (this_present_outIdList || that_present_outIdList) {
        if (!(this_present_outIdList && that_present_outIdList))
          return false;
        if (!this.outIdList.equals(that.outIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutIdList()) ? 131071 : 524287);
      if (isSetOutIdList())
        hashCode = hashCode * 8191 + outIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndOutIdIn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutIdList()).compareTo(other.isSetOutIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outIdList, other.outIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndOutIdIn_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outIdList:");
      if (this.outIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.outIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndOutIdIn_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOutIdIn_argsStandardScheme getScheme() {
        return new findUserBySchoolIdAndOutIdIn_argsStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndOutIdIn_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndOutIdIn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndOutIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUT_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.outIdList = new java.util.ArrayList<java.lang.String>(_list80.size);
                  java.lang.String _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = iprot.readString();
                    struct.outIdList.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setOutIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndOutIdIn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.outIdList != null) {
          oprot.writeFieldBegin(OUT_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outIdList.size()));
            for (java.lang.String _iter83 : struct.outIdList)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndOutIdIn_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOutIdIn_argsTupleScheme getScheme() {
        return new findUserBySchoolIdAndOutIdIn_argsTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndOutIdIn_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndOutIdIn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOutIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetOutIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOutIdList()) {
          {
            oprot.writeI32(struct.outIdList.size());
            for (java.lang.String _iter84 : struct.outIdList)
            {
              oprot.writeString(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOutIdIn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outIdList = new java.util.ArrayList<java.lang.String>(_list85.size);
            java.lang.String _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = iprot.readString();
              struct.outIdList.add(_elem86);
            }
          }
          struct.setOutIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndOutIdIn_result implements org.apache.thrift.TBase<findUserBySchoolIdAndOutIdIn_result, findUserBySchoolIdAndOutIdIn_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndOutIdIn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndOutIdIn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndOutIdIn_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndOutIdIn_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndOutIdIn_result.class, metaDataMap);
    }

    public findUserBySchoolIdAndOutIdIn_result() {
    }

    public findUserBySchoolIdAndOutIdIn_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndOutIdIn_result(findUserBySchoolIdAndOutIdIn_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserBySchoolIdAndOutIdIn_result deepCopy() {
      return new findUserBySchoolIdAndOutIdIn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserBySchoolIdAndOutIdIn_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserBySchoolIdAndOutIdIn_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndOutIdIn_result)
        return this.equals((findUserBySchoolIdAndOutIdIn_result)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndOutIdIn_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndOutIdIn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndOutIdIn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndOutIdIn_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOutIdIn_resultStandardScheme getScheme() {
        return new findUserBySchoolIdAndOutIdIn_resultStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndOutIdIn_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndOutIdIn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndOutIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndOutIdIn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndOutIdIn_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndOutIdIn_resultTupleScheme getScheme() {
        return new findUserBySchoolIdAndOutIdIn_resultTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndOutIdIn_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndOutIdIn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOutIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndOutIdIn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUnsyncUserBySchoolIdAndOtherParams_args implements org.apache.thrift.TBase<findUnsyncUserBySchoolIdAndOtherParams_args, findUnsyncUserBySchoolIdAndOtherParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUnsyncUserBySchoolIdAndOtherParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUnsyncUserBySchoolIdAndOtherParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRE_SYNC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("preSyncTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SYNC_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("syncEndTime", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUnsyncUserBySchoolIdAndOtherParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUnsyncUserBySchoolIdAndOtherParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String preSyncTime; // required
    public java.lang.String syncEndTime; // required
    public java.util.List<java.lang.String> userIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      PRE_SYNC_TIME((short)2, "preSyncTime"),
      SYNC_END_TIME((short)3, "syncEndTime"),
      USER_ID_LIST((short)4, "userIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // PRE_SYNC_TIME
            return PRE_SYNC_TIME;
          case 3: // SYNC_END_TIME
            return SYNC_END_TIME;
          case 4: // USER_ID_LIST
            return USER_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRE_SYNC_TIME, new org.apache.thrift.meta_data.FieldMetaData("preSyncTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SYNC_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("syncEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUnsyncUserBySchoolIdAndOtherParams_args.class, metaDataMap);
    }

    public findUnsyncUserBySchoolIdAndOtherParams_args() {
    }

    public findUnsyncUserBySchoolIdAndOtherParams_args(
      java.lang.String schoolId,
      java.lang.String preSyncTime,
      java.lang.String syncEndTime,
      java.util.List<java.lang.String> userIdList)
    {
      this();
      this.schoolId = schoolId;
      this.preSyncTime = preSyncTime;
      this.syncEndTime = syncEndTime;
      this.userIdList = userIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUnsyncUserBySchoolIdAndOtherParams_args(findUnsyncUserBySchoolIdAndOtherParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetPreSyncTime()) {
        this.preSyncTime = other.preSyncTime;
      }
      if (other.isSetSyncEndTime()) {
        this.syncEndTime = other.syncEndTime;
      }
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
    }

    public findUnsyncUserBySchoolIdAndOtherParams_args deepCopy() {
      return new findUnsyncUserBySchoolIdAndOtherParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.preSyncTime = null;
      this.syncEndTime = null;
      this.userIdList = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUnsyncUserBySchoolIdAndOtherParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getPreSyncTime() {
      return this.preSyncTime;
    }

    public findUnsyncUserBySchoolIdAndOtherParams_args setPreSyncTime(java.lang.String preSyncTime) {
      this.preSyncTime = preSyncTime;
      return this;
    }

    public void unsetPreSyncTime() {
      this.preSyncTime = null;
    }

    /** Returns true if field preSyncTime is set (has been assigned a value) and false otherwise */
    public boolean isSetPreSyncTime() {
      return this.preSyncTime != null;
    }

    public void setPreSyncTimeIsSet(boolean value) {
      if (!value) {
        this.preSyncTime = null;
      }
    }

    public java.lang.String getSyncEndTime() {
      return this.syncEndTime;
    }

    public findUnsyncUserBySchoolIdAndOtherParams_args setSyncEndTime(java.lang.String syncEndTime) {
      this.syncEndTime = syncEndTime;
      return this;
    }

    public void unsetSyncEndTime() {
      this.syncEndTime = null;
    }

    /** Returns true if field syncEndTime is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncEndTime() {
      return this.syncEndTime != null;
    }

    public void setSyncEndTimeIsSet(boolean value) {
      if (!value) {
        this.syncEndTime = null;
      }
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findUnsyncUserBySchoolIdAndOtherParams_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case PRE_SYNC_TIME:
        if (value == null) {
          unsetPreSyncTime();
        } else {
          setPreSyncTime((java.lang.String)value);
        }
        break;

      case SYNC_END_TIME:
        if (value == null) {
          unsetSyncEndTime();
        } else {
          setSyncEndTime((java.lang.String)value);
        }
        break;

      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case PRE_SYNC_TIME:
        return getPreSyncTime();

      case SYNC_END_TIME:
        return getSyncEndTime();

      case USER_ID_LIST:
        return getUserIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case PRE_SYNC_TIME:
        return isSetPreSyncTime();
      case SYNC_END_TIME:
        return isSetSyncEndTime();
      case USER_ID_LIST:
        return isSetUserIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUnsyncUserBySchoolIdAndOtherParams_args)
        return this.equals((findUnsyncUserBySchoolIdAndOtherParams_args)that);
      return false;
    }

    public boolean equals(findUnsyncUserBySchoolIdAndOtherParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_preSyncTime = true && this.isSetPreSyncTime();
      boolean that_present_preSyncTime = true && that.isSetPreSyncTime();
      if (this_present_preSyncTime || that_present_preSyncTime) {
        if (!(this_present_preSyncTime && that_present_preSyncTime))
          return false;
        if (!this.preSyncTime.equals(that.preSyncTime))
          return false;
      }

      boolean this_present_syncEndTime = true && this.isSetSyncEndTime();
      boolean that_present_syncEndTime = true && that.isSetSyncEndTime();
      if (this_present_syncEndTime || that_present_syncEndTime) {
        if (!(this_present_syncEndTime && that_present_syncEndTime))
          return false;
        if (!this.syncEndTime.equals(that.syncEndTime))
          return false;
      }

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetPreSyncTime()) ? 131071 : 524287);
      if (isSetPreSyncTime())
        hashCode = hashCode * 8191 + preSyncTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetSyncEndTime()) ? 131071 : 524287);
      if (isSetSyncEndTime())
        hashCode = hashCode * 8191 + syncEndTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUnsyncUserBySchoolIdAndOtherParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPreSyncTime()).compareTo(other.isSetPreSyncTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreSyncTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preSyncTime, other.preSyncTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSyncEndTime()).compareTo(other.isSetSyncEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncEndTime, other.syncEndTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUnsyncUserBySchoolIdAndOtherParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("preSyncTime:");
      if (this.preSyncTime == null) {
        sb.append("null");
      } else {
        sb.append(this.preSyncTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("syncEndTime:");
      if (this.syncEndTime == null) {
        sb.append("null");
      } else {
        sb.append(this.syncEndTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnsyncUserBySchoolIdAndOtherParams_argsStandardScheme getScheme() {
        return new findUnsyncUserBySchoolIdAndOtherParams_argsStandardScheme();
      }
    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUnsyncUserBySchoolIdAndOtherParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUnsyncUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRE_SYNC_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.preSyncTime = iprot.readString();
                struct.setPreSyncTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SYNC_END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.syncEndTime = iprot.readString();
                struct.setSyncEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list88.size);
                  java.lang.String _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readString();
                    struct.userIdList.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUnsyncUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.preSyncTime != null) {
          oprot.writeFieldBegin(PRE_SYNC_TIME_FIELD_DESC);
          oprot.writeString(struct.preSyncTime);
          oprot.writeFieldEnd();
        }
        if (struct.syncEndTime != null) {
          oprot.writeFieldBegin(SYNC_END_TIME_FIELD_DESC);
          oprot.writeString(struct.syncEndTime);
          oprot.writeFieldEnd();
        }
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter91 : struct.userIdList)
            {
              oprot.writeString(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnsyncUserBySchoolIdAndOtherParams_argsTupleScheme getScheme() {
        return new findUnsyncUserBySchoolIdAndOtherParams_argsTupleScheme();
      }
    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUnsyncUserBySchoolIdAndOtherParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUnsyncUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetPreSyncTime()) {
          optionals.set(1);
        }
        if (struct.isSetSyncEndTime()) {
          optionals.set(2);
        }
        if (struct.isSetUserIdList()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetPreSyncTime()) {
          oprot.writeString(struct.preSyncTime);
        }
        if (struct.isSetSyncEndTime()) {
          oprot.writeString(struct.syncEndTime);
        }
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter92 : struct.userIdList)
            {
              oprot.writeString(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUnsyncUserBySchoolIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.preSyncTime = iprot.readString();
          struct.setPreSyncTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.syncEndTime = iprot.readString();
          struct.setSyncEndTimeIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list93.size);
            java.lang.String _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readString();
              struct.userIdList.add(_elem94);
            }
          }
          struct.setUserIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUnsyncUserBySchoolIdAndOtherParams_result implements org.apache.thrift.TBase<findUnsyncUserBySchoolIdAndOtherParams_result, findUnsyncUserBySchoolIdAndOtherParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUnsyncUserBySchoolIdAndOtherParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUnsyncUserBySchoolIdAndOtherParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUnsyncUserBySchoolIdAndOtherParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUnsyncUserBySchoolIdAndOtherParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUnsyncUserBySchoolIdAndOtherParams_result.class, metaDataMap);
    }

    public findUnsyncUserBySchoolIdAndOtherParams_result() {
    }

    public findUnsyncUserBySchoolIdAndOtherParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUnsyncUserBySchoolIdAndOtherParams_result(findUnsyncUserBySchoolIdAndOtherParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUnsyncUserBySchoolIdAndOtherParams_result deepCopy() {
      return new findUnsyncUserBySchoolIdAndOtherParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUnsyncUserBySchoolIdAndOtherParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUnsyncUserBySchoolIdAndOtherParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUnsyncUserBySchoolIdAndOtherParams_result)
        return this.equals((findUnsyncUserBySchoolIdAndOtherParams_result)that);
      return false;
    }

    public boolean equals(findUnsyncUserBySchoolIdAndOtherParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUnsyncUserBySchoolIdAndOtherParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUnsyncUserBySchoolIdAndOtherParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnsyncUserBySchoolIdAndOtherParams_resultStandardScheme getScheme() {
        return new findUnsyncUserBySchoolIdAndOtherParams_resultStandardScheme();
      }
    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUnsyncUserBySchoolIdAndOtherParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUnsyncUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUnsyncUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnsyncUserBySchoolIdAndOtherParams_resultTupleScheme getScheme() {
        return new findUnsyncUserBySchoolIdAndOtherParams_resultTupleScheme();
      }
    }

    private static class findUnsyncUserBySchoolIdAndOtherParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUnsyncUserBySchoolIdAndOtherParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUnsyncUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUnsyncUserBySchoolIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserWithOutIdByUserId_args implements org.apache.thrift.TBase<findUserWithOutIdByUserId_args, findUserWithOutIdByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserWithOutIdByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserWithOutIdByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserWithOutIdByUserId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserWithOutIdByUserId_argsTupleSchemeFactory();

    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserWithOutIdByUserId_args.class, metaDataMap);
    }

    public findUserWithOutIdByUserId_args() {
    }

    public findUserWithOutIdByUserId_args(
      java.lang.String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserWithOutIdByUserId_args(findUserWithOutIdByUserId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public findUserWithOutIdByUserId_args deepCopy() {
      return new findUserWithOutIdByUserId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findUserWithOutIdByUserId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserWithOutIdByUserId_args)
        return this.equals((findUserWithOutIdByUserId_args)that);
      return false;
    }

    public boolean equals(findUserWithOutIdByUserId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserWithOutIdByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserWithOutIdByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserWithOutIdByUserId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserWithOutIdByUserId_argsStandardScheme getScheme() {
        return new findUserWithOutIdByUserId_argsStandardScheme();
      }
    }

    private static class findUserWithOutIdByUserId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserWithOutIdByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserWithOutIdByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserWithOutIdByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserWithOutIdByUserId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserWithOutIdByUserId_argsTupleScheme getScheme() {
        return new findUserWithOutIdByUserId_argsTupleScheme();
      }
    }

    private static class findUserWithOutIdByUserId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserWithOutIdByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserWithOutIdByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserWithOutIdByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserWithOutIdByUserId_result implements org.apache.thrift.TBase<findUserWithOutIdByUserId_result, findUserWithOutIdByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserWithOutIdByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserWithOutIdByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserWithOutIdByUserId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserWithOutIdByUserId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserWithOutIdByUserId_result.class, metaDataMap);
    }

    public findUserWithOutIdByUserId_result() {
    }

    public findUserWithOutIdByUserId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserWithOutIdByUserId_result(findUserWithOutIdByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserWithOutIdByUserId_result deepCopy() {
      return new findUserWithOutIdByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserWithOutIdByUserId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserWithOutIdByUserId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserWithOutIdByUserId_result)
        return this.equals((findUserWithOutIdByUserId_result)that);
      return false;
    }

    public boolean equals(findUserWithOutIdByUserId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserWithOutIdByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserWithOutIdByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserWithOutIdByUserId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserWithOutIdByUserId_resultStandardScheme getScheme() {
        return new findUserWithOutIdByUserId_resultStandardScheme();
      }
    }

    private static class findUserWithOutIdByUserId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserWithOutIdByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserWithOutIdByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserWithOutIdByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserWithOutIdByUserId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserWithOutIdByUserId_resultTupleScheme getScheme() {
        return new findUserWithOutIdByUserId_resultTupleScheme();
      }
    }

    private static class findUserWithOutIdByUserId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserWithOutIdByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserWithOutIdByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserWithOutIdByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args implements org.apache.thrift.TBase<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRE_SYNC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("preSyncTime", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public long preSyncTime; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      PRE_SYNC_TIME((short)2, "preSyncTime"),
      JSON_PARAMS((short)3, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // PRE_SYNC_TIME
            return PRE_SYNC_TIME;
          case 3: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRESYNCTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRE_SYNC_TIME, new org.apache.thrift.meta_data.FieldMetaData("preSyncTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args.class, metaDataMap);
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args() {
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(
      java.lang.String schoolId,
      long preSyncTime,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.preSyncTime = preSyncTime;
      setPreSyncTimeIsSet(true);
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      this.preSyncTime = other.preSyncTime;
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args deepCopy() {
      return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      setPreSyncTimeIsSet(false);
      this.preSyncTime = 0;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public long getPreSyncTime() {
      return this.preSyncTime;
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args setPreSyncTime(long preSyncTime) {
      this.preSyncTime = preSyncTime;
      setPreSyncTimeIsSet(true);
      return this;
    }

    public void unsetPreSyncTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESYNCTIME_ISSET_ID);
    }

    /** Returns true if field preSyncTime is set (has been assigned a value) and false otherwise */
    public boolean isSetPreSyncTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESYNCTIME_ISSET_ID);
    }

    public void setPreSyncTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESYNCTIME_ISSET_ID, value);
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case PRE_SYNC_TIME:
        if (value == null) {
          unsetPreSyncTime();
        } else {
          setPreSyncTime((java.lang.Long)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case PRE_SYNC_TIME:
        return getPreSyncTime();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case PRE_SYNC_TIME:
        return isSetPreSyncTime();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args)
        return this.equals((findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_preSyncTime = true;
      boolean that_present_preSyncTime = true;
      if (this_present_preSyncTime || that_present_preSyncTime) {
        if (!(this_present_preSyncTime && that_present_preSyncTime))
          return false;
        if (this.preSyncTime != that.preSyncTime)
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(preSyncTime);

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPreSyncTime()).compareTo(other.isSetPreSyncTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreSyncTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preSyncTime, other.preSyncTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("preSyncTime:");
      sb.append(this.preSyncTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRE_SYNC_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.preSyncTime = iprot.readI64();
                struct.setPreSyncTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRE_SYNC_TIME_FIELD_DESC);
        oprot.writeI64(struct.preSyncTime);
        oprot.writeFieldEnd();
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetPreSyncTime()) {
          optionals.set(1);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetPreSyncTime()) {
          oprot.writeI64(struct.preSyncTime);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.preSyncTime = iprot.readI64();
          struct.setPreSyncTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result implements org.apache.thrift.TBase<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result.class, metaDataMap);
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result() {
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result deepCopy() {
      return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result)
        return this.equals((findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_args implements org.apache.thrift.TBase<findStudentBusiInfoBySchoolIdAndOtherJsonParams_args, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentBusiInfoBySchoolIdAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentBusiInfoBySchoolIdAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentBusiInfoBySchoolIdAndOtherJsonParams_args.class, metaDataMap);
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args() {
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args(findStudentBusiInfoBySchoolIdAndOtherJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args deepCopy() {
      return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentBusiInfoBySchoolIdAndOtherJsonParams_args)
        return this.equals((findStudentBusiInfoBySchoolIdAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findStudentBusiInfoBySchoolIdAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentBusiInfoBySchoolIdAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentBusiInfoBySchoolIdAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentBusiInfoBySchoolIdAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentBusiInfoBySchoolIdAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_result implements org.apache.thrift.TBase<findStudentBusiInfoBySchoolIdAndOtherJsonParams_result, findStudentBusiInfoBySchoolIdAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentBusiInfoBySchoolIdAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentBusiInfoBySchoolIdAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentBusiInfoBySchoolIdAndOtherJsonParams_result.class, metaDataMap);
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_result() {
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_result(findStudentBusiInfoBySchoolIdAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_result deepCopy() {
      return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findStudentBusiInfoBySchoolIdAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentBusiInfoBySchoolIdAndOtherJsonParams_result)
        return this.equals((findStudentBusiInfoBySchoolIdAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findStudentBusiInfoBySchoolIdAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentBusiInfoBySchoolIdAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentBusiInfoBySchoolIdAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentBusiInfoBySchoolIdAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findStudentBusiInfoBySchoolIdAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentBusiInfoBySchoolIdAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args implements org.apache.thrift.TBase<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args.class, metaDataMap);
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args() {
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args deepCopy() {
      return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args)
        return this.equals((findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result implements org.apache.thrift.TBase<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result.class, metaDataMap);
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result() {
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result deepCopy() {
      return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result)
        return this.equals((findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findTeacherBusiInfoBySchoolIdAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTeacherBusiInfoBySchoolIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findChildBySchoolIdAndUserIds_args implements org.apache.thrift.TBase<findChildBySchoolIdAndUserIds_args, findChildBySchoolIdAndUserIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findChildBySchoolIdAndUserIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildBySchoolIdAndUserIds_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findChildBySchoolIdAndUserIds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findChildBySchoolIdAndUserIds_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      IDS((short)2, "ids");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildBySchoolIdAndUserIds_args.class, metaDataMap);
    }

    public findChildBySchoolIdAndUserIds_args() {
    }

    public findChildBySchoolIdAndUserIds_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> ids)
    {
      this();
      this.schoolId = schoolId;
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildBySchoolIdAndUserIds_args(findChildBySchoolIdAndUserIds_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetIds()) {
        java.util.List<java.lang.String> __this__ids = new java.util.ArrayList<java.lang.String>(other.ids);
        this.ids = __this__ids;
      }
    }

    public findChildBySchoolIdAndUserIds_args deepCopy() {
      return new findChildBySchoolIdAndUserIds_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.ids = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findChildBySchoolIdAndUserIds_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<java.lang.String> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(java.lang.String elem) {
      if (this.ids == null) {
        this.ids = new java.util.ArrayList<java.lang.String>();
      }
      this.ids.add(elem);
    }

    public java.util.List<java.lang.String> getIds() {
      return this.ids;
    }

    public findChildBySchoolIdAndUserIds_args setIds(java.util.List<java.lang.String> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case IDS:
        return getIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case IDS:
        return isSetIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildBySchoolIdAndUserIds_args)
        return this.equals((findChildBySchoolIdAndUserIds_args)that);
      return false;
    }

    public boolean equals(findChildBySchoolIdAndUserIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetIds()) ? 131071 : 524287);
      if (isSetIds())
        hashCode = hashCode * 8191 + ids.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findChildBySchoolIdAndUserIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findChildBySchoolIdAndUserIds_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildBySchoolIdAndUserIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildBySchoolIdAndUserIds_argsStandardScheme getScheme() {
        return new findChildBySchoolIdAndUserIds_argsStandardScheme();
      }
    }

    private static class findChildBySchoolIdAndUserIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findChildBySchoolIdAndUserIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildBySchoolIdAndUserIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.ids = new java.util.ArrayList<java.lang.String>(_list96.size);
                  java.lang.String _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readString();
                    struct.ids.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildBySchoolIdAndUserIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ids.size()));
            for (java.lang.String _iter99 : struct.ids)
            {
              oprot.writeString(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildBySchoolIdAndUserIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildBySchoolIdAndUserIds_argsTupleScheme getScheme() {
        return new findChildBySchoolIdAndUserIds_argsTupleScheme();
      }
    }

    private static class findChildBySchoolIdAndUserIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findChildBySchoolIdAndUserIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildBySchoolIdAndUserIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (java.lang.String _iter100 : struct.ids)
            {
              oprot.writeString(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildBySchoolIdAndUserIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ids = new java.util.ArrayList<java.lang.String>(_list101.size);
            java.lang.String _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readString();
              struct.ids.add(_elem102);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findChildBySchoolIdAndUserIds_result implements org.apache.thrift.TBase<findChildBySchoolIdAndUserIds_result, findChildBySchoolIdAndUserIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findChildBySchoolIdAndUserIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildBySchoolIdAndUserIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findChildBySchoolIdAndUserIds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findChildBySchoolIdAndUserIds_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildBySchoolIdAndUserIds_result.class, metaDataMap);
    }

    public findChildBySchoolIdAndUserIds_result() {
    }

    public findChildBySchoolIdAndUserIds_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildBySchoolIdAndUserIds_result(findChildBySchoolIdAndUserIds_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findChildBySchoolIdAndUserIds_result deepCopy() {
      return new findChildBySchoolIdAndUserIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findChildBySchoolIdAndUserIds_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findChildBySchoolIdAndUserIds_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildBySchoolIdAndUserIds_result)
        return this.equals((findChildBySchoolIdAndUserIds_result)that);
      return false;
    }

    public boolean equals(findChildBySchoolIdAndUserIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findChildBySchoolIdAndUserIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findChildBySchoolIdAndUserIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildBySchoolIdAndUserIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildBySchoolIdAndUserIds_resultStandardScheme getScheme() {
        return new findChildBySchoolIdAndUserIds_resultStandardScheme();
      }
    }

    private static class findChildBySchoolIdAndUserIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findChildBySchoolIdAndUserIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildBySchoolIdAndUserIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildBySchoolIdAndUserIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildBySchoolIdAndUserIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildBySchoolIdAndUserIds_resultTupleScheme getScheme() {
        return new findChildBySchoolIdAndUserIds_resultTupleScheme();
      }
    }

    private static class findChildBySchoolIdAndUserIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findChildBySchoolIdAndUserIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildBySchoolIdAndUserIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildBySchoolIdAndUserIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUnclassifiedUserBySchoolId_args implements org.apache.thrift.TBase<findUnclassifiedUserBySchoolId_args, findUnclassifiedUserBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUnclassifiedUserBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUnclassifiedUserBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUnclassifiedUserBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUnclassifiedUserBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUnclassifiedUserBySchoolId_args.class, metaDataMap);
    }

    public findUnclassifiedUserBySchoolId_args() {
    }

    public findUnclassifiedUserBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUnclassifiedUserBySchoolId_args(findUnclassifiedUserBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findUnclassifiedUserBySchoolId_args deepCopy() {
      return new findUnclassifiedUserBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUnclassifiedUserBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUnclassifiedUserBySchoolId_args)
        return this.equals((findUnclassifiedUserBySchoolId_args)that);
      return false;
    }

    public boolean equals(findUnclassifiedUserBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUnclassifiedUserBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUnclassifiedUserBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUnclassifiedUserBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnclassifiedUserBySchoolId_argsStandardScheme getScheme() {
        return new findUnclassifiedUserBySchoolId_argsStandardScheme();
      }
    }

    private static class findUnclassifiedUserBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUnclassifiedUserBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUnclassifiedUserBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUnclassifiedUserBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUnclassifiedUserBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnclassifiedUserBySchoolId_argsTupleScheme getScheme() {
        return new findUnclassifiedUserBySchoolId_argsTupleScheme();
      }
    }

    private static class findUnclassifiedUserBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUnclassifiedUserBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUnclassifiedUserBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUnclassifiedUserBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUnclassifiedUserBySchoolId_result implements org.apache.thrift.TBase<findUnclassifiedUserBySchoolId_result, findUnclassifiedUserBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUnclassifiedUserBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUnclassifiedUserBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUnclassifiedUserBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUnclassifiedUserBySchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUnclassifiedUserBySchoolId_result.class, metaDataMap);
    }

    public findUnclassifiedUserBySchoolId_result() {
    }

    public findUnclassifiedUserBySchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUnclassifiedUserBySchoolId_result(findUnclassifiedUserBySchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUnclassifiedUserBySchoolId_result deepCopy() {
      return new findUnclassifiedUserBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUnclassifiedUserBySchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUnclassifiedUserBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUnclassifiedUserBySchoolId_result)
        return this.equals((findUnclassifiedUserBySchoolId_result)that);
      return false;
    }

    public boolean equals(findUnclassifiedUserBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUnclassifiedUserBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUnclassifiedUserBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUnclassifiedUserBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnclassifiedUserBySchoolId_resultStandardScheme getScheme() {
        return new findUnclassifiedUserBySchoolId_resultStandardScheme();
      }
    }

    private static class findUnclassifiedUserBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUnclassifiedUserBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUnclassifiedUserBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUnclassifiedUserBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUnclassifiedUserBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUnclassifiedUserBySchoolId_resultTupleScheme getScheme() {
        return new findUnclassifiedUserBySchoolId_resultTupleScheme();
      }
    }

    private static class findUnclassifiedUserBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUnclassifiedUserBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUnclassifiedUserBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUnclassifiedUserBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findParentBySchoolIdAndChildIds_args implements org.apache.thrift.TBase<findParentBySchoolIdAndChildIds_args, findParentBySchoolIdAndChildIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findParentBySchoolIdAndChildIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findParentBySchoolIdAndChildIds_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findParentBySchoolIdAndChildIds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findParentBySchoolIdAndChildIds_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      IDS((short)2, "ids");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findParentBySchoolIdAndChildIds_args.class, metaDataMap);
    }

    public findParentBySchoolIdAndChildIds_args() {
    }

    public findParentBySchoolIdAndChildIds_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> ids)
    {
      this();
      this.schoolId = schoolId;
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findParentBySchoolIdAndChildIds_args(findParentBySchoolIdAndChildIds_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetIds()) {
        java.util.List<java.lang.String> __this__ids = new java.util.ArrayList<java.lang.String>(other.ids);
        this.ids = __this__ids;
      }
    }

    public findParentBySchoolIdAndChildIds_args deepCopy() {
      return new findParentBySchoolIdAndChildIds_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.ids = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findParentBySchoolIdAndChildIds_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<java.lang.String> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(java.lang.String elem) {
      if (this.ids == null) {
        this.ids = new java.util.ArrayList<java.lang.String>();
      }
      this.ids.add(elem);
    }

    public java.util.List<java.lang.String> getIds() {
      return this.ids;
    }

    public findParentBySchoolIdAndChildIds_args setIds(java.util.List<java.lang.String> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case IDS:
        return getIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case IDS:
        return isSetIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findParentBySchoolIdAndChildIds_args)
        return this.equals((findParentBySchoolIdAndChildIds_args)that);
      return false;
    }

    public boolean equals(findParentBySchoolIdAndChildIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetIds()) ? 131071 : 524287);
      if (isSetIds())
        hashCode = hashCode * 8191 + ids.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findParentBySchoolIdAndChildIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findParentBySchoolIdAndChildIds_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findParentBySchoolIdAndChildIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndChildIds_argsStandardScheme getScheme() {
        return new findParentBySchoolIdAndChildIds_argsStandardScheme();
      }
    }

    private static class findParentBySchoolIdAndChildIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findParentBySchoolIdAndChildIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findParentBySchoolIdAndChildIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.ids = new java.util.ArrayList<java.lang.String>(_list104.size);
                  java.lang.String _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readString();
                    struct.ids.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findParentBySchoolIdAndChildIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ids.size()));
            for (java.lang.String _iter107 : struct.ids)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findParentBySchoolIdAndChildIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndChildIds_argsTupleScheme getScheme() {
        return new findParentBySchoolIdAndChildIds_argsTupleScheme();
      }
    }

    private static class findParentBySchoolIdAndChildIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findParentBySchoolIdAndChildIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndChildIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (java.lang.String _iter108 : struct.ids)
            {
              oprot.writeString(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndChildIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ids = new java.util.ArrayList<java.lang.String>(_list109.size);
            java.lang.String _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readString();
              struct.ids.add(_elem110);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findParentBySchoolIdAndChildIds_result implements org.apache.thrift.TBase<findParentBySchoolIdAndChildIds_result, findParentBySchoolIdAndChildIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findParentBySchoolIdAndChildIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findParentBySchoolIdAndChildIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findParentBySchoolIdAndChildIds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findParentBySchoolIdAndChildIds_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findParentBySchoolIdAndChildIds_result.class, metaDataMap);
    }

    public findParentBySchoolIdAndChildIds_result() {
    }

    public findParentBySchoolIdAndChildIds_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findParentBySchoolIdAndChildIds_result(findParentBySchoolIdAndChildIds_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findParentBySchoolIdAndChildIds_result deepCopy() {
      return new findParentBySchoolIdAndChildIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findParentBySchoolIdAndChildIds_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findParentBySchoolIdAndChildIds_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findParentBySchoolIdAndChildIds_result)
        return this.equals((findParentBySchoolIdAndChildIds_result)that);
      return false;
    }

    public boolean equals(findParentBySchoolIdAndChildIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findParentBySchoolIdAndChildIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findParentBySchoolIdAndChildIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findParentBySchoolIdAndChildIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndChildIds_resultStandardScheme getScheme() {
        return new findParentBySchoolIdAndChildIds_resultStandardScheme();
      }
    }

    private static class findParentBySchoolIdAndChildIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findParentBySchoolIdAndChildIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findParentBySchoolIdAndChildIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findParentBySchoolIdAndChildIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findParentBySchoolIdAndChildIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findParentBySchoolIdAndChildIds_resultTupleScheme getScheme() {
        return new findParentBySchoolIdAndChildIds_resultTupleScheme();
      }
    }

    private static class findParentBySchoolIdAndChildIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findParentBySchoolIdAndChildIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndChildIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findParentBySchoolIdAndChildIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassStudentUserIdsBySchoolId_args implements org.apache.thrift.TBase<findClassStudentUserIdsBySchoolId_args, findClassStudentUserIdsBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findClassStudentUserIdsBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassStudentUserIdsBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassStudentUserIdsBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassStudentUserIdsBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassStudentUserIdsBySchoolId_args.class, metaDataMap);
    }

    public findClassStudentUserIdsBySchoolId_args() {
    }

    public findClassStudentUserIdsBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassStudentUserIdsBySchoolId_args(findClassStudentUserIdsBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findClassStudentUserIdsBySchoolId_args deepCopy() {
      return new findClassStudentUserIdsBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findClassStudentUserIdsBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassStudentUserIdsBySchoolId_args)
        return this.equals((findClassStudentUserIdsBySchoolId_args)that);
      return false;
    }

    public boolean equals(findClassStudentUserIdsBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassStudentUserIdsBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassStudentUserIdsBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassStudentUserIdsBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentUserIdsBySchoolId_argsStandardScheme getScheme() {
        return new findClassStudentUserIdsBySchoolId_argsStandardScheme();
      }
    }

    private static class findClassStudentUserIdsBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassStudentUserIdsBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassStudentUserIdsBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassStudentUserIdsBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassStudentUserIdsBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentUserIdsBySchoolId_argsTupleScheme getScheme() {
        return new findClassStudentUserIdsBySchoolId_argsTupleScheme();
      }
    }

    private static class findClassStudentUserIdsBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassStudentUserIdsBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassStudentUserIdsBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassStudentUserIdsBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassStudentUserIdsBySchoolId_result implements org.apache.thrift.TBase<findClassStudentUserIdsBySchoolId_result, findClassStudentUserIdsBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findClassStudentUserIdsBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassStudentUserIdsBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassStudentUserIdsBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassStudentUserIdsBySchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassStudentUserIdsBySchoolId_result.class, metaDataMap);
    }

    public findClassStudentUserIdsBySchoolId_result() {
    }

    public findClassStudentUserIdsBySchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassStudentUserIdsBySchoolId_result(findClassStudentUserIdsBySchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findClassStudentUserIdsBySchoolId_result deepCopy() {
      return new findClassStudentUserIdsBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findClassStudentUserIdsBySchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findClassStudentUserIdsBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassStudentUserIdsBySchoolId_result)
        return this.equals((findClassStudentUserIdsBySchoolId_result)that);
      return false;
    }

    public boolean equals(findClassStudentUserIdsBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassStudentUserIdsBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassStudentUserIdsBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassStudentUserIdsBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentUserIdsBySchoolId_resultStandardScheme getScheme() {
        return new findClassStudentUserIdsBySchoolId_resultStandardScheme();
      }
    }

    private static class findClassStudentUserIdsBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassStudentUserIdsBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassStudentUserIdsBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassStudentUserIdsBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassStudentUserIdsBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentUserIdsBySchoolId_resultTupleScheme getScheme() {
        return new findClassStudentUserIdsBySchoolId_resultTupleScheme();
      }
    }

    private static class findClassStudentUserIdsBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassStudentUserIdsBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassStudentUserIdsBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassStudentUserIdsBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args implements org.apache.thrift.TBase<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("classId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String classId; // required
    public java.lang.String type; // required
    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      CLASS_ID((short)2, "classId"),
      TYPE((short)3, "type"),
      USER_ID((short)4, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // CLASS_ID
            return CLASS_ID;
          case 3: // TYPE
            return TYPE;
          case 4: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("classId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args.class, metaDataMap);
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args() {
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args(
      java.lang.String schoolId,
      java.lang.String classId,
      java.lang.String type,
      java.lang.String userId)
    {
      this();
      this.schoolId = schoolId;
      this.classId = classId;
      this.type = type;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetClassId()) {
        this.classId = other.classId;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args deepCopy() {
      return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.classId = null;
      this.type = null;
      this.userId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getClassId() {
      return this.classId;
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args setClassId(java.lang.String classId) {
      this.classId = classId;
      return this;
    }

    public void unsetClassId() {
      this.classId = null;
    }

    /** Returns true if field classId is set (has been assigned a value) and false otherwise */
    public boolean isSetClassId() {
      return this.classId != null;
    }

    public void setClassIdIsSet(boolean value) {
      if (!value) {
        this.classId = null;
      }
    }

    public java.lang.String getType() {
      return this.type;
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args setType(java.lang.String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case CLASS_ID:
        if (value == null) {
          unsetClassId();
        } else {
          setClassId((java.lang.String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case CLASS_ID:
        return getClassId();

      case TYPE:
        return getType();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case CLASS_ID:
        return isSetClassId();
      case TYPE:
        return isSetType();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args)
        return this.equals((findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args)that);
      return false;
    }

    public boolean equals(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_classId = true && this.isSetClassId();
      boolean that_present_classId = true && that.isSetClassId();
      if (this_present_classId || that_present_classId) {
        if (!(this_present_classId && that_present_classId))
          return false;
        if (!this.classId.equals(that.classId))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetClassId()) ? 131071 : 524287);
      if (isSetClassId())
        hashCode = hashCode * 8191 + classId.hashCode();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClassId()).compareTo(other.isSetClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, other.classId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classId:");
      if (this.classId == null) {
        sb.append("null");
      } else {
        sb.append(this.classId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsStandardScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsStandardScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classId = iprot.readString();
                struct.setClassIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.classId != null) {
          oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
          oprot.writeString(struct.classId);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsTupleScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsTupleScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetClassId()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetClassId()) {
          oprot.writeString(struct.classId);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classId = iprot.readString();
          struct.setClassIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result implements org.apache.thrift.TBase<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result.class, metaDataMap);
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result() {
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result deepCopy() {
      return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result)
        return this.equals((findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result)that);
      return false;
    }

    public boolean equals(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultStandardScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultStandardScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultTupleScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultTupleScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndClassIdAndOtherParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndClassIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveOrUpdateClassUserDetail_args implements org.apache.thrift.TBase<saveOrUpdateClassUserDetail_args, saveOrUpdateClassUserDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrUpdateClassUserDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrUpdateClassUserDetail_args");

    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operateUserId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveOrUpdateClassUserDetail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveOrUpdateClassUserDetail_argsTupleSchemeFactory();

    public java.lang.String paramsStr; // required
    public java.lang.String operateUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS_STR((short)1, "paramsStr"),
      OPERATE_USER_ID((short)2, "operateUserId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS_STR
            return PARAMS_STR;
          case 2: // OPERATE_USER_ID
            return OPERATE_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("operateUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrUpdateClassUserDetail_args.class, metaDataMap);
    }

    public saveOrUpdateClassUserDetail_args() {
    }

    public saveOrUpdateClassUserDetail_args(
      java.lang.String paramsStr,
      java.lang.String operateUserId)
    {
      this();
      this.paramsStr = paramsStr;
      this.operateUserId = operateUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrUpdateClassUserDetail_args(saveOrUpdateClassUserDetail_args other) {
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
      if (other.isSetOperateUserId()) {
        this.operateUserId = other.operateUserId;
      }
    }

    public saveOrUpdateClassUserDetail_args deepCopy() {
      return new saveOrUpdateClassUserDetail_args(this);
    }

    @Override
    public void clear() {
      this.paramsStr = null;
      this.operateUserId = null;
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public saveOrUpdateClassUserDetail_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public java.lang.String getOperateUserId() {
      return this.operateUserId;
    }

    public saveOrUpdateClassUserDetail_args setOperateUserId(java.lang.String operateUserId) {
      this.operateUserId = operateUserId;
      return this;
    }

    public void unsetOperateUserId() {
      this.operateUserId = null;
    }

    /** Returns true if field operateUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateUserId() {
      return this.operateUserId != null;
    }

    public void setOperateUserIdIsSet(boolean value) {
      if (!value) {
        this.operateUserId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      case OPERATE_USER_ID:
        if (value == null) {
          unsetOperateUserId();
        } else {
          setOperateUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS_STR:
        return getParamsStr();

      case OPERATE_USER_ID:
        return getOperateUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PARAMS_STR:
        return isSetParamsStr();
      case OPERATE_USER_ID:
        return isSetOperateUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrUpdateClassUserDetail_args)
        return this.equals((saveOrUpdateClassUserDetail_args)that);
      return false;
    }

    public boolean equals(saveOrUpdateClassUserDetail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      boolean this_present_operateUserId = true && this.isSetOperateUserId();
      boolean that_present_operateUserId = true && that.isSetOperateUserId();
      if (this_present_operateUserId || that_present_operateUserId) {
        if (!(this_present_operateUserId && that_present_operateUserId))
          return false;
        if (!this.operateUserId.equals(that.operateUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetOperateUserId()) ? 131071 : 524287);
      if (isSetOperateUserId())
        hashCode = hashCode * 8191 + operateUserId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveOrUpdateClassUserDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOperateUserId()).compareTo(other.isSetOperateUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateUserId, other.operateUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveOrUpdateClassUserDetail_args(");
      boolean first = true;

      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operateUserId:");
      if (this.operateUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.operateUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrUpdateClassUserDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateClassUserDetail_argsStandardScheme getScheme() {
        return new saveOrUpdateClassUserDetail_argsStandardScheme();
      }
    }

    private static class saveOrUpdateClassUserDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveOrUpdateClassUserDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrUpdateClassUserDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATE_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operateUserId = iprot.readString();
                struct.setOperateUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrUpdateClassUserDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        if (struct.operateUserId != null) {
          oprot.writeFieldBegin(OPERATE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.operateUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrUpdateClassUserDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateClassUserDetail_argsTupleScheme getScheme() {
        return new saveOrUpdateClassUserDetail_argsTupleScheme();
      }
    }

    private static class saveOrUpdateClassUserDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveOrUpdateClassUserDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateClassUserDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetParamsStr()) {
          optionals.set(0);
        }
        if (struct.isSetOperateUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
        if (struct.isSetOperateUserId()) {
          oprot.writeString(struct.operateUserId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateClassUserDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operateUserId = iprot.readString();
          struct.setOperateUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveOrUpdateClassUserDetail_result implements org.apache.thrift.TBase<saveOrUpdateClassUserDetail_result, saveOrUpdateClassUserDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrUpdateClassUserDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrUpdateClassUserDetail_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveOrUpdateClassUserDetail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveOrUpdateClassUserDetail_resultTupleSchemeFactory();

    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrUpdateClassUserDetail_result.class, metaDataMap);
    }

    public saveOrUpdateClassUserDetail_result() {
    }

    public saveOrUpdateClassUserDetail_result(
      ThriftBusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrUpdateClassUserDetail_result(saveOrUpdateClassUserDetail_result other) {
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public saveOrUpdateClassUserDetail_result deepCopy() {
      return new saveOrUpdateClassUserDetail_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public saveOrUpdateClassUserDetail_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrUpdateClassUserDetail_result)
        return this.equals((saveOrUpdateClassUserDetail_result)that);
      return false;
    }

    public boolean equals(saveOrUpdateClassUserDetail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveOrUpdateClassUserDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveOrUpdateClassUserDetail_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrUpdateClassUserDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateClassUserDetail_resultStandardScheme getScheme() {
        return new saveOrUpdateClassUserDetail_resultStandardScheme();
      }
    }

    private static class saveOrUpdateClassUserDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveOrUpdateClassUserDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrUpdateClassUserDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrUpdateClassUserDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrUpdateClassUserDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateClassUserDetail_resultTupleScheme getScheme() {
        return new saveOrUpdateClassUserDetail_resultTupleScheme();
      }
    }

    private static class saveOrUpdateClassUserDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveOrUpdateClassUserDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateClassUserDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateClassUserDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteClassUserDetail_args implements org.apache.thrift.TBase<deleteClassUserDetail_args, deleteClassUserDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteClassUserDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteClassUserDetail_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OPERATE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operateUserId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteClassUserDetail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteClassUserDetail_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String id; // required
    public java.lang.String operateUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      ID((short)2, "id"),
      OPERATE_USER_ID((short)3, "operateUserId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // ID
            return ID;
          case 3: // OPERATE_USER_ID
            return OPERATE_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("operateUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteClassUserDetail_args.class, metaDataMap);
    }

    public deleteClassUserDetail_args() {
    }

    public deleteClassUserDetail_args(
      java.lang.String schoolId,
      java.lang.String id,
      java.lang.String operateUserId)
    {
      this();
      this.schoolId = schoolId;
      this.id = id;
      this.operateUserId = operateUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteClassUserDetail_args(deleteClassUserDetail_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetOperateUserId()) {
        this.operateUserId = other.operateUserId;
      }
    }

    public deleteClassUserDetail_args deepCopy() {
      return new deleteClassUserDetail_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.id = null;
      this.operateUserId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public deleteClassUserDetail_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getId() {
      return this.id;
    }

    public deleteClassUserDetail_args setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public java.lang.String getOperateUserId() {
      return this.operateUserId;
    }

    public deleteClassUserDetail_args setOperateUserId(java.lang.String operateUserId) {
      this.operateUserId = operateUserId;
      return this;
    }

    public void unsetOperateUserId() {
      this.operateUserId = null;
    }

    /** Returns true if field operateUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateUserId() {
      return this.operateUserId != null;
    }

    public void setOperateUserIdIsSet(boolean value) {
      if (!value) {
        this.operateUserId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.String)value);
        }
        break;

      case OPERATE_USER_ID:
        if (value == null) {
          unsetOperateUserId();
        } else {
          setOperateUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case ID:
        return getId();

      case OPERATE_USER_ID:
        return getOperateUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case ID:
        return isSetId();
      case OPERATE_USER_ID:
        return isSetOperateUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteClassUserDetail_args)
        return this.equals((deleteClassUserDetail_args)that);
      return false;
    }

    public boolean equals(deleteClassUserDetail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_operateUserId = true && this.isSetOperateUserId();
      boolean that_present_operateUserId = true && that.isSetOperateUserId();
      if (this_present_operateUserId || that_present_operateUserId) {
        if (!(this_present_operateUserId && that_present_operateUserId))
          return false;
        if (!this.operateUserId.equals(that.operateUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetOperateUserId()) ? 131071 : 524287);
      if (isSetOperateUserId())
        hashCode = hashCode * 8191 + operateUserId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteClassUserDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOperateUserId()).compareTo(other.isSetOperateUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateUserId, other.operateUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteClassUserDetail_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operateUserId:");
      if (this.operateUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.operateUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteClassUserDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteClassUserDetail_argsStandardScheme getScheme() {
        return new deleteClassUserDetail_argsStandardScheme();
      }
    }

    private static class deleteClassUserDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteClassUserDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteClassUserDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPERATE_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operateUserId = iprot.readString();
                struct.setOperateUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteClassUserDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.operateUserId != null) {
          oprot.writeFieldBegin(OPERATE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.operateUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteClassUserDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteClassUserDetail_argsTupleScheme getScheme() {
        return new deleteClassUserDetail_argsTupleScheme();
      }
    }

    private static class deleteClassUserDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteClassUserDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteClassUserDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetOperateUserId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetOperateUserId()) {
          oprot.writeString(struct.operateUserId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteClassUserDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.operateUserId = iprot.readString();
          struct.setOperateUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteClassUserDetail_result implements org.apache.thrift.TBase<deleteClassUserDetail_result, deleteClassUserDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteClassUserDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteClassUserDetail_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteClassUserDetail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteClassUserDetail_resultTupleSchemeFactory();

    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteClassUserDetail_result.class, metaDataMap);
    }

    public deleteClassUserDetail_result() {
    }

    public deleteClassUserDetail_result(
      ThriftBusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteClassUserDetail_result(deleteClassUserDetail_result other) {
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public deleteClassUserDetail_result deepCopy() {
      return new deleteClassUserDetail_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public deleteClassUserDetail_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteClassUserDetail_result)
        return this.equals((deleteClassUserDetail_result)that);
      return false;
    }

    public boolean equals(deleteClassUserDetail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteClassUserDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteClassUserDetail_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteClassUserDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteClassUserDetail_resultStandardScheme getScheme() {
        return new deleteClassUserDetail_resultStandardScheme();
      }
    }

    private static class deleteClassUserDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteClassUserDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteClassUserDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteClassUserDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteClassUserDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteClassUserDetail_resultTupleScheme getScheme() {
        return new deleteClassUserDetail_resultTupleScheme();
      }
    }

    private static class deleteClassUserDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteClassUserDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteClassUserDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteClassUserDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args implements org.apache.thrift.TBase<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String userId; // required
    public java.lang.String type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID((short)2, "userId"),
      TYPE((short)3, "type");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args.class, metaDataMap);
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args() {
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args(
      java.lang.String schoolId,
      java.lang.String userId,
      java.lang.String type)
    {
      this();
      this.schoolId = schoolId;
      this.userId = userId;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args deepCopy() {
      return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userId = null;
      this.type = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getType() {
      return this.type;
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args setType(java.lang.String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID:
        return getUserId();

      case TYPE:
        return getType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID:
        return isSetUserId();
      case TYPE:
        return isSetType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args)
        return this.equals((findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args)that);
      return false;
    }

    public boolean equals(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsStandardScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsStandardScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsTupleScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsTupleScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result implements org.apache.thrift.TBase<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result.class, metaDataMap);
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result() {
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result deepCopy() {
      return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result)
        return this.equals((findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result)that);
      return false;
    }

    public boolean equals(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultStandardScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultStandardScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultTupleScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultTupleScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndUserIdAndOtherParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndUserIdAndOtherParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolBySchoolId_args implements org.apache.thrift.TBase<findSchoolBySchoolId_args, findSchoolBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolBySchoolId_args.class, metaDataMap);
    }

    public findSchoolBySchoolId_args() {
    }

    public findSchoolBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolBySchoolId_args(findSchoolBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findSchoolBySchoolId_args deepCopy() {
      return new findSchoolBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findSchoolBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolBySchoolId_args)
        return this.equals((findSchoolBySchoolId_args)that);
      return false;
    }

    public boolean equals(findSchoolBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolBySchoolId_argsStandardScheme getScheme() {
        return new findSchoolBySchoolId_argsStandardScheme();
      }
    }

    private static class findSchoolBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolBySchoolId_argsTupleScheme getScheme() {
        return new findSchoolBySchoolId_argsTupleScheme();
      }
    }

    private static class findSchoolBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolBySchoolId_result implements org.apache.thrift.TBase<findSchoolBySchoolId_result, findSchoolBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolBySchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolBySchoolId_result.class, metaDataMap);
    }

    public findSchoolBySchoolId_result() {
    }

    public findSchoolBySchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolBySchoolId_result(findSchoolBySchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSchoolBySchoolId_result deepCopy() {
      return new findSchoolBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findSchoolBySchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSchoolBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolBySchoolId_result)
        return this.equals((findSchoolBySchoolId_result)that);
      return false;
    }

    public boolean equals(findSchoolBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolBySchoolId_resultStandardScheme getScheme() {
        return new findSchoolBySchoolId_resultStandardScheme();
      }
    }

    private static class findSchoolBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolBySchoolId_resultTupleScheme getScheme() {
        return new findSchoolBySchoolId_resultTupleScheme();
      }
    }

    private static class findSchoolBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllSchool_args implements org.apache.thrift.TBase<findAllSchool_args, findAllSchool_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllSchool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllSchool_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllSchool_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllSchool_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllSchool_args.class, metaDataMap);
    }

    public findAllSchool_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllSchool_args(findAllSchool_args other) {
    }

    public findAllSchool_args deepCopy() {
      return new findAllSchool_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllSchool_args)
        return this.equals((findAllSchool_args)that);
      return false;
    }

    public boolean equals(findAllSchool_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(findAllSchool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllSchool_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllSchool_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllSchool_argsStandardScheme getScheme() {
        return new findAllSchool_argsStandardScheme();
      }
    }

    private static class findAllSchool_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllSchool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllSchool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllSchool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllSchool_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllSchool_argsTupleScheme getScheme() {
        return new findAllSchool_argsTupleScheme();
      }
    }

    private static class findAllSchool_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllSchool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllSchool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllSchool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllSchool_result implements org.apache.thrift.TBase<findAllSchool_result, findAllSchool_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllSchool_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllSchool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllSchool_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllSchool_resultTupleSchemeFactory();

    public java.util.List<SysOfficeThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysOfficeThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllSchool_result.class, metaDataMap);
    }

    public findAllSchool_result() {
    }

    public findAllSchool_result(
      java.util.List<SysOfficeThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllSchool_result(findAllSchool_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysOfficeThrift> __this__success = new java.util.ArrayList<SysOfficeThrift>(other.success.size());
        for (SysOfficeThrift other_element : other.success) {
          __this__success.add(new SysOfficeThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findAllSchool_result deepCopy() {
      return new findAllSchool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysOfficeThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysOfficeThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysOfficeThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysOfficeThrift> getSuccess() {
      return this.success;
    }

    public findAllSchool_result setSuccess(java.util.List<SysOfficeThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findAllSchool_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysOfficeThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllSchool_result)
        return this.equals((findAllSchool_result)that);
      return false;
    }

    public boolean equals(findAllSchool_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAllSchool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllSchool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllSchool_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllSchool_resultStandardScheme getScheme() {
        return new findAllSchool_resultStandardScheme();
      }
    }

    private static class findAllSchool_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllSchool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllSchool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysOfficeThrift>(_list112.size);
                  SysOfficeThrift _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new SysOfficeThrift();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllSchool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysOfficeThrift _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllSchool_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllSchool_resultTupleScheme getScheme() {
        return new findAllSchool_resultTupleScheme();
      }
    }

    private static class findAllSchool_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllSchool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllSchool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysOfficeThrift _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllSchool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysOfficeThrift>(_list117.size);
            SysOfficeThrift _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new SysOfficeThrift();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeByUserIdAndSchoolId_args implements org.apache.thrift.TBase<findOfficeByUserIdAndSchoolId_args, findOfficeByUserIdAndSchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeByUserIdAndSchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeByUserIdAndSchoolId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeByUserIdAndSchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeByUserIdAndSchoolId_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_ID((short)2, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeByUserIdAndSchoolId_args.class, metaDataMap);
    }

    public findOfficeByUserIdAndSchoolId_args() {
    }

    public findOfficeByUserIdAndSchoolId_args(
      java.lang.String userId,
      java.lang.String schoolId)
    {
      this();
      this.userId = userId;
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeByUserIdAndSchoolId_args(findOfficeByUserIdAndSchoolId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findOfficeByUserIdAndSchoolId_args deepCopy() {
      return new findOfficeByUserIdAndSchoolId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findOfficeByUserIdAndSchoolId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findOfficeByUserIdAndSchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeByUserIdAndSchoolId_args)
        return this.equals((findOfficeByUserIdAndSchoolId_args)that);
      return false;
    }

    public boolean equals(findOfficeByUserIdAndSchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeByUserIdAndSchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeByUserIdAndSchoolId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeByUserIdAndSchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeByUserIdAndSchoolId_argsStandardScheme getScheme() {
        return new findOfficeByUserIdAndSchoolId_argsStandardScheme();
      }
    }

    private static class findOfficeByUserIdAndSchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeByUserIdAndSchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeByUserIdAndSchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeByUserIdAndSchoolId_argsTupleScheme getScheme() {
        return new findOfficeByUserIdAndSchoolId_argsTupleScheme();
      }
    }

    private static class findOfficeByUserIdAndSchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeByUserIdAndSchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeByUserIdAndSchoolId_result implements org.apache.thrift.TBase<findOfficeByUserIdAndSchoolId_result, findOfficeByUserIdAndSchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeByUserIdAndSchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeByUserIdAndSchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeByUserIdAndSchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeByUserIdAndSchoolId_resultTupleSchemeFactory();

    public java.util.List<SysOfficeThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysOfficeThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeByUserIdAndSchoolId_result.class, metaDataMap);
    }

    public findOfficeByUserIdAndSchoolId_result() {
    }

    public findOfficeByUserIdAndSchoolId_result(
      java.util.List<SysOfficeThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeByUserIdAndSchoolId_result(findOfficeByUserIdAndSchoolId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysOfficeThrift> __this__success = new java.util.ArrayList<SysOfficeThrift>(other.success.size());
        for (SysOfficeThrift other_element : other.success) {
          __this__success.add(new SysOfficeThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findOfficeByUserIdAndSchoolId_result deepCopy() {
      return new findOfficeByUserIdAndSchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysOfficeThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysOfficeThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysOfficeThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysOfficeThrift> getSuccess() {
      return this.success;
    }

    public findOfficeByUserIdAndSchoolId_result setSuccess(java.util.List<SysOfficeThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findOfficeByUserIdAndSchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysOfficeThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeByUserIdAndSchoolId_result)
        return this.equals((findOfficeByUserIdAndSchoolId_result)that);
      return false;
    }

    public boolean equals(findOfficeByUserIdAndSchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeByUserIdAndSchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeByUserIdAndSchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeByUserIdAndSchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeByUserIdAndSchoolId_resultStandardScheme getScheme() {
        return new findOfficeByUserIdAndSchoolId_resultStandardScheme();
      }
    }

    private static class findOfficeByUserIdAndSchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeByUserIdAndSchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysOfficeThrift>(_list120.size);
                  SysOfficeThrift _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new SysOfficeThrift();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysOfficeThrift _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeByUserIdAndSchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeByUserIdAndSchoolId_resultTupleScheme getScheme() {
        return new findOfficeByUserIdAndSchoolId_resultTupleScheme();
      }
    }

    private static class findOfficeByUserIdAndSchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeByUserIdAndSchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysOfficeThrift _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysOfficeThrift>(_list125.size);
            SysOfficeThrift _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new SysOfficeThrift();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolId_args implements org.apache.thrift.TBase<findOfficeBySchoolId_args, findOfficeBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolId_args.class, metaDataMap);
    }

    public findOfficeBySchoolId_args() {
    }

    public findOfficeBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolId_args(findOfficeBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findOfficeBySchoolId_args deepCopy() {
      return new findOfficeBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findOfficeBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolId_args)
        return this.equals((findOfficeBySchoolId_args)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolId_argsStandardScheme getScheme() {
        return new findOfficeBySchoolId_argsStandardScheme();
      }
    }

    private static class findOfficeBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolId_argsTupleScheme getScheme() {
        return new findOfficeBySchoolId_argsTupleScheme();
      }
    }

    private static class findOfficeBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolId_result implements org.apache.thrift.TBase<findOfficeBySchoolId_result, findOfficeBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolId_resultTupleSchemeFactory();

    public java.util.List<SysOfficeThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysOfficeThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolId_result.class, metaDataMap);
    }

    public findOfficeBySchoolId_result() {
    }

    public findOfficeBySchoolId_result(
      java.util.List<SysOfficeThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolId_result(findOfficeBySchoolId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysOfficeThrift> __this__success = new java.util.ArrayList<SysOfficeThrift>(other.success.size());
        for (SysOfficeThrift other_element : other.success) {
          __this__success.add(new SysOfficeThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findOfficeBySchoolId_result deepCopy() {
      return new findOfficeBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysOfficeThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysOfficeThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysOfficeThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysOfficeThrift> getSuccess() {
      return this.success;
    }

    public findOfficeBySchoolId_result setSuccess(java.util.List<SysOfficeThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findOfficeBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysOfficeThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolId_result)
        return this.equals((findOfficeBySchoolId_result)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolId_resultStandardScheme getScheme() {
        return new findOfficeBySchoolId_resultStandardScheme();
      }
    }

    private static class findOfficeBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysOfficeThrift>(_list128.size);
                  SysOfficeThrift _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new SysOfficeThrift();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysOfficeThrift _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolId_resultTupleScheme getScheme() {
        return new findOfficeBySchoolId_resultTupleScheme();
      }
    }

    private static class findOfficeBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysOfficeThrift _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysOfficeThrift>(_list133.size);
            SysOfficeThrift _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new SysOfficeThrift();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findTreeOfficeBySchoolId_args implements org.apache.thrift.TBase<findTreeOfficeBySchoolId_args, findTreeOfficeBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findTreeOfficeBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTreeOfficeBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findTreeOfficeBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findTreeOfficeBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTreeOfficeBySchoolId_args.class, metaDataMap);
    }

    public findTreeOfficeBySchoolId_args() {
    }

    public findTreeOfficeBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTreeOfficeBySchoolId_args(findTreeOfficeBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findTreeOfficeBySchoolId_args deepCopy() {
      return new findTreeOfficeBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findTreeOfficeBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findTreeOfficeBySchoolId_args)
        return this.equals((findTreeOfficeBySchoolId_args)that);
      return false;
    }

    public boolean equals(findTreeOfficeBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findTreeOfficeBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findTreeOfficeBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTreeOfficeBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolId_argsStandardScheme getScheme() {
        return new findTreeOfficeBySchoolId_argsStandardScheme();
      }
    }

    private static class findTreeOfficeBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findTreeOfficeBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTreeOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTreeOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTreeOfficeBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolId_argsTupleScheme getScheme() {
        return new findTreeOfficeBySchoolId_argsTupleScheme();
      }
    }

    private static class findTreeOfficeBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findTreeOfficeBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findTreeOfficeBySchoolId_result implements org.apache.thrift.TBase<findTreeOfficeBySchoolId_result, findTreeOfficeBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findTreeOfficeBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTreeOfficeBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findTreeOfficeBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findTreeOfficeBySchoolId_resultTupleSchemeFactory();

    public java.util.List<SysOfficeThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysOfficeThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTreeOfficeBySchoolId_result.class, metaDataMap);
    }

    public findTreeOfficeBySchoolId_result() {
    }

    public findTreeOfficeBySchoolId_result(
      java.util.List<SysOfficeThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTreeOfficeBySchoolId_result(findTreeOfficeBySchoolId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysOfficeThrift> __this__success = new java.util.ArrayList<SysOfficeThrift>(other.success.size());
        for (SysOfficeThrift other_element : other.success) {
          __this__success.add(new SysOfficeThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findTreeOfficeBySchoolId_result deepCopy() {
      return new findTreeOfficeBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysOfficeThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysOfficeThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysOfficeThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysOfficeThrift> getSuccess() {
      return this.success;
    }

    public findTreeOfficeBySchoolId_result setSuccess(java.util.List<SysOfficeThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findTreeOfficeBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysOfficeThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findTreeOfficeBySchoolId_result)
        return this.equals((findTreeOfficeBySchoolId_result)that);
      return false;
    }

    public boolean equals(findTreeOfficeBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findTreeOfficeBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findTreeOfficeBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTreeOfficeBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolId_resultStandardScheme getScheme() {
        return new findTreeOfficeBySchoolId_resultStandardScheme();
      }
    }

    private static class findTreeOfficeBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findTreeOfficeBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTreeOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysOfficeThrift>(_list136.size);
                  SysOfficeThrift _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new SysOfficeThrift();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTreeOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysOfficeThrift _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTreeOfficeBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolId_resultTupleScheme getScheme() {
        return new findTreeOfficeBySchoolId_resultTupleScheme();
      }
    }

    private static class findTreeOfficeBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findTreeOfficeBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysOfficeThrift _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysOfficeThrift>(_list141.size);
            SysOfficeThrift _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new SysOfficeThrift();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findTreeOfficeBySchoolIdAndOfficeType_args implements org.apache.thrift.TBase<findTreeOfficeBySchoolIdAndOfficeType_args, findTreeOfficeBySchoolIdAndOfficeType_args._Fields>, java.io.Serializable, Cloneable, Comparable<findTreeOfficeBySchoolIdAndOfficeType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTreeOfficeBySchoolIdAndOfficeType_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("officeType", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findTreeOfficeBySchoolIdAndOfficeType_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findTreeOfficeBySchoolIdAndOfficeType_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public byte officeType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      OFFICE_TYPE((short)2, "officeType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // OFFICE_TYPE
            return OFFICE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFICETYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("officeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTreeOfficeBySchoolIdAndOfficeType_args.class, metaDataMap);
    }

    public findTreeOfficeBySchoolIdAndOfficeType_args() {
    }

    public findTreeOfficeBySchoolIdAndOfficeType_args(
      java.lang.String schoolId,
      byte officeType)
    {
      this();
      this.schoolId = schoolId;
      this.officeType = officeType;
      setOfficeTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTreeOfficeBySchoolIdAndOfficeType_args(findTreeOfficeBySchoolIdAndOfficeType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      this.officeType = other.officeType;
    }

    public findTreeOfficeBySchoolIdAndOfficeType_args deepCopy() {
      return new findTreeOfficeBySchoolIdAndOfficeType_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      setOfficeTypeIsSet(false);
      this.officeType = 0;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findTreeOfficeBySchoolIdAndOfficeType_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public byte getOfficeType() {
      return this.officeType;
    }

    public findTreeOfficeBySchoolIdAndOfficeType_args setOfficeType(byte officeType) {
      this.officeType = officeType;
      setOfficeTypeIsSet(true);
      return this;
    }

    public void unsetOfficeType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFICETYPE_ISSET_ID);
    }

    /** Returns true if field officeType is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFICETYPE_ISSET_ID);
    }

    public void setOfficeTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFICETYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OFFICE_TYPE:
        if (value == null) {
          unsetOfficeType();
        } else {
          setOfficeType((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case OFFICE_TYPE:
        return getOfficeType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case OFFICE_TYPE:
        return isSetOfficeType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findTreeOfficeBySchoolIdAndOfficeType_args)
        return this.equals((findTreeOfficeBySchoolIdAndOfficeType_args)that);
      return false;
    }

    public boolean equals(findTreeOfficeBySchoolIdAndOfficeType_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_officeType = true;
      boolean that_present_officeType = true;
      if (this_present_officeType || that_present_officeType) {
        if (!(this_present_officeType && that_present_officeType))
          return false;
        if (this.officeType != that.officeType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + (int) (officeType);

      return hashCode;
    }

    @Override
    public int compareTo(findTreeOfficeBySchoolIdAndOfficeType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOfficeType()).compareTo(other.isSetOfficeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeType, other.officeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findTreeOfficeBySchoolIdAndOfficeType_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("officeType:");
      sb.append(this.officeType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolIdAndOfficeType_argsStandardScheme getScheme() {
        return new findTreeOfficeBySchoolIdAndOfficeType_argsStandardScheme();
      }
    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findTreeOfficeBySchoolIdAndOfficeType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTreeOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.officeType = iprot.readByte();
                struct.setOfficeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTreeOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFICE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.officeType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolIdAndOfficeType_argsTupleScheme getScheme() {
        return new findTreeOfficeBySchoolIdAndOfficeType_argsTupleScheme();
      }
    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findTreeOfficeBySchoolIdAndOfficeType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetOfficeType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOfficeType()) {
          oprot.writeByte(struct.officeType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.officeType = iprot.readByte();
          struct.setOfficeTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findTreeOfficeBySchoolIdAndOfficeType_result implements org.apache.thrift.TBase<findTreeOfficeBySchoolIdAndOfficeType_result, findTreeOfficeBySchoolIdAndOfficeType_result._Fields>, java.io.Serializable, Cloneable, Comparable<findTreeOfficeBySchoolIdAndOfficeType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTreeOfficeBySchoolIdAndOfficeType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findTreeOfficeBySchoolIdAndOfficeType_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findTreeOfficeBySchoolIdAndOfficeType_resultTupleSchemeFactory();

    public java.util.List<SysOfficeThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysOfficeThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTreeOfficeBySchoolIdAndOfficeType_result.class, metaDataMap);
    }

    public findTreeOfficeBySchoolIdAndOfficeType_result() {
    }

    public findTreeOfficeBySchoolIdAndOfficeType_result(
      java.util.List<SysOfficeThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTreeOfficeBySchoolIdAndOfficeType_result(findTreeOfficeBySchoolIdAndOfficeType_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysOfficeThrift> __this__success = new java.util.ArrayList<SysOfficeThrift>(other.success.size());
        for (SysOfficeThrift other_element : other.success) {
          __this__success.add(new SysOfficeThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findTreeOfficeBySchoolIdAndOfficeType_result deepCopy() {
      return new findTreeOfficeBySchoolIdAndOfficeType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysOfficeThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysOfficeThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysOfficeThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysOfficeThrift> getSuccess() {
      return this.success;
    }

    public findTreeOfficeBySchoolIdAndOfficeType_result setSuccess(java.util.List<SysOfficeThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findTreeOfficeBySchoolIdAndOfficeType_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysOfficeThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findTreeOfficeBySchoolIdAndOfficeType_result)
        return this.equals((findTreeOfficeBySchoolIdAndOfficeType_result)that);
      return false;
    }

    public boolean equals(findTreeOfficeBySchoolIdAndOfficeType_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findTreeOfficeBySchoolIdAndOfficeType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findTreeOfficeBySchoolIdAndOfficeType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolIdAndOfficeType_resultStandardScheme getScheme() {
        return new findTreeOfficeBySchoolIdAndOfficeType_resultStandardScheme();
      }
    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findTreeOfficeBySchoolIdAndOfficeType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTreeOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysOfficeThrift>(_list144.size);
                  SysOfficeThrift _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new SysOfficeThrift();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTreeOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysOfficeThrift _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findTreeOfficeBySchoolIdAndOfficeType_resultTupleScheme getScheme() {
        return new findTreeOfficeBySchoolIdAndOfficeType_resultTupleScheme();
      }
    }

    private static class findTreeOfficeBySchoolIdAndOfficeType_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findTreeOfficeBySchoolIdAndOfficeType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysOfficeThrift _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTreeOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysOfficeThrift>(_list149.size);
            SysOfficeThrift _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new SysOfficeThrift();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeById_args implements org.apache.thrift.TBase<findOfficeById_args, findOfficeById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeById_args");

    private static final org.apache.thrift.protocol.TField OFFICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("officeId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeById_argsTupleSchemeFactory();

    public java.lang.String officeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OFFICE_ID((short)1, "officeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OFFICE_ID
            return OFFICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OFFICE_ID, new org.apache.thrift.meta_data.FieldMetaData("officeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeById_args.class, metaDataMap);
    }

    public findOfficeById_args() {
    }

    public findOfficeById_args(
      java.lang.String officeId)
    {
      this();
      this.officeId = officeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeById_args(findOfficeById_args other) {
      if (other.isSetOfficeId()) {
        this.officeId = other.officeId;
      }
    }

    public findOfficeById_args deepCopy() {
      return new findOfficeById_args(this);
    }

    @Override
    public void clear() {
      this.officeId = null;
    }

    public java.lang.String getOfficeId() {
      return this.officeId;
    }

    public findOfficeById_args setOfficeId(java.lang.String officeId) {
      this.officeId = officeId;
      return this;
    }

    public void unsetOfficeId() {
      this.officeId = null;
    }

    /** Returns true if field officeId is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeId() {
      return this.officeId != null;
    }

    public void setOfficeIdIsSet(boolean value) {
      if (!value) {
        this.officeId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OFFICE_ID:
        if (value == null) {
          unsetOfficeId();
        } else {
          setOfficeId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OFFICE_ID:
        return getOfficeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OFFICE_ID:
        return isSetOfficeId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeById_args)
        return this.equals((findOfficeById_args)that);
      return false;
    }

    public boolean equals(findOfficeById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_officeId = true && this.isSetOfficeId();
      boolean that_present_officeId = true && that.isSetOfficeId();
      if (this_present_officeId || that_present_officeId) {
        if (!(this_present_officeId && that_present_officeId))
          return false;
        if (!this.officeId.equals(that.officeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOfficeId()) ? 131071 : 524287);
      if (isSetOfficeId())
        hashCode = hashCode * 8191 + officeId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOfficeId()).compareTo(other.isSetOfficeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeId, other.officeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeById_args(");
      boolean first = true;

      sb.append("officeId:");
      if (this.officeId == null) {
        sb.append("null");
      } else {
        sb.append(this.officeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeById_argsStandardScheme getScheme() {
        return new findOfficeById_argsStandardScheme();
      }
    }

    private static class findOfficeById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OFFICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.officeId = iprot.readString();
                struct.setOfficeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.officeId != null) {
          oprot.writeFieldBegin(OFFICE_ID_FIELD_DESC);
          oprot.writeString(struct.officeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeById_argsTupleScheme getScheme() {
        return new findOfficeById_argsTupleScheme();
      }
    }

    private static class findOfficeById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOfficeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOfficeId()) {
          oprot.writeString(struct.officeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.officeId = iprot.readString();
          struct.setOfficeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeById_result implements org.apache.thrift.TBase<findOfficeById_result, findOfficeById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeById_resultTupleSchemeFactory();

    public SysOfficeThrift success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysOfficeThrift.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeById_result.class, metaDataMap);
    }

    public findOfficeById_result() {
    }

    public findOfficeById_result(
      SysOfficeThrift success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeById_result(findOfficeById_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysOfficeThrift(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findOfficeById_result deepCopy() {
      return new findOfficeById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public SysOfficeThrift getSuccess() {
      return this.success;
    }

    public findOfficeById_result setSuccess(SysOfficeThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findOfficeById_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysOfficeThrift)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeById_result)
        return this.equals((findOfficeById_result)that);
      return false;
    }

    public boolean equals(findOfficeById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeById_resultStandardScheme getScheme() {
        return new findOfficeById_resultStandardScheme();
      }
    }

    private static class findOfficeById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysOfficeThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeById_resultTupleScheme getScheme() {
        return new findOfficeById_resultTupleScheme();
      }
    }

    private static class findOfficeById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SysOfficeThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolIdAndOfficeType_args implements org.apache.thrift.TBase<findOfficeBySchoolIdAndOfficeType_args, findOfficeBySchoolIdAndOfficeType_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolIdAndOfficeType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolIdAndOfficeType_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("officeType", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolIdAndOfficeType_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolIdAndOfficeType_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public byte officeType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      OFFICE_TYPE((short)2, "officeType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // OFFICE_TYPE
            return OFFICE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFICETYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("officeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolIdAndOfficeType_args.class, metaDataMap);
    }

    public findOfficeBySchoolIdAndOfficeType_args() {
    }

    public findOfficeBySchoolIdAndOfficeType_args(
      java.lang.String schoolId,
      byte officeType)
    {
      this();
      this.schoolId = schoolId;
      this.officeType = officeType;
      setOfficeTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolIdAndOfficeType_args(findOfficeBySchoolIdAndOfficeType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      this.officeType = other.officeType;
    }

    public findOfficeBySchoolIdAndOfficeType_args deepCopy() {
      return new findOfficeBySchoolIdAndOfficeType_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      setOfficeTypeIsSet(false);
      this.officeType = 0;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findOfficeBySchoolIdAndOfficeType_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public byte getOfficeType() {
      return this.officeType;
    }

    public findOfficeBySchoolIdAndOfficeType_args setOfficeType(byte officeType) {
      this.officeType = officeType;
      setOfficeTypeIsSet(true);
      return this;
    }

    public void unsetOfficeType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFICETYPE_ISSET_ID);
    }

    /** Returns true if field officeType is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFICETYPE_ISSET_ID);
    }

    public void setOfficeTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFICETYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OFFICE_TYPE:
        if (value == null) {
          unsetOfficeType();
        } else {
          setOfficeType((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case OFFICE_TYPE:
        return getOfficeType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case OFFICE_TYPE:
        return isSetOfficeType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolIdAndOfficeType_args)
        return this.equals((findOfficeBySchoolIdAndOfficeType_args)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolIdAndOfficeType_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_officeType = true;
      boolean that_present_officeType = true;
      if (this_present_officeType || that_present_officeType) {
        if (!(this_present_officeType && that_present_officeType))
          return false;
        if (this.officeType != that.officeType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + (int) (officeType);

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolIdAndOfficeType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOfficeType()).compareTo(other.isSetOfficeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeType, other.officeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolIdAndOfficeType_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("officeType:");
      sb.append(this.officeType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolIdAndOfficeType_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndOfficeType_argsStandardScheme getScheme() {
        return new findOfficeBySchoolIdAndOfficeType_argsStandardScheme();
      }
    }

    private static class findOfficeBySchoolIdAndOfficeType_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolIdAndOfficeType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.officeType = iprot.readByte();
                struct.setOfficeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFICE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.officeType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolIdAndOfficeType_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndOfficeType_argsTupleScheme getScheme() {
        return new findOfficeBySchoolIdAndOfficeType_argsTupleScheme();
      }
    }

    private static class findOfficeBySchoolIdAndOfficeType_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolIdAndOfficeType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetOfficeType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOfficeType()) {
          oprot.writeByte(struct.officeType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndOfficeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.officeType = iprot.readByte();
          struct.setOfficeTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolIdAndOfficeType_result implements org.apache.thrift.TBase<findOfficeBySchoolIdAndOfficeType_result, findOfficeBySchoolIdAndOfficeType_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolIdAndOfficeType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolIdAndOfficeType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolIdAndOfficeType_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolIdAndOfficeType_resultTupleSchemeFactory();

    public java.util.List<SysOfficeThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysOfficeThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolIdAndOfficeType_result.class, metaDataMap);
    }

    public findOfficeBySchoolIdAndOfficeType_result() {
    }

    public findOfficeBySchoolIdAndOfficeType_result(
      java.util.List<SysOfficeThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolIdAndOfficeType_result(findOfficeBySchoolIdAndOfficeType_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysOfficeThrift> __this__success = new java.util.ArrayList<SysOfficeThrift>(other.success.size());
        for (SysOfficeThrift other_element : other.success) {
          __this__success.add(new SysOfficeThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findOfficeBySchoolIdAndOfficeType_result deepCopy() {
      return new findOfficeBySchoolIdAndOfficeType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysOfficeThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysOfficeThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysOfficeThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysOfficeThrift> getSuccess() {
      return this.success;
    }

    public findOfficeBySchoolIdAndOfficeType_result setSuccess(java.util.List<SysOfficeThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findOfficeBySchoolIdAndOfficeType_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysOfficeThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolIdAndOfficeType_result)
        return this.equals((findOfficeBySchoolIdAndOfficeType_result)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolIdAndOfficeType_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolIdAndOfficeType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolIdAndOfficeType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolIdAndOfficeType_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndOfficeType_resultStandardScheme getScheme() {
        return new findOfficeBySchoolIdAndOfficeType_resultStandardScheme();
      }
    }

    private static class findOfficeBySchoolIdAndOfficeType_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolIdAndOfficeType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysOfficeThrift>(_list152.size);
                  SysOfficeThrift _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new SysOfficeThrift();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysOfficeThrift _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolIdAndOfficeType_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndOfficeType_resultTupleScheme getScheme() {
        return new findOfficeBySchoolIdAndOfficeType_resultTupleScheme();
      }
    }

    private static class findOfficeBySchoolIdAndOfficeType_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolIdAndOfficeType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysOfficeThrift _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndOfficeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysOfficeThrift>(_list157.size);
            SysOfficeThrift _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new SysOfficeThrift();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAccessableOfficeByUserIdAndSchoolId_args implements org.apache.thrift.TBase<findAccessableOfficeByUserIdAndSchoolId_args, findAccessableOfficeByUserIdAndSchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAccessableOfficeByUserIdAndSchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAccessableOfficeByUserIdAndSchoolId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolId_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_ID((short)2, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAccessableOfficeByUserIdAndSchoolId_args.class, metaDataMap);
    }

    public findAccessableOfficeByUserIdAndSchoolId_args() {
    }

    public findAccessableOfficeByUserIdAndSchoolId_args(
      java.lang.String userId,
      java.lang.String schoolId)
    {
      this();
      this.userId = userId;
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAccessableOfficeByUserIdAndSchoolId_args(findAccessableOfficeByUserIdAndSchoolId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findAccessableOfficeByUserIdAndSchoolId_args deepCopy() {
      return new findAccessableOfficeByUserIdAndSchoolId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findAccessableOfficeByUserIdAndSchoolId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findAccessableOfficeByUserIdAndSchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAccessableOfficeByUserIdAndSchoolId_args)
        return this.equals((findAccessableOfficeByUserIdAndSchoolId_args)that);
      return false;
    }

    public boolean equals(findAccessableOfficeByUserIdAndSchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAccessableOfficeByUserIdAndSchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAccessableOfficeByUserIdAndSchoolId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolId_argsStandardScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolId_argsStandardScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAccessableOfficeByUserIdAndSchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAccessableOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAccessableOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAccessableOfficeByUserIdAndSchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolId_argsTupleScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolId_argsTupleScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAccessableOfficeByUserIdAndSchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAccessableOfficeByUserIdAndSchoolId_result implements org.apache.thrift.TBase<findAccessableOfficeByUserIdAndSchoolId_result, findAccessableOfficeByUserIdAndSchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAccessableOfficeByUserIdAndSchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAccessableOfficeByUserIdAndSchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAccessableOfficeByUserIdAndSchoolId_result.class, metaDataMap);
    }

    public findAccessableOfficeByUserIdAndSchoolId_result() {
    }

    public findAccessableOfficeByUserIdAndSchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAccessableOfficeByUserIdAndSchoolId_result(findAccessableOfficeByUserIdAndSchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findAccessableOfficeByUserIdAndSchoolId_result deepCopy() {
      return new findAccessableOfficeByUserIdAndSchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findAccessableOfficeByUserIdAndSchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findAccessableOfficeByUserIdAndSchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAccessableOfficeByUserIdAndSchoolId_result)
        return this.equals((findAccessableOfficeByUserIdAndSchoolId_result)that);
      return false;
    }

    public boolean equals(findAccessableOfficeByUserIdAndSchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAccessableOfficeByUserIdAndSchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAccessableOfficeByUserIdAndSchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolId_resultStandardScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolId_resultStandardScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAccessableOfficeByUserIdAndSchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAccessableOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAccessableOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAccessableOfficeByUserIdAndSchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolId_resultTupleScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolId_resultTupleScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAccessableOfficeByUserIdAndSchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args implements org.apache.thrift.TBase<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolId; // required
    public java.lang.String roleId; // required
    public java.lang.String paramsStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_ID((short)2, "schoolId"),
      ROLE_ID((short)3, "roleId"),
      PARAMS_STR((short)4, "paramsStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          case 3: // ROLE_ID
            return ROLE_ID;
          case 4: // PARAMS_STR
            return PARAMS_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args.class, metaDataMap);
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args() {
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args(
      java.lang.String userId,
      java.lang.String schoolId,
      java.lang.String roleId,
      java.lang.String paramsStr)
    {
      this();
      this.userId = userId;
      this.schoolId = schoolId;
      this.roleId = roleId;
      this.paramsStr = paramsStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetRoleId()) {
        this.roleId = other.roleId;
      }
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args deepCopy() {
      return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolId = null;
      this.roleId = null;
      this.paramsStr = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getRoleId() {
      return this.roleId;
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args setRoleId(java.lang.String roleId) {
      this.roleId = roleId;
      return this;
    }

    public void unsetRoleId() {
      this.roleId = null;
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return this.roleId != null;
    }

    public void setRoleIdIsSet(boolean value) {
      if (!value) {
        this.roleId = null;
      }
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((java.lang.String)value);
        }
        break;

      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_ID:
        return getSchoolId();

      case ROLE_ID:
        return getRoleId();

      case PARAMS_STR:
        return getParamsStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_ID:
        return isSetSchoolId();
      case ROLE_ID:
        return isSetRoleId();
      case PARAMS_STR:
        return isSetParamsStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args)
        return this.equals((findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_roleId = true && this.isSetRoleId();
      boolean that_present_roleId = true && that.isSetRoleId();
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (!this.roleId.equals(that.roleId))
          return false;
      }

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoleId()) ? 131071 : 524287);
      if (isSetRoleId())
        hashCode = hashCode * 8191 + roleId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleId:");
      if (this.roleId == null) {
        sb.append("null");
      } else {
        sb.append(this.roleId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleId = iprot.readString();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.roleId != null) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleId);
          oprot.writeFieldEnd();
        }
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        if (struct.isSetRoleId()) {
          optionals.set(2);
        }
        if (struct.isSetParamsStr()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetRoleId()) {
          oprot.writeString(struct.roleId);
        }
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.roleId = iprot.readString();
          struct.setRoleIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result implements org.apache.thrift.TBase<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result.class, metaDataMap);
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result() {
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result deepCopy() {
      return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result)
        return this.equals((findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAccessableOfficeByUserIdAndSchoolIdAndRoleIdAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args implements org.apache.thrift.TBase<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> userIdList; // required
    public java.lang.String paramsStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID_LIST((short)2, "userIdList"),
      PARAMS_STR((short)3, "paramsStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID_LIST
            return USER_ID_LIST;
          case 3: // PARAMS_STR
            return PARAMS_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args.class, metaDataMap);
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args() {
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> userIdList,
      java.lang.String paramsStr)
    {
      this();
      this.schoolId = schoolId;
      this.userIdList = userIdList;
      this.paramsStr = paramsStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args deepCopy() {
      return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userIdList = null;
      this.paramsStr = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID_LIST:
        return getUserIdList();

      case PARAMS_STR:
        return getParamsStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID_LIST:
        return isSetUserIdList();
      case PARAMS_STR:
        return isSetParamsStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args)
        return this.equals((findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list160.size);
                  java.lang.String _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = iprot.readString();
                    struct.userIdList.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter163 : struct.userIdList)
            {
              oprot.writeString(_iter163);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserIdList()) {
          optionals.set(1);
        }
        if (struct.isSetParamsStr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter164 : struct.userIdList)
            {
              oprot.writeString(_iter164);
            }
          }
        }
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list165.size);
            java.lang.String _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = iprot.readString();
              struct.userIdList.add(_elem166);
            }
          }
          struct.setUserIdListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result implements org.apache.thrift.TBase<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result.class, metaDataMap);
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result() {
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result deepCopy() {
      return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result)
        return this.equals((findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserOfficeBySchoolIdAndUserIdList_args implements org.apache.thrift.TBase<findUserOfficeBySchoolIdAndUserIdList_args, findUserOfficeBySchoolIdAndUserIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserOfficeBySchoolIdAndUserIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserOfficeBySchoolIdAndUserIdList_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdList_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> userIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID_LIST((short)2, "userIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID_LIST
            return USER_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserOfficeBySchoolIdAndUserIdList_args.class, metaDataMap);
    }

    public findUserOfficeBySchoolIdAndUserIdList_args() {
    }

    public findUserOfficeBySchoolIdAndUserIdList_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> userIdList)
    {
      this();
      this.schoolId = schoolId;
      this.userIdList = userIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserOfficeBySchoolIdAndUserIdList_args(findUserOfficeBySchoolIdAndUserIdList_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
    }

    public findUserOfficeBySchoolIdAndUserIdList_args deepCopy() {
      return new findUserOfficeBySchoolIdAndUserIdList_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userIdList = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserOfficeBySchoolIdAndUserIdList_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findUserOfficeBySchoolIdAndUserIdList_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID_LIST:
        return getUserIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID_LIST:
        return isSetUserIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserOfficeBySchoolIdAndUserIdList_args)
        return this.equals((findUserOfficeBySchoolIdAndUserIdList_args)that);
      return false;
    }

    public boolean equals(findUserOfficeBySchoolIdAndUserIdList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserOfficeBySchoolIdAndUserIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserOfficeBySchoolIdAndUserIdList_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdList_argsStandardScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdList_argsStandardScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserOfficeBySchoolIdAndUserIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserOfficeBySchoolIdAndUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list168.size);
                  java.lang.String _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = iprot.readString();
                    struct.userIdList.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserOfficeBySchoolIdAndUserIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter171 : struct.userIdList)
            {
              oprot.writeString(_iter171);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserOfficeBySchoolIdAndUserIdList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdList_argsTupleScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdList_argsTupleScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserOfficeBySchoolIdAndUserIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter172 : struct.userIdList)
            {
              oprot.writeString(_iter172);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list173.size);
            java.lang.String _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = iprot.readString();
              struct.userIdList.add(_elem174);
            }
          }
          struct.setUserIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserOfficeBySchoolIdAndUserIdList_result implements org.apache.thrift.TBase<findUserOfficeBySchoolIdAndUserIdList_result, findUserOfficeBySchoolIdAndUserIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserOfficeBySchoolIdAndUserIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserOfficeBySchoolIdAndUserIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdList_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserOfficeBySchoolIdAndUserIdList_result.class, metaDataMap);
    }

    public findUserOfficeBySchoolIdAndUserIdList_result() {
    }

    public findUserOfficeBySchoolIdAndUserIdList_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserOfficeBySchoolIdAndUserIdList_result(findUserOfficeBySchoolIdAndUserIdList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserOfficeBySchoolIdAndUserIdList_result deepCopy() {
      return new findUserOfficeBySchoolIdAndUserIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserOfficeBySchoolIdAndUserIdList_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserOfficeBySchoolIdAndUserIdList_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserOfficeBySchoolIdAndUserIdList_result)
        return this.equals((findUserOfficeBySchoolIdAndUserIdList_result)that);
      return false;
    }

    public boolean equals(findUserOfficeBySchoolIdAndUserIdList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserOfficeBySchoolIdAndUserIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserOfficeBySchoolIdAndUserIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdList_resultStandardScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdList_resultStandardScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserOfficeBySchoolIdAndUserIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserOfficeBySchoolIdAndUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserOfficeBySchoolIdAndUserIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserOfficeBySchoolIdAndUserIdList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdList_resultTupleScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdList_resultTupleScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserOfficeBySchoolIdAndUserIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args implements org.apache.thrift.TBase<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> userIdList; // required
    public java.lang.String paramsStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID_LIST((short)2, "userIdList"),
      PARAMS_STR((short)3, "paramsStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID_LIST
            return USER_ID_LIST;
          case 3: // PARAMS_STR
            return PARAMS_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args.class, metaDataMap);
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args() {
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> userIdList,
      java.lang.String paramsStr)
    {
      this();
      this.schoolId = schoolId;
      this.userIdList = userIdList;
      this.paramsStr = paramsStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args deepCopy() {
      return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userIdList = null;
      this.paramsStr = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID_LIST:
        return getUserIdList();

      case PARAMS_STR:
        return getParamsStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID_LIST:
        return isSetUserIdList();
      case PARAMS_STR:
        return isSetParamsStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args)
        return this.equals((findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list176.size);
                  java.lang.String _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = iprot.readString();
                    struct.userIdList.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter179 : struct.userIdList)
            {
              oprot.writeString(_iter179);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserIdList()) {
          optionals.set(1);
        }
        if (struct.isSetParamsStr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter180 : struct.userIdList)
            {
              oprot.writeString(_iter180);
            }
          }
        }
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list181.size);
            java.lang.String _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = iprot.readString();
              struct.userIdList.add(_elem182);
            }
          }
          struct.setUserIdListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result implements org.apache.thrift.TBase<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result.class, metaDataMap);
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result() {
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result deepCopy() {
      return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result)
        return this.equals((findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserOfficeBySchoolIdAndUserIdListAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findMenuPermByUserIdAndSchoolCodeAndAppCode_args implements org.apache.thrift.TBase<findMenuPermByUserIdAndSchoolCodeAndAppCode_args, findMenuPermByUserIdAndSchoolCodeAndAppCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMenuPermByUserIdAndSchoolCodeAndAppCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMenuPermByUserIdAndSchoolCodeAndAppCode_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolCodeAndAppCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolCodeAndAppCode_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolCode; // required
    public java.lang.String appCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_CODE((short)2, "schoolCode"),
      APP_CODE((short)3, "appCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_CODE
            return SCHOOL_CODE;
          case 3: // APP_CODE
            return APP_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_CODE, new org.apache.thrift.meta_data.FieldMetaData("schoolCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_CODE, new org.apache.thrift.meta_data.FieldMetaData("appCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMenuPermByUserIdAndSchoolCodeAndAppCode_args.class, metaDataMap);
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_args() {
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_args(
      java.lang.String userId,
      java.lang.String schoolCode,
      java.lang.String appCode)
    {
      this();
      this.userId = userId;
      this.schoolCode = schoolCode;
      this.appCode = appCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMenuPermByUserIdAndSchoolCodeAndAppCode_args(findMenuPermByUserIdAndSchoolCodeAndAppCode_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolCode()) {
        this.schoolCode = other.schoolCode;
      }
      if (other.isSetAppCode()) {
        this.appCode = other.appCode;
      }
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_args deepCopy() {
      return new findMenuPermByUserIdAndSchoolCodeAndAppCode_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolCode = null;
      this.appCode = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolCode() {
      return this.schoolCode;
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_args setSchoolCode(java.lang.String schoolCode) {
      this.schoolCode = schoolCode;
      return this;
    }

    public void unsetSchoolCode() {
      this.schoolCode = null;
    }

    /** Returns true if field schoolCode is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolCode() {
      return this.schoolCode != null;
    }

    public void setSchoolCodeIsSet(boolean value) {
      if (!value) {
        this.schoolCode = null;
      }
    }

    public java.lang.String getAppCode() {
      return this.appCode;
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_args setAppCode(java.lang.String appCode) {
      this.appCode = appCode;
      return this;
    }

    public void unsetAppCode() {
      this.appCode = null;
    }

    /** Returns true if field appCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCode() {
      return this.appCode != null;
    }

    public void setAppCodeIsSet(boolean value) {
      if (!value) {
        this.appCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_CODE:
        if (value == null) {
          unsetSchoolCode();
        } else {
          setSchoolCode((java.lang.String)value);
        }
        break;

      case APP_CODE:
        if (value == null) {
          unsetAppCode();
        } else {
          setAppCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_CODE:
        return getSchoolCode();

      case APP_CODE:
        return getAppCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_CODE:
        return isSetSchoolCode();
      case APP_CODE:
        return isSetAppCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findMenuPermByUserIdAndSchoolCodeAndAppCode_args)
        return this.equals((findMenuPermByUserIdAndSchoolCodeAndAppCode_args)that);
      return false;
    }

    public boolean equals(findMenuPermByUserIdAndSchoolCodeAndAppCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolCode = true && this.isSetSchoolCode();
      boolean that_present_schoolCode = true && that.isSetSchoolCode();
      if (this_present_schoolCode || that_present_schoolCode) {
        if (!(this_present_schoolCode && that_present_schoolCode))
          return false;
        if (!this.schoolCode.equals(that.schoolCode))
          return false;
      }

      boolean this_present_appCode = true && this.isSetAppCode();
      boolean that_present_appCode = true && that.isSetAppCode();
      if (this_present_appCode || that_present_appCode) {
        if (!(this_present_appCode && that_present_appCode))
          return false;
        if (!this.appCode.equals(that.appCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolCode()) ? 131071 : 524287);
      if (isSetSchoolCode())
        hashCode = hashCode * 8191 + schoolCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetAppCode()) ? 131071 : 524287);
      if (isSetAppCode())
        hashCode = hashCode * 8191 + appCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findMenuPermByUserIdAndSchoolCodeAndAppCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolCode()).compareTo(other.isSetSchoolCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolCode, other.schoolCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppCode()).compareTo(other.isSetAppCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCode, other.appCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findMenuPermByUserIdAndSchoolCodeAndAppCode_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolCode:");
      if (this.schoolCode == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appCode:");
      if (this.appCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolCodeAndAppCode_argsStandardScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolCodeAndAppCode_argsStandardScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findMenuPermByUserIdAndSchoolCodeAndAppCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMenuPermByUserIdAndSchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolCode = iprot.readString();
                struct.setSchoolCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appCode = iprot.readString();
                struct.setAppCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMenuPermByUserIdAndSchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolCode != null) {
          oprot.writeFieldBegin(SCHOOL_CODE_FIELD_DESC);
          oprot.writeString(struct.schoolCode);
          oprot.writeFieldEnd();
        }
        if (struct.appCode != null) {
          oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
          oprot.writeString(struct.appCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolCodeAndAppCode_argsTupleScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolCodeAndAppCode_argsTupleScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findMenuPermByUserIdAndSchoolCodeAndAppCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolCode()) {
          optionals.set(1);
        }
        if (struct.isSetAppCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolCode()) {
          oprot.writeString(struct.schoolCode);
        }
        if (struct.isSetAppCode()) {
          oprot.writeString(struct.appCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolCode = iprot.readString();
          struct.setSchoolCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appCode = iprot.readString();
          struct.setAppCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findMenuPermByUserIdAndSchoolCodeAndAppCode_result implements org.apache.thrift.TBase<findMenuPermByUserIdAndSchoolCodeAndAppCode_result, findMenuPermByUserIdAndSchoolCodeAndAppCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMenuPermByUserIdAndSchoolCodeAndAppCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMenuPermByUserIdAndSchoolCodeAndAppCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolCodeAndAppCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolCodeAndAppCode_resultTupleSchemeFactory();

    public java.util.List<SysMenuPermissionThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysMenuPermissionThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMenuPermByUserIdAndSchoolCodeAndAppCode_result.class, metaDataMap);
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_result() {
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_result(
      java.util.List<SysMenuPermissionThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMenuPermByUserIdAndSchoolCodeAndAppCode_result(findMenuPermByUserIdAndSchoolCodeAndAppCode_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysMenuPermissionThrift> __this__success = new java.util.ArrayList<SysMenuPermissionThrift>(other.success.size());
        for (SysMenuPermissionThrift other_element : other.success) {
          __this__success.add(new SysMenuPermissionThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_result deepCopy() {
      return new findMenuPermByUserIdAndSchoolCodeAndAppCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysMenuPermissionThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysMenuPermissionThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysMenuPermissionThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysMenuPermissionThrift> getSuccess() {
      return this.success;
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_result setSuccess(java.util.List<SysMenuPermissionThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findMenuPermByUserIdAndSchoolCodeAndAppCode_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysMenuPermissionThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findMenuPermByUserIdAndSchoolCodeAndAppCode_result)
        return this.equals((findMenuPermByUserIdAndSchoolCodeAndAppCode_result)that);
      return false;
    }

    public boolean equals(findMenuPermByUserIdAndSchoolCodeAndAppCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findMenuPermByUserIdAndSchoolCodeAndAppCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findMenuPermByUserIdAndSchoolCodeAndAppCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolCodeAndAppCode_resultStandardScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolCodeAndAppCode_resultStandardScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findMenuPermByUserIdAndSchoolCodeAndAppCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMenuPermByUserIdAndSchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysMenuPermissionThrift>(_list184.size);
                  SysMenuPermissionThrift _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new SysMenuPermissionThrift();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMenuPermByUserIdAndSchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysMenuPermissionThrift _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolCodeAndAppCode_resultTupleScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolCodeAndAppCode_resultTupleScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolCodeAndAppCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findMenuPermByUserIdAndSchoolCodeAndAppCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysMenuPermissionThrift _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysMenuPermissionThrift>(_list189.size);
            SysMenuPermissionThrift _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new SysMenuPermissionThrift();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findMenuPermByUserIdAndSchoolIdAndAppCode_args implements org.apache.thrift.TBase<findMenuPermByUserIdAndSchoolIdAndAppCode_args, findMenuPermByUserIdAndSchoolIdAndAppCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMenuPermByUserIdAndSchoolIdAndAppCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMenuPermByUserIdAndSchoolIdAndAppCode_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolIdAndAppCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolIdAndAppCode_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolId; // required
    public java.lang.String appCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_ID((short)2, "schoolId"),
      APP_CODE((short)3, "appCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          case 3: // APP_CODE
            return APP_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_CODE, new org.apache.thrift.meta_data.FieldMetaData("appCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMenuPermByUserIdAndSchoolIdAndAppCode_args.class, metaDataMap);
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_args() {
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_args(
      java.lang.String userId,
      java.lang.String schoolId,
      java.lang.String appCode)
    {
      this();
      this.userId = userId;
      this.schoolId = schoolId;
      this.appCode = appCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMenuPermByUserIdAndSchoolIdAndAppCode_args(findMenuPermByUserIdAndSchoolIdAndAppCode_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetAppCode()) {
        this.appCode = other.appCode;
      }
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_args deepCopy() {
      return new findMenuPermByUserIdAndSchoolIdAndAppCode_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolId = null;
      this.appCode = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getAppCode() {
      return this.appCode;
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_args setAppCode(java.lang.String appCode) {
      this.appCode = appCode;
      return this;
    }

    public void unsetAppCode() {
      this.appCode = null;
    }

    /** Returns true if field appCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCode() {
      return this.appCode != null;
    }

    public void setAppCodeIsSet(boolean value) {
      if (!value) {
        this.appCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case APP_CODE:
        if (value == null) {
          unsetAppCode();
        } else {
          setAppCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_ID:
        return getSchoolId();

      case APP_CODE:
        return getAppCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_ID:
        return isSetSchoolId();
      case APP_CODE:
        return isSetAppCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findMenuPermByUserIdAndSchoolIdAndAppCode_args)
        return this.equals((findMenuPermByUserIdAndSchoolIdAndAppCode_args)that);
      return false;
    }

    public boolean equals(findMenuPermByUserIdAndSchoolIdAndAppCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_appCode = true && this.isSetAppCode();
      boolean that_present_appCode = true && that.isSetAppCode();
      if (this_present_appCode || that_present_appCode) {
        if (!(this_present_appCode && that_present_appCode))
          return false;
        if (!this.appCode.equals(that.appCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAppCode()) ? 131071 : 524287);
      if (isSetAppCode())
        hashCode = hashCode * 8191 + appCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findMenuPermByUserIdAndSchoolIdAndAppCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppCode()).compareTo(other.isSetAppCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCode, other.appCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findMenuPermByUserIdAndSchoolIdAndAppCode_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appCode:");
      if (this.appCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolIdAndAppCode_argsStandardScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolIdAndAppCode_argsStandardScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findMenuPermByUserIdAndSchoolIdAndAppCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMenuPermByUserIdAndSchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appCode = iprot.readString();
                struct.setAppCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMenuPermByUserIdAndSchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.appCode != null) {
          oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
          oprot.writeString(struct.appCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolIdAndAppCode_argsTupleScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolIdAndAppCode_argsTupleScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findMenuPermByUserIdAndSchoolIdAndAppCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        if (struct.isSetAppCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetAppCode()) {
          oprot.writeString(struct.appCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appCode = iprot.readString();
          struct.setAppCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findMenuPermByUserIdAndSchoolIdAndAppCode_result implements org.apache.thrift.TBase<findMenuPermByUserIdAndSchoolIdAndAppCode_result, findMenuPermByUserIdAndSchoolIdAndAppCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMenuPermByUserIdAndSchoolIdAndAppCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMenuPermByUserIdAndSchoolIdAndAppCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolIdAndAppCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findMenuPermByUserIdAndSchoolIdAndAppCode_resultTupleSchemeFactory();

    public java.util.List<SysMenuPermissionThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysMenuPermissionThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMenuPermByUserIdAndSchoolIdAndAppCode_result.class, metaDataMap);
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_result() {
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_result(
      java.util.List<SysMenuPermissionThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMenuPermByUserIdAndSchoolIdAndAppCode_result(findMenuPermByUserIdAndSchoolIdAndAppCode_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysMenuPermissionThrift> __this__success = new java.util.ArrayList<SysMenuPermissionThrift>(other.success.size());
        for (SysMenuPermissionThrift other_element : other.success) {
          __this__success.add(new SysMenuPermissionThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_result deepCopy() {
      return new findMenuPermByUserIdAndSchoolIdAndAppCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysMenuPermissionThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysMenuPermissionThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysMenuPermissionThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysMenuPermissionThrift> getSuccess() {
      return this.success;
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_result setSuccess(java.util.List<SysMenuPermissionThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findMenuPermByUserIdAndSchoolIdAndAppCode_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysMenuPermissionThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findMenuPermByUserIdAndSchoolIdAndAppCode_result)
        return this.equals((findMenuPermByUserIdAndSchoolIdAndAppCode_result)that);
      return false;
    }

    public boolean equals(findMenuPermByUserIdAndSchoolIdAndAppCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findMenuPermByUserIdAndSchoolIdAndAppCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findMenuPermByUserIdAndSchoolIdAndAppCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolIdAndAppCode_resultStandardScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolIdAndAppCode_resultStandardScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findMenuPermByUserIdAndSchoolIdAndAppCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMenuPermByUserIdAndSchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysMenuPermissionThrift>(_list192.size);
                  SysMenuPermissionThrift _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new SysMenuPermissionThrift();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMenuPermByUserIdAndSchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysMenuPermissionThrift _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermByUserIdAndSchoolIdAndAppCode_resultTupleScheme getScheme() {
        return new findMenuPermByUserIdAndSchoolIdAndAppCode_resultTupleScheme();
      }
    }

    private static class findMenuPermByUserIdAndSchoolIdAndAppCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findMenuPermByUserIdAndSchoolIdAndAppCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysMenuPermissionThrift _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMenuPermByUserIdAndSchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysMenuPermissionThrift>(_list197.size);
            SysMenuPermissionThrift _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new SysMenuPermissionThrift();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args implements org.apache.thrift.TBase<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String roleId; // required
    public java.lang.String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      ROLE_ID((short)2, "roleId"),
      JSON_STR((short)3, "jsonStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // ROLE_ID
            return ROLE_ID;
          case 3: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args.class, metaDataMap);
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args() {
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args(
      java.lang.String schoolId,
      java.lang.String roleId,
      java.lang.String jsonStr)
    {
      this();
      this.schoolId = schoolId;
      this.roleId = roleId;
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetRoleId()) {
        this.roleId = other.roleId;
      }
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args deepCopy() {
      return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.roleId = null;
      this.jsonStr = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getRoleId() {
      return this.roleId;
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args setRoleId(java.lang.String roleId) {
      this.roleId = roleId;
      return this;
    }

    public void unsetRoleId() {
      this.roleId = null;
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return this.roleId != null;
    }

    public void setRoleIdIsSet(boolean value) {
      if (!value) {
        this.roleId = null;
      }
    }

    public java.lang.String getJsonStr() {
      return this.jsonStr;
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args setJsonStr(java.lang.String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((java.lang.String)value);
        }
        break;

      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case ROLE_ID:
        return getRoleId();

      case JSON_STR:
        return getJsonStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case ROLE_ID:
        return isSetRoleId();
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args)
        return this.equals((findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args)that);
      return false;
    }

    public boolean equals(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_roleId = true && this.isSetRoleId();
      boolean that_present_roleId = true && that.isSetRoleId();
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (!this.roleId.equals(that.roleId))
          return false;
      }

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoleId()) ? 131071 : 524287);
      if (isSetRoleId())
        hashCode = hashCode * 8191 + roleId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonStr()) ? 131071 : 524287);
      if (isSetJsonStr())
        hashCode = hashCode * 8191 + jsonStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleId:");
      if (this.roleId == null) {
        sb.append("null");
      } else {
        sb.append(this.roleId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsStandardScheme getScheme() {
        return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsStandardScheme();
      }
    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleId = iprot.readString();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.roleId != null) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsTupleScheme getScheme() {
        return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsTupleScheme();
      }
    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetRoleId()) {
          optionals.set(1);
        }
        if (struct.isSetJsonStr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetRoleId()) {
          oprot.writeString(struct.roleId);
        }
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roleId = iprot.readString();
          struct.setRoleIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result implements org.apache.thrift.TBase<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result.class, metaDataMap);
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result() {
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result deepCopy() {
      return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result)
        return this.equals((findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result)that);
      return false;
    }

    public boolean equals(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultStandardScheme getScheme() {
        return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultStandardScheme();
      }
    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultTupleScheme getScheme() {
        return new findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultTupleScheme();
      }
    }

    private static class findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMenuPermBySchoolIdAndRoleIdAndOtherJsonParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleByUserIdAndSchoolCode_args implements org.apache.thrift.TBase<findRoleByUserIdAndSchoolCode_args, findRoleByUserIdAndSchoolCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleByUserIdAndSchoolCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleByUserIdAndSchoolCode_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleByUserIdAndSchoolCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleByUserIdAndSchoolCode_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_CODE((short)2, "schoolCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_CODE
            return SCHOOL_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_CODE, new org.apache.thrift.meta_data.FieldMetaData("schoolCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleByUserIdAndSchoolCode_args.class, metaDataMap);
    }

    public findRoleByUserIdAndSchoolCode_args() {
    }

    public findRoleByUserIdAndSchoolCode_args(
      java.lang.String userId,
      java.lang.String schoolCode)
    {
      this();
      this.userId = userId;
      this.schoolCode = schoolCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleByUserIdAndSchoolCode_args(findRoleByUserIdAndSchoolCode_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolCode()) {
        this.schoolCode = other.schoolCode;
      }
    }

    public findRoleByUserIdAndSchoolCode_args deepCopy() {
      return new findRoleByUserIdAndSchoolCode_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolCode = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findRoleByUserIdAndSchoolCode_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolCode() {
      return this.schoolCode;
    }

    public findRoleByUserIdAndSchoolCode_args setSchoolCode(java.lang.String schoolCode) {
      this.schoolCode = schoolCode;
      return this;
    }

    public void unsetSchoolCode() {
      this.schoolCode = null;
    }

    /** Returns true if field schoolCode is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolCode() {
      return this.schoolCode != null;
    }

    public void setSchoolCodeIsSet(boolean value) {
      if (!value) {
        this.schoolCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_CODE:
        if (value == null) {
          unsetSchoolCode();
        } else {
          setSchoolCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_CODE:
        return getSchoolCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_CODE:
        return isSetSchoolCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleByUserIdAndSchoolCode_args)
        return this.equals((findRoleByUserIdAndSchoolCode_args)that);
      return false;
    }

    public boolean equals(findRoleByUserIdAndSchoolCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolCode = true && this.isSetSchoolCode();
      boolean that_present_schoolCode = true && that.isSetSchoolCode();
      if (this_present_schoolCode || that_present_schoolCode) {
        if (!(this_present_schoolCode && that_present_schoolCode))
          return false;
        if (!this.schoolCode.equals(that.schoolCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolCode()) ? 131071 : 524287);
      if (isSetSchoolCode())
        hashCode = hashCode * 8191 + schoolCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleByUserIdAndSchoolCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolCode()).compareTo(other.isSetSchoolCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolCode, other.schoolCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleByUserIdAndSchoolCode_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolCode:");
      if (this.schoolCode == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleByUserIdAndSchoolCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolCode_argsStandardScheme getScheme() {
        return new findRoleByUserIdAndSchoolCode_argsStandardScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleByUserIdAndSchoolCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleByUserIdAndSchoolCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolCode = iprot.readString();
                struct.setSchoolCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleByUserIdAndSchoolCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolCode != null) {
          oprot.writeFieldBegin(SCHOOL_CODE_FIELD_DESC);
          oprot.writeString(struct.schoolCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleByUserIdAndSchoolCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolCode_argsTupleScheme getScheme() {
        return new findRoleByUserIdAndSchoolCode_argsTupleScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleByUserIdAndSchoolCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolCode()) {
          oprot.writeString(struct.schoolCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolCode = iprot.readString();
          struct.setSchoolCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleByUserIdAndSchoolCode_result implements org.apache.thrift.TBase<findRoleByUserIdAndSchoolCode_result, findRoleByUserIdAndSchoolCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleByUserIdAndSchoolCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleByUserIdAndSchoolCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleByUserIdAndSchoolCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleByUserIdAndSchoolCode_resultTupleSchemeFactory();

    public java.util.List<SysRoleThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRoleThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleByUserIdAndSchoolCode_result.class, metaDataMap);
    }

    public findRoleByUserIdAndSchoolCode_result() {
    }

    public findRoleByUserIdAndSchoolCode_result(
      java.util.List<SysRoleThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleByUserIdAndSchoolCode_result(findRoleByUserIdAndSchoolCode_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysRoleThrift> __this__success = new java.util.ArrayList<SysRoleThrift>(other.success.size());
        for (SysRoleThrift other_element : other.success) {
          __this__success.add(new SysRoleThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findRoleByUserIdAndSchoolCode_result deepCopy() {
      return new findRoleByUserIdAndSchoolCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysRoleThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysRoleThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysRoleThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysRoleThrift> getSuccess() {
      return this.success;
    }

    public findRoleByUserIdAndSchoolCode_result setSuccess(java.util.List<SysRoleThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findRoleByUserIdAndSchoolCode_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysRoleThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleByUserIdAndSchoolCode_result)
        return this.equals((findRoleByUserIdAndSchoolCode_result)that);
      return false;
    }

    public boolean equals(findRoleByUserIdAndSchoolCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleByUserIdAndSchoolCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleByUserIdAndSchoolCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleByUserIdAndSchoolCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolCode_resultStandardScheme getScheme() {
        return new findRoleByUserIdAndSchoolCode_resultStandardScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleByUserIdAndSchoolCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleByUserIdAndSchoolCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysRoleThrift>(_list200.size);
                  SysRoleThrift _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new SysRoleThrift();
                    _elem201.read(iprot);
                    struct.success.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleByUserIdAndSchoolCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysRoleThrift _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleByUserIdAndSchoolCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolCode_resultTupleScheme getScheme() {
        return new findRoleByUserIdAndSchoolCode_resultTupleScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleByUserIdAndSchoolCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysRoleThrift _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysRoleThrift>(_list205.size);
            SysRoleThrift _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new SysRoleThrift();
              _elem206.read(iprot);
              struct.success.add(_elem206);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleBySchoolId_args implements org.apache.thrift.TBase<findRoleBySchoolId_args, findRoleBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleBySchoolId_args.class, metaDataMap);
    }

    public findRoleBySchoolId_args() {
    }

    public findRoleBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleBySchoolId_args(findRoleBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findRoleBySchoolId_args deepCopy() {
      return new findRoleBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findRoleBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleBySchoolId_args)
        return this.equals((findRoleBySchoolId_args)that);
      return false;
    }

    public boolean equals(findRoleBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolId_argsStandardScheme getScheme() {
        return new findRoleBySchoolId_argsStandardScheme();
      }
    }

    private static class findRoleBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolId_argsTupleScheme getScheme() {
        return new findRoleBySchoolId_argsTupleScheme();
      }
    }

    private static class findRoleBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleBySchoolId_result implements org.apache.thrift.TBase<findRoleBySchoolId_result, findRoleBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleBySchoolId_resultTupleSchemeFactory();

    public java.util.List<SysRoleThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRoleThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleBySchoolId_result.class, metaDataMap);
    }

    public findRoleBySchoolId_result() {
    }

    public findRoleBySchoolId_result(
      java.util.List<SysRoleThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleBySchoolId_result(findRoleBySchoolId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysRoleThrift> __this__success = new java.util.ArrayList<SysRoleThrift>(other.success.size());
        for (SysRoleThrift other_element : other.success) {
          __this__success.add(new SysRoleThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findRoleBySchoolId_result deepCopy() {
      return new findRoleBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysRoleThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysRoleThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysRoleThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysRoleThrift> getSuccess() {
      return this.success;
    }

    public findRoleBySchoolId_result setSuccess(java.util.List<SysRoleThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findRoleBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysRoleThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleBySchoolId_result)
        return this.equals((findRoleBySchoolId_result)that);
      return false;
    }

    public boolean equals(findRoleBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolId_resultStandardScheme getScheme() {
        return new findRoleBySchoolId_resultStandardScheme();
      }
    }

    private static class findRoleBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysRoleThrift>(_list208.size);
                  SysRoleThrift _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new SysRoleThrift();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysRoleThrift _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolId_resultTupleScheme getScheme() {
        return new findRoleBySchoolId_resultTupleScheme();
      }
    }

    private static class findRoleBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysRoleThrift _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysRoleThrift>(_list213.size);
            SysRoleThrift _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new SysRoleThrift();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleByRoleId_args implements org.apache.thrift.TBase<findRoleByRoleId_args, findRoleByRoleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleByRoleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleByRoleId_args");

    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleByRoleId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleByRoleId_argsTupleSchemeFactory();

    public java.lang.String roleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_ID((short)1, "roleId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_ID
            return ROLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleByRoleId_args.class, metaDataMap);
    }

    public findRoleByRoleId_args() {
    }

    public findRoleByRoleId_args(
      java.lang.String roleId)
    {
      this();
      this.roleId = roleId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleByRoleId_args(findRoleByRoleId_args other) {
      if (other.isSetRoleId()) {
        this.roleId = other.roleId;
      }
    }

    public findRoleByRoleId_args deepCopy() {
      return new findRoleByRoleId_args(this);
    }

    @Override
    public void clear() {
      this.roleId = null;
    }

    public java.lang.String getRoleId() {
      return this.roleId;
    }

    public findRoleByRoleId_args setRoleId(java.lang.String roleId) {
      this.roleId = roleId;
      return this;
    }

    public void unsetRoleId() {
      this.roleId = null;
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return this.roleId != null;
    }

    public void setRoleIdIsSet(boolean value) {
      if (!value) {
        this.roleId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_ID:
        return getRoleId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROLE_ID:
        return isSetRoleId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleByRoleId_args)
        return this.equals((findRoleByRoleId_args)that);
      return false;
    }

    public boolean equals(findRoleByRoleId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roleId = true && this.isSetRoleId();
      boolean that_present_roleId = true && that.isSetRoleId();
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (!this.roleId.equals(that.roleId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRoleId()) ? 131071 : 524287);
      if (isSetRoleId())
        hashCode = hashCode * 8191 + roleId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleByRoleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleByRoleId_args(");
      boolean first = true;

      sb.append("roleId:");
      if (this.roleId == null) {
        sb.append("null");
      } else {
        sb.append(this.roleId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleByRoleId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByRoleId_argsStandardScheme getScheme() {
        return new findRoleByRoleId_argsStandardScheme();
      }
    }

    private static class findRoleByRoleId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleByRoleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleByRoleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleId = iprot.readString();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleByRoleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleId != null) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleByRoleId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByRoleId_argsTupleScheme getScheme() {
        return new findRoleByRoleId_argsTupleScheme();
      }
    }

    private static class findRoleByRoleId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleByRoleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleByRoleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoleId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleId()) {
          oprot.writeString(struct.roleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleByRoleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleId = iprot.readString();
          struct.setRoleIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleByRoleId_result implements org.apache.thrift.TBase<findRoleByRoleId_result, findRoleByRoleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleByRoleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleByRoleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleByRoleId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleByRoleId_resultTupleSchemeFactory();

    public SysRoleThrift success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRoleThrift.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleByRoleId_result.class, metaDataMap);
    }

    public findRoleByRoleId_result() {
    }

    public findRoleByRoleId_result(
      SysRoleThrift success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleByRoleId_result(findRoleByRoleId_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysRoleThrift(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findRoleByRoleId_result deepCopy() {
      return new findRoleByRoleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public SysRoleThrift getSuccess() {
      return this.success;
    }

    public findRoleByRoleId_result setSuccess(SysRoleThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findRoleByRoleId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysRoleThrift)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleByRoleId_result)
        return this.equals((findRoleByRoleId_result)that);
      return false;
    }

    public boolean equals(findRoleByRoleId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleByRoleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleByRoleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleByRoleId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByRoleId_resultStandardScheme getScheme() {
        return new findRoleByRoleId_resultStandardScheme();
      }
    }

    private static class findRoleByRoleId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleByRoleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleByRoleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysRoleThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleByRoleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleByRoleId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByRoleId_resultTupleScheme getScheme() {
        return new findRoleByRoleId_resultTupleScheme();
      }
    }

    private static class findRoleByRoleId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleByRoleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleByRoleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleByRoleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SysRoleThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleByUserIdAndSchoolId_args implements org.apache.thrift.TBase<findRoleByUserIdAndSchoolId_args, findRoleByUserIdAndSchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleByUserIdAndSchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleByUserIdAndSchoolId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleByUserIdAndSchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleByUserIdAndSchoolId_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_ID((short)2, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleByUserIdAndSchoolId_args.class, metaDataMap);
    }

    public findRoleByUserIdAndSchoolId_args() {
    }

    public findRoleByUserIdAndSchoolId_args(
      java.lang.String userId,
      java.lang.String schoolId)
    {
      this();
      this.userId = userId;
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleByUserIdAndSchoolId_args(findRoleByUserIdAndSchoolId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findRoleByUserIdAndSchoolId_args deepCopy() {
      return new findRoleByUserIdAndSchoolId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findRoleByUserIdAndSchoolId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findRoleByUserIdAndSchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleByUserIdAndSchoolId_args)
        return this.equals((findRoleByUserIdAndSchoolId_args)that);
      return false;
    }

    public boolean equals(findRoleByUserIdAndSchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleByUserIdAndSchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleByUserIdAndSchoolId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleByUserIdAndSchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolId_argsStandardScheme getScheme() {
        return new findRoleByUserIdAndSchoolId_argsStandardScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleByUserIdAndSchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleByUserIdAndSchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolId_argsTupleScheme getScheme() {
        return new findRoleByUserIdAndSchoolId_argsTupleScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleByUserIdAndSchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleByUserIdAndSchoolId_result implements org.apache.thrift.TBase<findRoleByUserIdAndSchoolId_result, findRoleByUserIdAndSchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleByUserIdAndSchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleByUserIdAndSchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleByUserIdAndSchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleByUserIdAndSchoolId_resultTupleSchemeFactory();

    public java.util.List<SysRoleThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRoleThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleByUserIdAndSchoolId_result.class, metaDataMap);
    }

    public findRoleByUserIdAndSchoolId_result() {
    }

    public findRoleByUserIdAndSchoolId_result(
      java.util.List<SysRoleThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleByUserIdAndSchoolId_result(findRoleByUserIdAndSchoolId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysRoleThrift> __this__success = new java.util.ArrayList<SysRoleThrift>(other.success.size());
        for (SysRoleThrift other_element : other.success) {
          __this__success.add(new SysRoleThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findRoleByUserIdAndSchoolId_result deepCopy() {
      return new findRoleByUserIdAndSchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysRoleThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysRoleThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysRoleThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysRoleThrift> getSuccess() {
      return this.success;
    }

    public findRoleByUserIdAndSchoolId_result setSuccess(java.util.List<SysRoleThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findRoleByUserIdAndSchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysRoleThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleByUserIdAndSchoolId_result)
        return this.equals((findRoleByUserIdAndSchoolId_result)that);
      return false;
    }

    public boolean equals(findRoleByUserIdAndSchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleByUserIdAndSchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleByUserIdAndSchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleByUserIdAndSchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolId_resultStandardScheme getScheme() {
        return new findRoleByUserIdAndSchoolId_resultStandardScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleByUserIdAndSchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysRoleThrift>(_list216.size);
                  SysRoleThrift _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new SysRoleThrift();
                    _elem217.read(iprot);
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysRoleThrift _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleByUserIdAndSchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleByUserIdAndSchoolId_resultTupleScheme getScheme() {
        return new findRoleByUserIdAndSchoolId_resultTupleScheme();
      }
    }

    private static class findRoleByUserIdAndSchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleByUserIdAndSchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysRoleThrift _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleByUserIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysRoleThrift>(_list221.size);
            SysRoleThrift _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new SysRoleThrift();
              _elem222.read(iprot);
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolRoleListByUserId_args implements org.apache.thrift.TBase<findSchoolRoleListByUserId_args, findSchoolRoleListByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolRoleListByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolRoleListByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolRoleListByUserId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolRoleListByUserId_argsTupleSchemeFactory();

    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolRoleListByUserId_args.class, metaDataMap);
    }

    public findSchoolRoleListByUserId_args() {
    }

    public findSchoolRoleListByUserId_args(
      java.lang.String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolRoleListByUserId_args(findSchoolRoleListByUserId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public findSchoolRoleListByUserId_args deepCopy() {
      return new findSchoolRoleListByUserId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findSchoolRoleListByUserId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolRoleListByUserId_args)
        return this.equals((findSchoolRoleListByUserId_args)that);
      return false;
    }

    public boolean equals(findSchoolRoleListByUserId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolRoleListByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolRoleListByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolRoleListByUserId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolRoleListByUserId_argsStandardScheme getScheme() {
        return new findSchoolRoleListByUserId_argsStandardScheme();
      }
    }

    private static class findSchoolRoleListByUserId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolRoleListByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolRoleListByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolRoleListByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolRoleListByUserId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolRoleListByUserId_argsTupleScheme getScheme() {
        return new findSchoolRoleListByUserId_argsTupleScheme();
      }
    }

    private static class findSchoolRoleListByUserId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolRoleListByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolRoleListByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolRoleListByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolRoleListByUserId_result implements org.apache.thrift.TBase<findSchoolRoleListByUserId_result, findSchoolRoleListByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolRoleListByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolRoleListByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolRoleListByUserId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolRoleListByUserId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolRoleListByUserId_result.class, metaDataMap);
    }

    public findSchoolRoleListByUserId_result() {
    }

    public findSchoolRoleListByUserId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolRoleListByUserId_result(findSchoolRoleListByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSchoolRoleListByUserId_result deepCopy() {
      return new findSchoolRoleListByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findSchoolRoleListByUserId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSchoolRoleListByUserId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolRoleListByUserId_result)
        return this.equals((findSchoolRoleListByUserId_result)that);
      return false;
    }

    public boolean equals(findSchoolRoleListByUserId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolRoleListByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolRoleListByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolRoleListByUserId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolRoleListByUserId_resultStandardScheme getScheme() {
        return new findSchoolRoleListByUserId_resultStandardScheme();
      }
    }

    private static class findSchoolRoleListByUserId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolRoleListByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolRoleListByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolRoleListByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolRoleListByUserId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolRoleListByUserId_resultTupleScheme getScheme() {
        return new findSchoolRoleListByUserId_resultTupleScheme();
      }
    }

    private static class findSchoolRoleListByUserId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolRoleListByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolRoleListByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolRoleListByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOpenRoleBySchoolId_args implements org.apache.thrift.TBase<findOpenRoleBySchoolId_args, findOpenRoleBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOpenRoleBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOpenRoleBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOpenRoleBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOpenRoleBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String groupType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      GROUP_TYPE((short)2, "groupType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // GROUP_TYPE
            return GROUP_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOpenRoleBySchoolId_args.class, metaDataMap);
    }

    public findOpenRoleBySchoolId_args() {
    }

    public findOpenRoleBySchoolId_args(
      java.lang.String schoolId,
      java.lang.String groupType)
    {
      this();
      this.schoolId = schoolId;
      this.groupType = groupType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOpenRoleBySchoolId_args(findOpenRoleBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
    }

    public findOpenRoleBySchoolId_args deepCopy() {
      return new findOpenRoleBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.groupType = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findOpenRoleBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getGroupType() {
      return this.groupType;
    }

    public findOpenRoleBySchoolId_args setGroupType(java.lang.String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case GROUP_TYPE:
        return getGroupType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case GROUP_TYPE:
        return isSetGroupType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOpenRoleBySchoolId_args)
        return this.equals((findOpenRoleBySchoolId_args)that);
      return false;
    }

    public boolean equals(findOpenRoleBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetGroupType()) ? 131071 : 524287);
      if (isSetGroupType())
        hashCode = hashCode * 8191 + groupType.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOpenRoleBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGroupType()).compareTo(other.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, other.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOpenRoleBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOpenRoleBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOpenRoleBySchoolId_argsStandardScheme getScheme() {
        return new findOpenRoleBySchoolId_argsStandardScheme();
      }
    }

    private static class findOpenRoleBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOpenRoleBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOpenRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOpenRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOpenRoleBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOpenRoleBySchoolId_argsTupleScheme getScheme() {
        return new findOpenRoleBySchoolId_argsTupleScheme();
      }
    }

    private static class findOpenRoleBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOpenRoleBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOpenRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetGroupType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOpenRoleBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOpenRoleBySchoolId_result implements org.apache.thrift.TBase<findOpenRoleBySchoolId_result, findOpenRoleBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOpenRoleBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOpenRoleBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOpenRoleBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOpenRoleBySchoolId_resultTupleSchemeFactory();

    public java.util.List<SysRoleThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRoleThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOpenRoleBySchoolId_result.class, metaDataMap);
    }

    public findOpenRoleBySchoolId_result() {
    }

    public findOpenRoleBySchoolId_result(
      java.util.List<SysRoleThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOpenRoleBySchoolId_result(findOpenRoleBySchoolId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysRoleThrift> __this__success = new java.util.ArrayList<SysRoleThrift>(other.success.size());
        for (SysRoleThrift other_element : other.success) {
          __this__success.add(new SysRoleThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findOpenRoleBySchoolId_result deepCopy() {
      return new findOpenRoleBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysRoleThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysRoleThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysRoleThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysRoleThrift> getSuccess() {
      return this.success;
    }

    public findOpenRoleBySchoolId_result setSuccess(java.util.List<SysRoleThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findOpenRoleBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysRoleThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOpenRoleBySchoolId_result)
        return this.equals((findOpenRoleBySchoolId_result)that);
      return false;
    }

    public boolean equals(findOpenRoleBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOpenRoleBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOpenRoleBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOpenRoleBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOpenRoleBySchoolId_resultStandardScheme getScheme() {
        return new findOpenRoleBySchoolId_resultStandardScheme();
      }
    }

    private static class findOpenRoleBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOpenRoleBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOpenRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysRoleThrift>(_list224.size);
                  SysRoleThrift _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = new SysRoleThrift();
                    _elem225.read(iprot);
                    struct.success.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOpenRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysRoleThrift _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOpenRoleBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOpenRoleBySchoolId_resultTupleScheme getScheme() {
        return new findOpenRoleBySchoolId_resultTupleScheme();
      }
    }

    private static class findOpenRoleBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOpenRoleBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOpenRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysRoleThrift _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOpenRoleBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysRoleThrift>(_list229.size);
            SysRoleThrift _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = new SysRoleThrift();
              _elem230.read(iprot);
              struct.success.add(_elem230);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerRole_args implements org.apache.thrift.TBase<registerRole_args, registerRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerRole_args");

    private static final org.apache.thrift.protocol.TField PARAMS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerRole_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerRole_argsTupleSchemeFactory();

    public java.lang.String paramsStr; // required
    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS_STR((short)1, "paramsStr"),
      USER_ID((short)2, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS_STR
            return PARAMS_STR;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS_STR, new org.apache.thrift.meta_data.FieldMetaData("paramsStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerRole_args.class, metaDataMap);
    }

    public registerRole_args() {
    }

    public registerRole_args(
      java.lang.String paramsStr,
      java.lang.String userId)
    {
      this();
      this.paramsStr = paramsStr;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerRole_args(registerRole_args other) {
      if (other.isSetParamsStr()) {
        this.paramsStr = other.paramsStr;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public registerRole_args deepCopy() {
      return new registerRole_args(this);
    }

    @Override
    public void clear() {
      this.paramsStr = null;
      this.userId = null;
    }

    public java.lang.String getParamsStr() {
      return this.paramsStr;
    }

    public registerRole_args setParamsStr(java.lang.String paramsStr) {
      this.paramsStr = paramsStr;
      return this;
    }

    public void unsetParamsStr() {
      this.paramsStr = null;
    }

    /** Returns true if field paramsStr is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsStr() {
      return this.paramsStr != null;
    }

    public void setParamsStrIsSet(boolean value) {
      if (!value) {
        this.paramsStr = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public registerRole_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PARAMS_STR:
        if (value == null) {
          unsetParamsStr();
        } else {
          setParamsStr((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS_STR:
        return getParamsStr();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PARAMS_STR:
        return isSetParamsStr();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerRole_args)
        return this.equals((registerRole_args)that);
      return false;
    }

    public boolean equals(registerRole_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paramsStr = true && this.isSetParamsStr();
      boolean that_present_paramsStr = true && that.isSetParamsStr();
      if (this_present_paramsStr || that_present_paramsStr) {
        if (!(this_present_paramsStr && that_present_paramsStr))
          return false;
        if (!this.paramsStr.equals(that.paramsStr))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetParamsStr()) ? 131071 : 524287);
      if (isSetParamsStr())
        hashCode = hashCode * 8191 + paramsStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetParamsStr()).compareTo(other.isSetParamsStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsStr, other.paramsStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerRole_args(");
      boolean first = true;

      sb.append("paramsStr:");
      if (this.paramsStr == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerRole_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerRole_argsStandardScheme getScheme() {
        return new registerRole_argsStandardScheme();
      }
    }

    private static class registerRole_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramsStr = iprot.readString();
                struct.setParamsStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramsStr != null) {
          oprot.writeFieldBegin(PARAMS_STR_FIELD_DESC);
          oprot.writeString(struct.paramsStr);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerRole_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerRole_argsTupleScheme getScheme() {
        return new registerRole_argsTupleScheme();
      }
    }

    private static class registerRole_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetParamsStr()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParamsStr()) {
          oprot.writeString(struct.paramsStr);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paramsStr = iprot.readString();
          struct.setParamsStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerRole_result implements org.apache.thrift.TBase<registerRole_result, registerRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerRole_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerRole_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerRole_resultTupleSchemeFactory();

    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerRole_result.class, metaDataMap);
    }

    public registerRole_result() {
    }

    public registerRole_result(
      ThriftBusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerRole_result(registerRole_result other) {
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public registerRole_result deepCopy() {
      return new registerRole_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public registerRole_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerRole_result)
        return this.equals((registerRole_result)that);
      return false;
    }

    public boolean equals(registerRole_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerRole_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerRole_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerRole_resultStandardScheme getScheme() {
        return new registerRole_resultStandardScheme();
      }
    }

    private static class registerRole_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerRole_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerRole_resultTupleScheme getScheme() {
        return new registerRole_resultTupleScheme();
      }
    }

    private static class registerRole_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRolesByUserIdList_args implements org.apache.thrift.TBase<findRolesByUserIdList_args, findRolesByUserIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRolesByUserIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRolesByUserIdList_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRolesByUserIdList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRolesByUserIdList_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> userIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID_LIST((short)2, "userIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID_LIST
            return USER_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRolesByUserIdList_args.class, metaDataMap);
    }

    public findRolesByUserIdList_args() {
    }

    public findRolesByUserIdList_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> userIdList)
    {
      this();
      this.schoolId = schoolId;
      this.userIdList = userIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRolesByUserIdList_args(findRolesByUserIdList_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
    }

    public findRolesByUserIdList_args deepCopy() {
      return new findRolesByUserIdList_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userIdList = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findRolesByUserIdList_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findRolesByUserIdList_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID_LIST:
        return getUserIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID_LIST:
        return isSetUserIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRolesByUserIdList_args)
        return this.equals((findRolesByUserIdList_args)that);
      return false;
    }

    public boolean equals(findRolesByUserIdList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRolesByUserIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRolesByUserIdList_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRolesByUserIdList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRolesByUserIdList_argsStandardScheme getScheme() {
        return new findRolesByUserIdList_argsStandardScheme();
      }
    }

    private static class findRolesByUserIdList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRolesByUserIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRolesByUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list232.size);
                  java.lang.String _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = iprot.readString();
                    struct.userIdList.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRolesByUserIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter235 : struct.userIdList)
            {
              oprot.writeString(_iter235);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRolesByUserIdList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRolesByUserIdList_argsTupleScheme getScheme() {
        return new findRolesByUserIdList_argsTupleScheme();
      }
    }

    private static class findRolesByUserIdList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRolesByUserIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRolesByUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter236 : struct.userIdList)
            {
              oprot.writeString(_iter236);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRolesByUserIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list237.size);
            java.lang.String _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = iprot.readString();
              struct.userIdList.add(_elem238);
            }
          }
          struct.setUserIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRolesByUserIdList_result implements org.apache.thrift.TBase<findRolesByUserIdList_result, findRolesByUserIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRolesByUserIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRolesByUserIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRolesByUserIdList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRolesByUserIdList_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRolesByUserIdList_result.class, metaDataMap);
    }

    public findRolesByUserIdList_result() {
    }

    public findRolesByUserIdList_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRolesByUserIdList_result(findRolesByUserIdList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findRolesByUserIdList_result deepCopy() {
      return new findRolesByUserIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findRolesByUserIdList_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findRolesByUserIdList_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRolesByUserIdList_result)
        return this.equals((findRolesByUserIdList_result)that);
      return false;
    }

    public boolean equals(findRolesByUserIdList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRolesByUserIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRolesByUserIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRolesByUserIdList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRolesByUserIdList_resultStandardScheme getScheme() {
        return new findRolesByUserIdList_resultStandardScheme();
      }
    }

    private static class findRolesByUserIdList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRolesByUserIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRolesByUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRolesByUserIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRolesByUserIdList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRolesByUserIdList_resultTupleScheme getScheme() {
        return new findRolesByUserIdList_resultTupleScheme();
      }
    }

    private static class findRolesByUserIdList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRolesByUserIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRolesByUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRolesByUserIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolAppDetailBySchoolCodeAndAppCode_args implements org.apache.thrift.TBase<findSchoolAppDetailBySchoolCodeAndAppCode_args, findSchoolAppDetailBySchoolCodeAndAppCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolAppDetailBySchoolCodeAndAppCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolAppDetailBySchoolCodeAndAppCode_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolAppDetailBySchoolCodeAndAppCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolAppDetailBySchoolCodeAndAppCode_argsTupleSchemeFactory();

    public java.lang.String schoolCode; // required
    public java.lang.String appCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_CODE((short)1, "schoolCode"),
      APP_CODE((short)2, "appCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_CODE
            return SCHOOL_CODE;
          case 2: // APP_CODE
            return APP_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_CODE, new org.apache.thrift.meta_data.FieldMetaData("schoolCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_CODE, new org.apache.thrift.meta_data.FieldMetaData("appCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolAppDetailBySchoolCodeAndAppCode_args.class, metaDataMap);
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_args() {
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_args(
      java.lang.String schoolCode,
      java.lang.String appCode)
    {
      this();
      this.schoolCode = schoolCode;
      this.appCode = appCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolAppDetailBySchoolCodeAndAppCode_args(findSchoolAppDetailBySchoolCodeAndAppCode_args other) {
      if (other.isSetSchoolCode()) {
        this.schoolCode = other.schoolCode;
      }
      if (other.isSetAppCode()) {
        this.appCode = other.appCode;
      }
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_args deepCopy() {
      return new findSchoolAppDetailBySchoolCodeAndAppCode_args(this);
    }

    @Override
    public void clear() {
      this.schoolCode = null;
      this.appCode = null;
    }

    public java.lang.String getSchoolCode() {
      return this.schoolCode;
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_args setSchoolCode(java.lang.String schoolCode) {
      this.schoolCode = schoolCode;
      return this;
    }

    public void unsetSchoolCode() {
      this.schoolCode = null;
    }

    /** Returns true if field schoolCode is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolCode() {
      return this.schoolCode != null;
    }

    public void setSchoolCodeIsSet(boolean value) {
      if (!value) {
        this.schoolCode = null;
      }
    }

    public java.lang.String getAppCode() {
      return this.appCode;
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_args setAppCode(java.lang.String appCode) {
      this.appCode = appCode;
      return this;
    }

    public void unsetAppCode() {
      this.appCode = null;
    }

    /** Returns true if field appCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCode() {
      return this.appCode != null;
    }

    public void setAppCodeIsSet(boolean value) {
      if (!value) {
        this.appCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_CODE:
        if (value == null) {
          unsetSchoolCode();
        } else {
          setSchoolCode((java.lang.String)value);
        }
        break;

      case APP_CODE:
        if (value == null) {
          unsetAppCode();
        } else {
          setAppCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_CODE:
        return getSchoolCode();

      case APP_CODE:
        return getAppCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_CODE:
        return isSetSchoolCode();
      case APP_CODE:
        return isSetAppCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolAppDetailBySchoolCodeAndAppCode_args)
        return this.equals((findSchoolAppDetailBySchoolCodeAndAppCode_args)that);
      return false;
    }

    public boolean equals(findSchoolAppDetailBySchoolCodeAndAppCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolCode = true && this.isSetSchoolCode();
      boolean that_present_schoolCode = true && that.isSetSchoolCode();
      if (this_present_schoolCode || that_present_schoolCode) {
        if (!(this_present_schoolCode && that_present_schoolCode))
          return false;
        if (!this.schoolCode.equals(that.schoolCode))
          return false;
      }

      boolean this_present_appCode = true && this.isSetAppCode();
      boolean that_present_appCode = true && that.isSetAppCode();
      if (this_present_appCode || that_present_appCode) {
        if (!(this_present_appCode && that_present_appCode))
          return false;
        if (!this.appCode.equals(that.appCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolCode()) ? 131071 : 524287);
      if (isSetSchoolCode())
        hashCode = hashCode * 8191 + schoolCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetAppCode()) ? 131071 : 524287);
      if (isSetAppCode())
        hashCode = hashCode * 8191 + appCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolAppDetailBySchoolCodeAndAppCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolCode()).compareTo(other.isSetSchoolCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolCode, other.schoolCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppCode()).compareTo(other.isSetAppCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCode, other.appCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolAppDetailBySchoolCodeAndAppCode_args(");
      boolean first = true;

      sb.append("schoolCode:");
      if (this.schoolCode == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appCode:");
      if (this.appCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppDetailBySchoolCodeAndAppCode_argsStandardScheme getScheme() {
        return new findSchoolAppDetailBySchoolCodeAndAppCode_argsStandardScheme();
      }
    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolAppDetailBySchoolCodeAndAppCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolAppDetailBySchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolCode = iprot.readString();
                struct.setSchoolCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appCode = iprot.readString();
                struct.setAppCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolAppDetailBySchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolCode != null) {
          oprot.writeFieldBegin(SCHOOL_CODE_FIELD_DESC);
          oprot.writeString(struct.schoolCode);
          oprot.writeFieldEnd();
        }
        if (struct.appCode != null) {
          oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
          oprot.writeString(struct.appCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppDetailBySchoolCodeAndAppCode_argsTupleScheme getScheme() {
        return new findSchoolAppDetailBySchoolCodeAndAppCode_argsTupleScheme();
      }
    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolAppDetailBySchoolCodeAndAppCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolAppDetailBySchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolCode()) {
          optionals.set(0);
        }
        if (struct.isSetAppCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolCode()) {
          oprot.writeString(struct.schoolCode);
        }
        if (struct.isSetAppCode()) {
          oprot.writeString(struct.appCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolAppDetailBySchoolCodeAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolCode = iprot.readString();
          struct.setSchoolCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appCode = iprot.readString();
          struct.setAppCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolAppDetailBySchoolCodeAndAppCode_result implements org.apache.thrift.TBase<findSchoolAppDetailBySchoolCodeAndAppCode_result, findSchoolAppDetailBySchoolCodeAndAppCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolAppDetailBySchoolCodeAndAppCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolAppDetailBySchoolCodeAndAppCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolAppDetailBySchoolCodeAndAppCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolAppDetailBySchoolCodeAndAppCode_resultTupleSchemeFactory();

    public SysSchoolAppDetailThrift success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysSchoolAppDetailThrift.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolAppDetailBySchoolCodeAndAppCode_result.class, metaDataMap);
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_result() {
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_result(
      SysSchoolAppDetailThrift success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolAppDetailBySchoolCodeAndAppCode_result(findSchoolAppDetailBySchoolCodeAndAppCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysSchoolAppDetailThrift(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_result deepCopy() {
      return new findSchoolAppDetailBySchoolCodeAndAppCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public SysSchoolAppDetailThrift getSuccess() {
      return this.success;
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_result setSuccess(SysSchoolAppDetailThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSchoolAppDetailBySchoolCodeAndAppCode_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysSchoolAppDetailThrift)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolAppDetailBySchoolCodeAndAppCode_result)
        return this.equals((findSchoolAppDetailBySchoolCodeAndAppCode_result)that);
      return false;
    }

    public boolean equals(findSchoolAppDetailBySchoolCodeAndAppCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolAppDetailBySchoolCodeAndAppCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolAppDetailBySchoolCodeAndAppCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppDetailBySchoolCodeAndAppCode_resultStandardScheme getScheme() {
        return new findSchoolAppDetailBySchoolCodeAndAppCode_resultStandardScheme();
      }
    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolAppDetailBySchoolCodeAndAppCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolAppDetailBySchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysSchoolAppDetailThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolAppDetailBySchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppDetailBySchoolCodeAndAppCode_resultTupleScheme getScheme() {
        return new findSchoolAppDetailBySchoolCodeAndAppCode_resultTupleScheme();
      }
    }

    private static class findSchoolAppDetailBySchoolCodeAndAppCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolAppDetailBySchoolCodeAndAppCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolAppDetailBySchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolAppDetailBySchoolCodeAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SysSchoolAppDetailThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolByUserIdAndAppCode_args implements org.apache.thrift.TBase<findSchoolByUserIdAndAppCode_args, findSchoolByUserIdAndAppCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolByUserIdAndAppCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolByUserIdAndAppCode_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolByUserIdAndAppCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolByUserIdAndAppCode_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String appCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      APP_CODE((short)2, "appCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // APP_CODE
            return APP_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_CODE, new org.apache.thrift.meta_data.FieldMetaData("appCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolByUserIdAndAppCode_args.class, metaDataMap);
    }

    public findSchoolByUserIdAndAppCode_args() {
    }

    public findSchoolByUserIdAndAppCode_args(
      java.lang.String userId,
      java.lang.String appCode)
    {
      this();
      this.userId = userId;
      this.appCode = appCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolByUserIdAndAppCode_args(findSchoolByUserIdAndAppCode_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetAppCode()) {
        this.appCode = other.appCode;
      }
    }

    public findSchoolByUserIdAndAppCode_args deepCopy() {
      return new findSchoolByUserIdAndAppCode_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.appCode = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findSchoolByUserIdAndAppCode_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getAppCode() {
      return this.appCode;
    }

    public findSchoolByUserIdAndAppCode_args setAppCode(java.lang.String appCode) {
      this.appCode = appCode;
      return this;
    }

    public void unsetAppCode() {
      this.appCode = null;
    }

    /** Returns true if field appCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCode() {
      return this.appCode != null;
    }

    public void setAppCodeIsSet(boolean value) {
      if (!value) {
        this.appCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case APP_CODE:
        if (value == null) {
          unsetAppCode();
        } else {
          setAppCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case APP_CODE:
        return getAppCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case APP_CODE:
        return isSetAppCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolByUserIdAndAppCode_args)
        return this.equals((findSchoolByUserIdAndAppCode_args)that);
      return false;
    }

    public boolean equals(findSchoolByUserIdAndAppCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_appCode = true && this.isSetAppCode();
      boolean that_present_appCode = true && that.isSetAppCode();
      if (this_present_appCode || that_present_appCode) {
        if (!(this_present_appCode && that_present_appCode))
          return false;
        if (!this.appCode.equals(that.appCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAppCode()) ? 131071 : 524287);
      if (isSetAppCode())
        hashCode = hashCode * 8191 + appCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolByUserIdAndAppCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppCode()).compareTo(other.isSetAppCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCode, other.appCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolByUserIdAndAppCode_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appCode:");
      if (this.appCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolByUserIdAndAppCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolByUserIdAndAppCode_argsStandardScheme getScheme() {
        return new findSchoolByUserIdAndAppCode_argsStandardScheme();
      }
    }

    private static class findSchoolByUserIdAndAppCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolByUserIdAndAppCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolByUserIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appCode = iprot.readString();
                struct.setAppCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolByUserIdAndAppCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.appCode != null) {
          oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
          oprot.writeString(struct.appCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolByUserIdAndAppCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolByUserIdAndAppCode_argsTupleScheme getScheme() {
        return new findSchoolByUserIdAndAppCode_argsTupleScheme();
      }
    }

    private static class findSchoolByUserIdAndAppCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolByUserIdAndAppCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolByUserIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetAppCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetAppCode()) {
          oprot.writeString(struct.appCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolByUserIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appCode = iprot.readString();
          struct.setAppCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolByUserIdAndAppCode_result implements org.apache.thrift.TBase<findSchoolByUserIdAndAppCode_result, findSchoolByUserIdAndAppCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolByUserIdAndAppCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolByUserIdAndAppCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolByUserIdAndAppCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolByUserIdAndAppCode_resultTupleSchemeFactory();

    public java.util.List<SchoolRoleVoThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchoolRoleVoThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolByUserIdAndAppCode_result.class, metaDataMap);
    }

    public findSchoolByUserIdAndAppCode_result() {
    }

    public findSchoolByUserIdAndAppCode_result(
      java.util.List<SchoolRoleVoThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolByUserIdAndAppCode_result(findSchoolByUserIdAndAppCode_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SchoolRoleVoThrift> __this__success = new java.util.ArrayList<SchoolRoleVoThrift>(other.success.size());
        for (SchoolRoleVoThrift other_element : other.success) {
          __this__success.add(new SchoolRoleVoThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSchoolByUserIdAndAppCode_result deepCopy() {
      return new findSchoolByUserIdAndAppCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SchoolRoleVoThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SchoolRoleVoThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SchoolRoleVoThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SchoolRoleVoThrift> getSuccess() {
      return this.success;
    }

    public findSchoolByUserIdAndAppCode_result setSuccess(java.util.List<SchoolRoleVoThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSchoolByUserIdAndAppCode_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SchoolRoleVoThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolByUserIdAndAppCode_result)
        return this.equals((findSchoolByUserIdAndAppCode_result)that);
      return false;
    }

    public boolean equals(findSchoolByUserIdAndAppCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolByUserIdAndAppCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolByUserIdAndAppCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolByUserIdAndAppCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolByUserIdAndAppCode_resultStandardScheme getScheme() {
        return new findSchoolByUserIdAndAppCode_resultStandardScheme();
      }
    }

    private static class findSchoolByUserIdAndAppCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolByUserIdAndAppCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolByUserIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SchoolRoleVoThrift>(_list240.size);
                  SchoolRoleVoThrift _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new SchoolRoleVoThrift();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolByUserIdAndAppCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SchoolRoleVoThrift _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolByUserIdAndAppCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolByUserIdAndAppCode_resultTupleScheme getScheme() {
        return new findSchoolByUserIdAndAppCode_resultTupleScheme();
      }
    }

    private static class findSchoolByUserIdAndAppCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolByUserIdAndAppCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolByUserIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SchoolRoleVoThrift _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolByUserIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SchoolRoleVoThrift>(_list245.size);
            SchoolRoleVoThrift _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new SchoolRoleVoThrift();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSysRoleRegisterRequirementByRoleId_args implements org.apache.thrift.TBase<findSysRoleRegisterRequirementByRoleId_args, findSysRoleRegisterRequirementByRoleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSysRoleRegisterRequirementByRoleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSysRoleRegisterRequirementByRoleId_args");

    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSysRoleRegisterRequirementByRoleId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSysRoleRegisterRequirementByRoleId_argsTupleSchemeFactory();

    public java.lang.String roleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_ID((short)1, "roleId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_ID
            return ROLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSysRoleRegisterRequirementByRoleId_args.class, metaDataMap);
    }

    public findSysRoleRegisterRequirementByRoleId_args() {
    }

    public findSysRoleRegisterRequirementByRoleId_args(
      java.lang.String roleId)
    {
      this();
      this.roleId = roleId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSysRoleRegisterRequirementByRoleId_args(findSysRoleRegisterRequirementByRoleId_args other) {
      if (other.isSetRoleId()) {
        this.roleId = other.roleId;
      }
    }

    public findSysRoleRegisterRequirementByRoleId_args deepCopy() {
      return new findSysRoleRegisterRequirementByRoleId_args(this);
    }

    @Override
    public void clear() {
      this.roleId = null;
    }

    public java.lang.String getRoleId() {
      return this.roleId;
    }

    public findSysRoleRegisterRequirementByRoleId_args setRoleId(java.lang.String roleId) {
      this.roleId = roleId;
      return this;
    }

    public void unsetRoleId() {
      this.roleId = null;
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return this.roleId != null;
    }

    public void setRoleIdIsSet(boolean value) {
      if (!value) {
        this.roleId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_ID:
        return getRoleId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROLE_ID:
        return isSetRoleId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSysRoleRegisterRequirementByRoleId_args)
        return this.equals((findSysRoleRegisterRequirementByRoleId_args)that);
      return false;
    }

    public boolean equals(findSysRoleRegisterRequirementByRoleId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roleId = true && this.isSetRoleId();
      boolean that_present_roleId = true && that.isSetRoleId();
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (!this.roleId.equals(that.roleId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRoleId()) ? 131071 : 524287);
      if (isSetRoleId())
        hashCode = hashCode * 8191 + roleId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSysRoleRegisterRequirementByRoleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSysRoleRegisterRequirementByRoleId_args(");
      boolean first = true;

      sb.append("roleId:");
      if (this.roleId == null) {
        sb.append("null");
      } else {
        sb.append(this.roleId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSysRoleRegisterRequirementByRoleId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleRegisterRequirementByRoleId_argsStandardScheme getScheme() {
        return new findSysRoleRegisterRequirementByRoleId_argsStandardScheme();
      }
    }

    private static class findSysRoleRegisterRequirementByRoleId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSysRoleRegisterRequirementByRoleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSysRoleRegisterRequirementByRoleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleId = iprot.readString();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSysRoleRegisterRequirementByRoleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleId != null) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSysRoleRegisterRequirementByRoleId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleRegisterRequirementByRoleId_argsTupleScheme getScheme() {
        return new findSysRoleRegisterRequirementByRoleId_argsTupleScheme();
      }
    }

    private static class findSysRoleRegisterRequirementByRoleId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSysRoleRegisterRequirementByRoleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSysRoleRegisterRequirementByRoleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoleId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleId()) {
          oprot.writeString(struct.roleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSysRoleRegisterRequirementByRoleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleId = iprot.readString();
          struct.setRoleIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSysRoleRegisterRequirementByRoleId_result implements org.apache.thrift.TBase<findSysRoleRegisterRequirementByRoleId_result, findSysRoleRegisterRequirementByRoleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSysRoleRegisterRequirementByRoleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSysRoleRegisterRequirementByRoleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSysRoleRegisterRequirementByRoleId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSysRoleRegisterRequirementByRoleId_resultTupleSchemeFactory();

    public java.util.List<SysRoleRegisterRequirementThrift> success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRoleRegisterRequirementThrift.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSysRoleRegisterRequirementByRoleId_result.class, metaDataMap);
    }

    public findSysRoleRegisterRequirementByRoleId_result() {
    }

    public findSysRoleRegisterRequirementByRoleId_result(
      java.util.List<SysRoleRegisterRequirementThrift> success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSysRoleRegisterRequirementByRoleId_result(findSysRoleRegisterRequirementByRoleId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<SysRoleRegisterRequirementThrift> __this__success = new java.util.ArrayList<SysRoleRegisterRequirementThrift>(other.success.size());
        for (SysRoleRegisterRequirementThrift other_element : other.success) {
          __this__success.add(new SysRoleRegisterRequirementThrift(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSysRoleRegisterRequirementByRoleId_result deepCopy() {
      return new findSysRoleRegisterRequirementByRoleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysRoleRegisterRequirementThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysRoleRegisterRequirementThrift elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<SysRoleRegisterRequirementThrift>();
      }
      this.success.add(elem);
    }

    public java.util.List<SysRoleRegisterRequirementThrift> getSuccess() {
      return this.success;
    }

    public findSysRoleRegisterRequirementByRoleId_result setSuccess(java.util.List<SysRoleRegisterRequirementThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSysRoleRegisterRequirementByRoleId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<SysRoleRegisterRequirementThrift>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSysRoleRegisterRequirementByRoleId_result)
        return this.equals((findSysRoleRegisterRequirementByRoleId_result)that);
      return false;
    }

    public boolean equals(findSysRoleRegisterRequirementByRoleId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSysRoleRegisterRequirementByRoleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSysRoleRegisterRequirementByRoleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSysRoleRegisterRequirementByRoleId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleRegisterRequirementByRoleId_resultStandardScheme getScheme() {
        return new findSysRoleRegisterRequirementByRoleId_resultStandardScheme();
      }
    }

    private static class findSysRoleRegisterRequirementByRoleId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSysRoleRegisterRequirementByRoleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSysRoleRegisterRequirementByRoleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<SysRoleRegisterRequirementThrift>(_list248.size);
                  SysRoleRegisterRequirementThrift _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = new SysRoleRegisterRequirementThrift();
                    _elem249.read(iprot);
                    struct.success.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSysRoleRegisterRequirementByRoleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysRoleRegisterRequirementThrift _iter251 : struct.success)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSysRoleRegisterRequirementByRoleId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleRegisterRequirementByRoleId_resultTupleScheme getScheme() {
        return new findSysRoleRegisterRequirementByRoleId_resultTupleScheme();
      }
    }

    private static class findSysRoleRegisterRequirementByRoleId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSysRoleRegisterRequirementByRoleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSysRoleRegisterRequirementByRoleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysRoleRegisterRequirementThrift _iter252 : struct.success)
            {
              _iter252.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSysRoleRegisterRequirementByRoleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<SysRoleRegisterRequirementThrift>(_list253.size);
            SysRoleRegisterRequirementThrift _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = new SysRoleRegisterRequirementThrift();
              _elem254.read(iprot);
              struct.success.add(_elem254);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNormalUserChildByParentIdAndSchoolId_args implements org.apache.thrift.TBase<findNormalUserChildByParentIdAndSchoolId_args, findNormalUserChildByParentIdAndSchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findNormalUserChildByParentIdAndSchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNormalUserChildByParentIdAndSchoolId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNormalUserChildByParentIdAndSchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNormalUserChildByParentIdAndSchoolId_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_ID((short)2, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNormalUserChildByParentIdAndSchoolId_args.class, metaDataMap);
    }

    public findNormalUserChildByParentIdAndSchoolId_args() {
    }

    public findNormalUserChildByParentIdAndSchoolId_args(
      java.lang.String userId,
      java.lang.String schoolId)
    {
      this();
      this.userId = userId;
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNormalUserChildByParentIdAndSchoolId_args(findNormalUserChildByParentIdAndSchoolId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findNormalUserChildByParentIdAndSchoolId_args deepCopy() {
      return new findNormalUserChildByParentIdAndSchoolId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findNormalUserChildByParentIdAndSchoolId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findNormalUserChildByParentIdAndSchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNormalUserChildByParentIdAndSchoolId_args)
        return this.equals((findNormalUserChildByParentIdAndSchoolId_args)that);
      return false;
    }

    public boolean equals(findNormalUserChildByParentIdAndSchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNormalUserChildByParentIdAndSchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNormalUserChildByParentIdAndSchoolId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNormalUserChildByParentIdAndSchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserChildByParentIdAndSchoolId_argsStandardScheme getScheme() {
        return new findNormalUserChildByParentIdAndSchoolId_argsStandardScheme();
      }
    }

    private static class findNormalUserChildByParentIdAndSchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNormalUserChildByParentIdAndSchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNormalUserChildByParentIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNormalUserChildByParentIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNormalUserChildByParentIdAndSchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserChildByParentIdAndSchoolId_argsTupleScheme getScheme() {
        return new findNormalUserChildByParentIdAndSchoolId_argsTupleScheme();
      }
    }

    private static class findNormalUserChildByParentIdAndSchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNormalUserChildByParentIdAndSchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNormalUserChildByParentIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNormalUserChildByParentIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNormalUserChildByParentIdAndSchoolId_result implements org.apache.thrift.TBase<findNormalUserChildByParentIdAndSchoolId_result, findNormalUserChildByParentIdAndSchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findNormalUserChildByParentIdAndSchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNormalUserChildByParentIdAndSchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNormalUserChildByParentIdAndSchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNormalUserChildByParentIdAndSchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNormalUserChildByParentIdAndSchoolId_result.class, metaDataMap);
    }

    public findNormalUserChildByParentIdAndSchoolId_result() {
    }

    public findNormalUserChildByParentIdAndSchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNormalUserChildByParentIdAndSchoolId_result(findNormalUserChildByParentIdAndSchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findNormalUserChildByParentIdAndSchoolId_result deepCopy() {
      return new findNormalUserChildByParentIdAndSchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findNormalUserChildByParentIdAndSchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findNormalUserChildByParentIdAndSchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNormalUserChildByParentIdAndSchoolId_result)
        return this.equals((findNormalUserChildByParentIdAndSchoolId_result)that);
      return false;
    }

    public boolean equals(findNormalUserChildByParentIdAndSchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNormalUserChildByParentIdAndSchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNormalUserChildByParentIdAndSchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNormalUserChildByParentIdAndSchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserChildByParentIdAndSchoolId_resultStandardScheme getScheme() {
        return new findNormalUserChildByParentIdAndSchoolId_resultStandardScheme();
      }
    }

    private static class findNormalUserChildByParentIdAndSchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNormalUserChildByParentIdAndSchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNormalUserChildByParentIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNormalUserChildByParentIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNormalUserChildByParentIdAndSchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserChildByParentIdAndSchoolId_resultTupleScheme getScheme() {
        return new findNormalUserChildByParentIdAndSchoolId_resultTupleScheme();
      }
    }

    private static class findNormalUserChildByParentIdAndSchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNormalUserChildByParentIdAndSchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNormalUserChildByParentIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNormalUserChildByParentIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNormalUserParentByChildIdAndSchoolId_args implements org.apache.thrift.TBase<findNormalUserParentByChildIdAndSchoolId_args, findNormalUserParentByChildIdAndSchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findNormalUserParentByChildIdAndSchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNormalUserParentByChildIdAndSchoolId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNormalUserParentByChildIdAndSchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNormalUserParentByChildIdAndSchoolId_argsTupleSchemeFactory();

    public java.lang.String userId; // required
    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SCHOOL_ID((short)2, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNormalUserParentByChildIdAndSchoolId_args.class, metaDataMap);
    }

    public findNormalUserParentByChildIdAndSchoolId_args() {
    }

    public findNormalUserParentByChildIdAndSchoolId_args(
      java.lang.String userId,
      java.lang.String schoolId)
    {
      this();
      this.userId = userId;
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNormalUserParentByChildIdAndSchoolId_args(findNormalUserParentByChildIdAndSchoolId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findNormalUserParentByChildIdAndSchoolId_args deepCopy() {
      return new findNormalUserParentByChildIdAndSchoolId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.schoolId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public findNormalUserParentByChildIdAndSchoolId_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findNormalUserParentByChildIdAndSchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNormalUserParentByChildIdAndSchoolId_args)
        return this.equals((findNormalUserParentByChildIdAndSchoolId_args)that);
      return false;
    }

    public boolean equals(findNormalUserParentByChildIdAndSchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNormalUserParentByChildIdAndSchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNormalUserParentByChildIdAndSchoolId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNormalUserParentByChildIdAndSchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserParentByChildIdAndSchoolId_argsStandardScheme getScheme() {
        return new findNormalUserParentByChildIdAndSchoolId_argsStandardScheme();
      }
    }

    private static class findNormalUserParentByChildIdAndSchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNormalUserParentByChildIdAndSchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNormalUserParentByChildIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNormalUserParentByChildIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNormalUserParentByChildIdAndSchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserParentByChildIdAndSchoolId_argsTupleScheme getScheme() {
        return new findNormalUserParentByChildIdAndSchoolId_argsTupleScheme();
      }
    }

    private static class findNormalUserParentByChildIdAndSchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNormalUserParentByChildIdAndSchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNormalUserParentByChildIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSchoolId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNormalUserParentByChildIdAndSchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNormalUserParentByChildIdAndSchoolId_result implements org.apache.thrift.TBase<findNormalUserParentByChildIdAndSchoolId_result, findNormalUserParentByChildIdAndSchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findNormalUserParentByChildIdAndSchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNormalUserParentByChildIdAndSchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNormalUserParentByChildIdAndSchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNormalUserParentByChildIdAndSchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNormalUserParentByChildIdAndSchoolId_result.class, metaDataMap);
    }

    public findNormalUserParentByChildIdAndSchoolId_result() {
    }

    public findNormalUserParentByChildIdAndSchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNormalUserParentByChildIdAndSchoolId_result(findNormalUserParentByChildIdAndSchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findNormalUserParentByChildIdAndSchoolId_result deepCopy() {
      return new findNormalUserParentByChildIdAndSchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findNormalUserParentByChildIdAndSchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findNormalUserParentByChildIdAndSchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNormalUserParentByChildIdAndSchoolId_result)
        return this.equals((findNormalUserParentByChildIdAndSchoolId_result)that);
      return false;
    }

    public boolean equals(findNormalUserParentByChildIdAndSchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNormalUserParentByChildIdAndSchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNormalUserParentByChildIdAndSchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNormalUserParentByChildIdAndSchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserParentByChildIdAndSchoolId_resultStandardScheme getScheme() {
        return new findNormalUserParentByChildIdAndSchoolId_resultStandardScheme();
      }
    }

    private static class findNormalUserParentByChildIdAndSchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNormalUserParentByChildIdAndSchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNormalUserParentByChildIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNormalUserParentByChildIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNormalUserParentByChildIdAndSchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNormalUserParentByChildIdAndSchoolId_resultTupleScheme getScheme() {
        return new findNormalUserParentByChildIdAndSchoolId_resultTupleScheme();
      }
    }

    private static class findNormalUserParentByChildIdAndSchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNormalUserParentByChildIdAndSchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNormalUserParentByChildIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNormalUserParentByChildIdAndSchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolAppConfigBySchoolIdAndAppCode_args implements org.apache.thrift.TBase<findSchoolAppConfigBySchoolIdAndAppCode_args, findSchoolAppConfigBySchoolIdAndAppCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolAppConfigBySchoolIdAndAppCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolAppConfigBySchoolIdAndAppCode_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolAppConfigBySchoolIdAndAppCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolAppConfigBySchoolIdAndAppCode_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String appCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      APP_CODE((short)2, "appCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // APP_CODE
            return APP_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_CODE, new org.apache.thrift.meta_data.FieldMetaData("appCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolAppConfigBySchoolIdAndAppCode_args.class, metaDataMap);
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_args() {
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_args(
      java.lang.String schoolId,
      java.lang.String appCode)
    {
      this();
      this.schoolId = schoolId;
      this.appCode = appCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolAppConfigBySchoolIdAndAppCode_args(findSchoolAppConfigBySchoolIdAndAppCode_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetAppCode()) {
        this.appCode = other.appCode;
      }
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_args deepCopy() {
      return new findSchoolAppConfigBySchoolIdAndAppCode_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.appCode = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getAppCode() {
      return this.appCode;
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_args setAppCode(java.lang.String appCode) {
      this.appCode = appCode;
      return this;
    }

    public void unsetAppCode() {
      this.appCode = null;
    }

    /** Returns true if field appCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCode() {
      return this.appCode != null;
    }

    public void setAppCodeIsSet(boolean value) {
      if (!value) {
        this.appCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case APP_CODE:
        if (value == null) {
          unsetAppCode();
        } else {
          setAppCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case APP_CODE:
        return getAppCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case APP_CODE:
        return isSetAppCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolAppConfigBySchoolIdAndAppCode_args)
        return this.equals((findSchoolAppConfigBySchoolIdAndAppCode_args)that);
      return false;
    }

    public boolean equals(findSchoolAppConfigBySchoolIdAndAppCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_appCode = true && this.isSetAppCode();
      boolean that_present_appCode = true && that.isSetAppCode();
      if (this_present_appCode || that_present_appCode) {
        if (!(this_present_appCode && that_present_appCode))
          return false;
        if (!this.appCode.equals(that.appCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAppCode()) ? 131071 : 524287);
      if (isSetAppCode())
        hashCode = hashCode * 8191 + appCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolAppConfigBySchoolIdAndAppCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppCode()).compareTo(other.isSetAppCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCode, other.appCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolAppConfigBySchoolIdAndAppCode_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appCode:");
      if (this.appCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppConfigBySchoolIdAndAppCode_argsStandardScheme getScheme() {
        return new findSchoolAppConfigBySchoolIdAndAppCode_argsStandardScheme();
      }
    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolAppConfigBySchoolIdAndAppCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolAppConfigBySchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appCode = iprot.readString();
                struct.setAppCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolAppConfigBySchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.appCode != null) {
          oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
          oprot.writeString(struct.appCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppConfigBySchoolIdAndAppCode_argsTupleScheme getScheme() {
        return new findSchoolAppConfigBySchoolIdAndAppCode_argsTupleScheme();
      }
    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolAppConfigBySchoolIdAndAppCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolAppConfigBySchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetAppCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetAppCode()) {
          oprot.writeString(struct.appCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolAppConfigBySchoolIdAndAppCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appCode = iprot.readString();
          struct.setAppCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSchoolAppConfigBySchoolIdAndAppCode_result implements org.apache.thrift.TBase<findSchoolAppConfigBySchoolIdAndAppCode_result, findSchoolAppConfigBySchoolIdAndAppCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSchoolAppConfigBySchoolIdAndAppCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSchoolAppConfigBySchoolIdAndAppCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSchoolAppConfigBySchoolIdAndAppCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSchoolAppConfigBySchoolIdAndAppCode_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSchoolAppConfigBySchoolIdAndAppCode_result.class, metaDataMap);
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_result() {
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSchoolAppConfigBySchoolIdAndAppCode_result(findSchoolAppConfigBySchoolIdAndAppCode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_result deepCopy() {
      return new findSchoolAppConfigBySchoolIdAndAppCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSchoolAppConfigBySchoolIdAndAppCode_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSchoolAppConfigBySchoolIdAndAppCode_result)
        return this.equals((findSchoolAppConfigBySchoolIdAndAppCode_result)that);
      return false;
    }

    public boolean equals(findSchoolAppConfigBySchoolIdAndAppCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSchoolAppConfigBySchoolIdAndAppCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSchoolAppConfigBySchoolIdAndAppCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppConfigBySchoolIdAndAppCode_resultStandardScheme getScheme() {
        return new findSchoolAppConfigBySchoolIdAndAppCode_resultStandardScheme();
      }
    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSchoolAppConfigBySchoolIdAndAppCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSchoolAppConfigBySchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSchoolAppConfigBySchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSchoolAppConfigBySchoolIdAndAppCode_resultTupleScheme getScheme() {
        return new findSchoolAppConfigBySchoolIdAndAppCode_resultTupleScheme();
      }
    }

    private static class findSchoolAppConfigBySchoolIdAndAppCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSchoolAppConfigBySchoolIdAndAppCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSchoolAppConfigBySchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSchoolAppConfigBySchoolIdAndAppCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentOrTeacherUserBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findStudentOrTeacherUserBySchoolIdAndJsonParams_args, findStudentOrTeacherUserBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentOrTeacherUserBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentOrTeacherUserBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentOrTeacherUserBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentOrTeacherUserBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_STR((short)2, "jsonStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentOrTeacherUserBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_args() {
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonStr)
    {
      this();
      this.schoolId = schoolId;
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentOrTeacherUserBySchoolIdAndJsonParams_args(findStudentOrTeacherUserBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_args deepCopy() {
      return new findStudentOrTeacherUserBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonStr = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonStr() {
      return this.jsonStr;
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_args setJsonStr(java.lang.String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_STR:
        return getJsonStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentOrTeacherUserBySchoolIdAndJsonParams_args)
        return this.equals((findStudentOrTeacherUserBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findStudentOrTeacherUserBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonStr()) ? 131071 : 524287);
      if (isSetJsonStr())
        hashCode = hashCode * 8191 + jsonStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentOrTeacherUserBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentOrTeacherUserBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentOrTeacherUserBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findStudentOrTeacherUserBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentOrTeacherUserBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentOrTeacherUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentOrTeacherUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentOrTeacherUserBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findStudentOrTeacherUserBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentOrTeacherUserBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentOrTeacherUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentOrTeacherUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentOrTeacherUserBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findStudentOrTeacherUserBySchoolIdAndJsonParams_result, findStudentOrTeacherUserBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentOrTeacherUserBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentOrTeacherUserBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentOrTeacherUserBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentOrTeacherUserBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentOrTeacherUserBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_result() {
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentOrTeacherUserBySchoolIdAndJsonParams_result(findStudentOrTeacherUserBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_result deepCopy() {
      return new findStudentOrTeacherUserBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findStudentOrTeacherUserBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentOrTeacherUserBySchoolIdAndJsonParams_result)
        return this.equals((findStudentOrTeacherUserBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findStudentOrTeacherUserBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentOrTeacherUserBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentOrTeacherUserBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentOrTeacherUserBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findStudentOrTeacherUserBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentOrTeacherUserBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentOrTeacherUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentOrTeacherUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentOrTeacherUserBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findStudentOrTeacherUserBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findStudentOrTeacherUserBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentOrTeacherUserBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentOrTeacherUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentOrTeacherUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAppByJsonParams_args implements org.apache.thrift.TBase<findAppByJsonParams_args, findAppByJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAppByJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppByJsonParams_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAppByJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAppByJsonParams_argsTupleSchemeFactory();

    public java.lang.String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "jsonStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppByJsonParams_args.class, metaDataMap);
    }

    public findAppByJsonParams_args() {
    }

    public findAppByJsonParams_args(
      java.lang.String jsonStr)
    {
      this();
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppByJsonParams_args(findAppByJsonParams_args other) {
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public findAppByJsonParams_args deepCopy() {
      return new findAppByJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.jsonStr = null;
    }

    public java.lang.String getJsonStr() {
      return this.jsonStr;
    }

    public findAppByJsonParams_args setJsonStr(java.lang.String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJsonStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppByJsonParams_args)
        return this.equals((findAppByJsonParams_args)that);
      return false;
    }

    public boolean equals(findAppByJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetJsonStr()) ? 131071 : 524287);
      if (isSetJsonStr())
        hashCode = hashCode * 8191 + jsonStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAppByJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAppByJsonParams_args(");
      boolean first = true;

      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppByJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAppByJsonParams_argsStandardScheme getScheme() {
        return new findAppByJsonParams_argsStandardScheme();
      }
    }

    private static class findAppByJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAppByJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppByJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppByJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppByJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAppByJsonParams_argsTupleScheme getScheme() {
        return new findAppByJsonParams_argsTupleScheme();
      }
    }

    private static class findAppByJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAppByJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppByJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetJsonStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppByJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAppByJsonParams_result implements org.apache.thrift.TBase<findAppByJsonParams_result, findAppByJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAppByJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppByJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAppByJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAppByJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppByJsonParams_result.class, metaDataMap);
    }

    public findAppByJsonParams_result() {
    }

    public findAppByJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppByJsonParams_result(findAppByJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findAppByJsonParams_result deepCopy() {
      return new findAppByJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findAppByJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findAppByJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppByJsonParams_result)
        return this.equals((findAppByJsonParams_result)that);
      return false;
    }

    public boolean equals(findAppByJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAppByJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAppByJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppByJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAppByJsonParams_resultStandardScheme getScheme() {
        return new findAppByJsonParams_resultStandardScheme();
      }
    }

    private static class findAppByJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAppByJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppByJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppByJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppByJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAppByJsonParams_resultTupleScheme getScheme() {
        return new findAppByJsonParams_resultTupleScheme();
      }
    }

    private static class findAppByJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAppByJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppByJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppByJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findOfficeBySchoolIdAndJsonParams_args, findOfficeBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findOfficeBySchoolIdAndJsonParams_args() {
    }

    public findOfficeBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolIdAndJsonParams_args(findOfficeBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findOfficeBySchoolIdAndJsonParams_args deepCopy() {
      return new findOfficeBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findOfficeBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findOfficeBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolIdAndJsonParams_args)
        return this.equals((findOfficeBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findOfficeBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findOfficeBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findOfficeBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findOfficeBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findOfficeBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findOfficeBySchoolIdAndJsonParams_result, findOfficeBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOfficeBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOfficeBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findOfficeBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findOfficeBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOfficeBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findOfficeBySchoolIdAndJsonParams_result() {
    }

    public findOfficeBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOfficeBySchoolIdAndJsonParams_result(findOfficeBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findOfficeBySchoolIdAndJsonParams_result deepCopy() {
      return new findOfficeBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findOfficeBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findOfficeBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findOfficeBySchoolIdAndJsonParams_result)
        return this.equals((findOfficeBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findOfficeBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findOfficeBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findOfficeBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOfficeBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findOfficeBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findOfficeBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findOfficeBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOfficeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOfficeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOfficeBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findOfficeBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findOfficeBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findOfficeBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findOfficeBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOfficeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findDictDataByDictTypeCodeList_args implements org.apache.thrift.TBase<findDictDataByDictTypeCodeList_args, findDictDataByDictTypeCodeList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findDictDataByDictTypeCodeList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDictDataByDictTypeCodeList_args");

    private static final org.apache.thrift.protocol.TField DICT_TYPE_CODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dictTypeCodeList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findDictDataByDictTypeCodeList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findDictDataByDictTypeCodeList_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> dictTypeCodeList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DICT_TYPE_CODE_LIST((short)1, "dictTypeCodeList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DICT_TYPE_CODE_LIST
            return DICT_TYPE_CODE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DICT_TYPE_CODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("dictTypeCodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDictDataByDictTypeCodeList_args.class, metaDataMap);
    }

    public findDictDataByDictTypeCodeList_args() {
    }

    public findDictDataByDictTypeCodeList_args(
      java.util.List<java.lang.String> dictTypeCodeList)
    {
      this();
      this.dictTypeCodeList = dictTypeCodeList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDictDataByDictTypeCodeList_args(findDictDataByDictTypeCodeList_args other) {
      if (other.isSetDictTypeCodeList()) {
        java.util.List<java.lang.String> __this__dictTypeCodeList = new java.util.ArrayList<java.lang.String>(other.dictTypeCodeList);
        this.dictTypeCodeList = __this__dictTypeCodeList;
      }
    }

    public findDictDataByDictTypeCodeList_args deepCopy() {
      return new findDictDataByDictTypeCodeList_args(this);
    }

    @Override
    public void clear() {
      this.dictTypeCodeList = null;
    }

    public int getDictTypeCodeListSize() {
      return (this.dictTypeCodeList == null) ? 0 : this.dictTypeCodeList.size();
    }

    public java.util.Iterator<java.lang.String> getDictTypeCodeListIterator() {
      return (this.dictTypeCodeList == null) ? null : this.dictTypeCodeList.iterator();
    }

    public void addToDictTypeCodeList(java.lang.String elem) {
      if (this.dictTypeCodeList == null) {
        this.dictTypeCodeList = new java.util.ArrayList<java.lang.String>();
      }
      this.dictTypeCodeList.add(elem);
    }

    public java.util.List<java.lang.String> getDictTypeCodeList() {
      return this.dictTypeCodeList;
    }

    public findDictDataByDictTypeCodeList_args setDictTypeCodeList(java.util.List<java.lang.String> dictTypeCodeList) {
      this.dictTypeCodeList = dictTypeCodeList;
      return this;
    }

    public void unsetDictTypeCodeList() {
      this.dictTypeCodeList = null;
    }

    /** Returns true if field dictTypeCodeList is set (has been assigned a value) and false otherwise */
    public boolean isSetDictTypeCodeList() {
      return this.dictTypeCodeList != null;
    }

    public void setDictTypeCodeListIsSet(boolean value) {
      if (!value) {
        this.dictTypeCodeList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DICT_TYPE_CODE_LIST:
        if (value == null) {
          unsetDictTypeCodeList();
        } else {
          setDictTypeCodeList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DICT_TYPE_CODE_LIST:
        return getDictTypeCodeList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DICT_TYPE_CODE_LIST:
        return isSetDictTypeCodeList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findDictDataByDictTypeCodeList_args)
        return this.equals((findDictDataByDictTypeCodeList_args)that);
      return false;
    }

    public boolean equals(findDictDataByDictTypeCodeList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dictTypeCodeList = true && this.isSetDictTypeCodeList();
      boolean that_present_dictTypeCodeList = true && that.isSetDictTypeCodeList();
      if (this_present_dictTypeCodeList || that_present_dictTypeCodeList) {
        if (!(this_present_dictTypeCodeList && that_present_dictTypeCodeList))
          return false;
        if (!this.dictTypeCodeList.equals(that.dictTypeCodeList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDictTypeCodeList()) ? 131071 : 524287);
      if (isSetDictTypeCodeList())
        hashCode = hashCode * 8191 + dictTypeCodeList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findDictDataByDictTypeCodeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDictTypeCodeList()).compareTo(other.isSetDictTypeCodeList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDictTypeCodeList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictTypeCodeList, other.dictTypeCodeList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findDictDataByDictTypeCodeList_args(");
      boolean first = true;

      sb.append("dictTypeCodeList:");
      if (this.dictTypeCodeList == null) {
        sb.append("null");
      } else {
        sb.append(this.dictTypeCodeList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDictDataByDictTypeCodeList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDictDataByDictTypeCodeList_argsStandardScheme getScheme() {
        return new findDictDataByDictTypeCodeList_argsStandardScheme();
      }
    }

    private static class findDictDataByDictTypeCodeList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findDictDataByDictTypeCodeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDictDataByDictTypeCodeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DICT_TYPE_CODE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.dictTypeCodeList = new java.util.ArrayList<java.lang.String>(_list256.size);
                  java.lang.String _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = iprot.readString();
                    struct.dictTypeCodeList.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setDictTypeCodeListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDictDataByDictTypeCodeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dictTypeCodeList != null) {
          oprot.writeFieldBegin(DICT_TYPE_CODE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dictTypeCodeList.size()));
            for (java.lang.String _iter259 : struct.dictTypeCodeList)
            {
              oprot.writeString(_iter259);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDictDataByDictTypeCodeList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDictDataByDictTypeCodeList_argsTupleScheme getScheme() {
        return new findDictDataByDictTypeCodeList_argsTupleScheme();
      }
    }

    private static class findDictDataByDictTypeCodeList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findDictDataByDictTypeCodeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDictDataByDictTypeCodeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDictTypeCodeList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDictTypeCodeList()) {
          {
            oprot.writeI32(struct.dictTypeCodeList.size());
            for (java.lang.String _iter260 : struct.dictTypeCodeList)
            {
              oprot.writeString(_iter260);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDictDataByDictTypeCodeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dictTypeCodeList = new java.util.ArrayList<java.lang.String>(_list261.size);
            java.lang.String _elem262;
            for (int _i263 = 0; _i263 < _list261.size; ++_i263)
            {
              _elem262 = iprot.readString();
              struct.dictTypeCodeList.add(_elem262);
            }
          }
          struct.setDictTypeCodeListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findDictDataByDictTypeCodeList_result implements org.apache.thrift.TBase<findDictDataByDictTypeCodeList_result, findDictDataByDictTypeCodeList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findDictDataByDictTypeCodeList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDictDataByDictTypeCodeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findDictDataByDictTypeCodeList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findDictDataByDictTypeCodeList_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDictDataByDictTypeCodeList_result.class, metaDataMap);
    }

    public findDictDataByDictTypeCodeList_result() {
    }

    public findDictDataByDictTypeCodeList_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDictDataByDictTypeCodeList_result(findDictDataByDictTypeCodeList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findDictDataByDictTypeCodeList_result deepCopy() {
      return new findDictDataByDictTypeCodeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findDictDataByDictTypeCodeList_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findDictDataByDictTypeCodeList_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findDictDataByDictTypeCodeList_result)
        return this.equals((findDictDataByDictTypeCodeList_result)that);
      return false;
    }

    public boolean equals(findDictDataByDictTypeCodeList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findDictDataByDictTypeCodeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findDictDataByDictTypeCodeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDictDataByDictTypeCodeList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDictDataByDictTypeCodeList_resultStandardScheme getScheme() {
        return new findDictDataByDictTypeCodeList_resultStandardScheme();
      }
    }

    private static class findDictDataByDictTypeCodeList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findDictDataByDictTypeCodeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDictDataByDictTypeCodeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDictDataByDictTypeCodeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDictDataByDictTypeCodeList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDictDataByDictTypeCodeList_resultTupleScheme getScheme() {
        return new findDictDataByDictTypeCodeList_resultTupleScheme();
      }
    }

    private static class findDictDataByDictTypeCodeList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findDictDataByDictTypeCodeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDictDataByDictTypeCodeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDictDataByDictTypeCodeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSubjectBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findSubjectBySchoolIdAndJsonParams_args, findSubjectBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSubjectBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSubjectBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSubjectBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSubjectBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSubjectBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findSubjectBySchoolIdAndJsonParams_args() {
    }

    public findSubjectBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSubjectBySchoolIdAndJsonParams_args(findSubjectBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findSubjectBySchoolIdAndJsonParams_args deepCopy() {
      return new findSubjectBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findSubjectBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findSubjectBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSubjectBySchoolIdAndJsonParams_args)
        return this.equals((findSubjectBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findSubjectBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSubjectBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSubjectBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSubjectBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSubjectBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findSubjectBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findSubjectBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSubjectBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSubjectBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSubjectBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSubjectBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSubjectBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findSubjectBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findSubjectBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSubjectBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSubjectBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSubjectBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSubjectBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findSubjectBySchoolIdAndJsonParams_result, findSubjectBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSubjectBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSubjectBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSubjectBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSubjectBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSubjectBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findSubjectBySchoolIdAndJsonParams_result() {
    }

    public findSubjectBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSubjectBySchoolIdAndJsonParams_result(findSubjectBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSubjectBySchoolIdAndJsonParams_result deepCopy() {
      return new findSubjectBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findSubjectBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSubjectBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSubjectBySchoolIdAndJsonParams_result)
        return this.equals((findSubjectBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findSubjectBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSubjectBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSubjectBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSubjectBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSubjectBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findSubjectBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findSubjectBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSubjectBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSubjectBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSubjectBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSubjectBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSubjectBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findSubjectBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findSubjectBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSubjectBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSubjectBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSubjectBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findLessonBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findLessonBySchoolIdAndJsonParams_args, findLessonBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLessonBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLessonBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findLessonBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findLessonBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLessonBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findLessonBySchoolIdAndJsonParams_args() {
    }

    public findLessonBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLessonBySchoolIdAndJsonParams_args(findLessonBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findLessonBySchoolIdAndJsonParams_args deepCopy() {
      return new findLessonBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findLessonBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findLessonBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findLessonBySchoolIdAndJsonParams_args)
        return this.equals((findLessonBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findLessonBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findLessonBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findLessonBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLessonBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findLessonBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findLessonBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findLessonBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findLessonBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLessonBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLessonBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLessonBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findLessonBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findLessonBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findLessonBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findLessonBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLessonBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLessonBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findLessonBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findLessonBySchoolIdAndJsonParams_result, findLessonBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLessonBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLessonBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findLessonBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findLessonBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLessonBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findLessonBySchoolIdAndJsonParams_result() {
    }

    public findLessonBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLessonBySchoolIdAndJsonParams_result(findLessonBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findLessonBySchoolIdAndJsonParams_result deepCopy() {
      return new findLessonBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findLessonBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findLessonBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findLessonBySchoolIdAndJsonParams_result)
        return this.equals((findLessonBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findLessonBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findLessonBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findLessonBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLessonBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findLessonBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findLessonBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findLessonBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findLessonBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLessonBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLessonBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLessonBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findLessonBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findLessonBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findLessonBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findLessonBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLessonBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLessonBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPlaceBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findPlaceBySchoolIdAndJsonParams_args, findPlaceBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPlaceBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPlaceBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPlaceBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPlaceBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPlaceBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findPlaceBySchoolIdAndJsonParams_args() {
    }

    public findPlaceBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPlaceBySchoolIdAndJsonParams_args(findPlaceBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findPlaceBySchoolIdAndJsonParams_args deepCopy() {
      return new findPlaceBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findPlaceBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findPlaceBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPlaceBySchoolIdAndJsonParams_args)
        return this.equals((findPlaceBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findPlaceBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPlaceBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPlaceBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPlaceBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlaceBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findPlaceBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findPlaceBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPlaceBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPlaceBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPlaceBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPlaceBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlaceBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findPlaceBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findPlaceBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPlaceBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPlaceBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPlaceBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPlaceBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findPlaceBySchoolIdAndJsonParams_result, findPlaceBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPlaceBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPlaceBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPlaceBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPlaceBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPlaceBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findPlaceBySchoolIdAndJsonParams_result() {
    }

    public findPlaceBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPlaceBySchoolIdAndJsonParams_result(findPlaceBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findPlaceBySchoolIdAndJsonParams_result deepCopy() {
      return new findPlaceBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findPlaceBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findPlaceBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPlaceBySchoolIdAndJsonParams_result)
        return this.equals((findPlaceBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findPlaceBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPlaceBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPlaceBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPlaceBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlaceBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findPlaceBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findPlaceBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPlaceBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPlaceBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPlaceBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPlaceBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPlaceBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findPlaceBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findPlaceBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPlaceBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPlaceBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPlaceBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findGradeBySchoolId_args implements org.apache.thrift.TBase<findGradeBySchoolId_args, findGradeBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findGradeBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGradeBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findGradeBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findGradeBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGradeBySchoolId_args.class, metaDataMap);
    }

    public findGradeBySchoolId_args() {
    }

    public findGradeBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGradeBySchoolId_args(findGradeBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findGradeBySchoolId_args deepCopy() {
      return new findGradeBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findGradeBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findGradeBySchoolId_args)
        return this.equals((findGradeBySchoolId_args)that);
      return false;
    }

    public boolean equals(findGradeBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findGradeBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findGradeBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGradeBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findGradeBySchoolId_argsStandardScheme getScheme() {
        return new findGradeBySchoolId_argsStandardScheme();
      }
    }

    private static class findGradeBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findGradeBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGradeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGradeBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGradeBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findGradeBySchoolId_argsTupleScheme getScheme() {
        return new findGradeBySchoolId_argsTupleScheme();
      }
    }

    private static class findGradeBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findGradeBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGradeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGradeBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findGradeBySchoolId_result implements org.apache.thrift.TBase<findGradeBySchoolId_result, findGradeBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findGradeBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGradeBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findGradeBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findGradeBySchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGradeBySchoolId_result.class, metaDataMap);
    }

    public findGradeBySchoolId_result() {
    }

    public findGradeBySchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGradeBySchoolId_result(findGradeBySchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findGradeBySchoolId_result deepCopy() {
      return new findGradeBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findGradeBySchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findGradeBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findGradeBySchoolId_result)
        return this.equals((findGradeBySchoolId_result)that);
      return false;
    }

    public boolean equals(findGradeBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findGradeBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findGradeBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGradeBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findGradeBySchoolId_resultStandardScheme getScheme() {
        return new findGradeBySchoolId_resultStandardScheme();
      }
    }

    private static class findGradeBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findGradeBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGradeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGradeBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGradeBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findGradeBySchoolId_resultTupleScheme getScheme() {
        return new findGradeBySchoolId_resultTupleScheme();
      }
    }

    private static class findGradeBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findGradeBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGradeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGradeBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findClassBySchoolIdAndJsonParams_args, findClassBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findClassBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findClassBySchoolIdAndJsonParams_args() {
    }

    public findClassBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassBySchoolIdAndJsonParams_args(findClassBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findClassBySchoolIdAndJsonParams_args deepCopy() {
      return new findClassBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findClassBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findClassBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassBySchoolIdAndJsonParams_args)
        return this.equals((findClassBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findClassBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findClassBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findClassBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findClassBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findClassBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findClassBySchoolIdAndJsonParams_result, findClassBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findClassBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findClassBySchoolIdAndJsonParams_result() {
    }

    public findClassBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassBySchoolIdAndJsonParams_result(findClassBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findClassBySchoolIdAndJsonParams_result deepCopy() {
      return new findClassBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findClassBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findClassBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassBySchoolIdAndJsonParams_result)
        return this.equals((findClassBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findClassBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findClassBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findClassBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findClassBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findClassBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findStudentBySchoolIdAndJsonParams_args, findStudentBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findStudentBySchoolIdAndJsonParams_args() {
    }

    public findStudentBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentBySchoolIdAndJsonParams_args(findStudentBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findStudentBySchoolIdAndJsonParams_args deepCopy() {
      return new findStudentBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findStudentBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findStudentBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentBySchoolIdAndJsonParams_args)
        return this.equals((findStudentBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findStudentBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findStudentBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findStudentBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findStudentBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findStudentBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStudentBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findStudentBySchoolIdAndJsonParams_result, findStudentBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStudentBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudentBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStudentBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStudentBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudentBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findStudentBySchoolIdAndJsonParams_result() {
    }

    public findStudentBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudentBySchoolIdAndJsonParams_result(findStudentBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findStudentBySchoolIdAndJsonParams_result deepCopy() {
      return new findStudentBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findStudentBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findStudentBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudentBySchoolIdAndJsonParams_result)
        return this.equals((findStudentBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findStudentBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStudentBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStudentBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudentBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findStudentBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findStudentBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStudentBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudentBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudentBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudentBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStudentBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findStudentBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findStudentBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStudentBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudentBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findJobTypeBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findJobTypeBySchoolIdAndJsonParams_args, findJobTypeBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findJobTypeBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findJobTypeBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findJobTypeBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findJobTypeBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findJobTypeBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findJobTypeBySchoolIdAndJsonParams_args() {
    }

    public findJobTypeBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findJobTypeBySchoolIdAndJsonParams_args(findJobTypeBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findJobTypeBySchoolIdAndJsonParams_args deepCopy() {
      return new findJobTypeBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findJobTypeBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findJobTypeBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findJobTypeBySchoolIdAndJsonParams_args)
        return this.equals((findJobTypeBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findJobTypeBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findJobTypeBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findJobTypeBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findJobTypeBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobTypeBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findJobTypeBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findJobTypeBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findJobTypeBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findJobTypeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findJobTypeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findJobTypeBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobTypeBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findJobTypeBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findJobTypeBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findJobTypeBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findJobTypeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findJobTypeBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findJobTypeBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findJobTypeBySchoolIdAndJsonParams_result, findJobTypeBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findJobTypeBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findJobTypeBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findJobTypeBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findJobTypeBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findJobTypeBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findJobTypeBySchoolIdAndJsonParams_result() {
    }

    public findJobTypeBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findJobTypeBySchoolIdAndJsonParams_result(findJobTypeBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findJobTypeBySchoolIdAndJsonParams_result deepCopy() {
      return new findJobTypeBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findJobTypeBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findJobTypeBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findJobTypeBySchoolIdAndJsonParams_result)
        return this.equals((findJobTypeBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findJobTypeBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findJobTypeBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findJobTypeBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findJobTypeBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobTypeBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findJobTypeBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findJobTypeBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findJobTypeBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findJobTypeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findJobTypeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findJobTypeBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobTypeBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findJobTypeBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findJobTypeBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findJobTypeBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findJobTypeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findJobTypeBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findJobBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findJobBySchoolIdAndJsonParams_args, findJobBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findJobBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findJobBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findJobBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findJobBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findJobBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findJobBySchoolIdAndJsonParams_args() {
    }

    public findJobBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findJobBySchoolIdAndJsonParams_args(findJobBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findJobBySchoolIdAndJsonParams_args deepCopy() {
      return new findJobBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findJobBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findJobBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findJobBySchoolIdAndJsonParams_args)
        return this.equals((findJobBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findJobBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findJobBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findJobBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findJobBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findJobBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findJobBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findJobBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findJobBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findJobBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findJobBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findJobBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findJobBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findJobBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findJobBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findJobBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findJobBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findJobBySchoolIdAndJsonParams_result, findJobBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findJobBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findJobBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findJobBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findJobBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findJobBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findJobBySchoolIdAndJsonParams_result() {
    }

    public findJobBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findJobBySchoolIdAndJsonParams_result(findJobBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findJobBySchoolIdAndJsonParams_result deepCopy() {
      return new findJobBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findJobBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findJobBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findJobBySchoolIdAndJsonParams_result)
        return this.equals((findJobBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findJobBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findJobBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findJobBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findJobBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findJobBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findJobBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findJobBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findJobBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findJobBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findJobBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findJobBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findJobBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findJobBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findJobBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findJobBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findJobBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findUserBySchoolIdAndJsonParams_args, findUserBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findUserBySchoolIdAndJsonParams_args() {
    }

    public findUserBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndJsonParams_args(findUserBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findUserBySchoolIdAndJsonParams_args deepCopy() {
      return new findUserBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findUserBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndJsonParams_args)
        return this.equals((findUserBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findUserBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findUserBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findUserBySchoolIdAndJsonParams_result, findUserBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findUserBySchoolIdAndJsonParams_result() {
    }

    public findUserBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserBySchoolIdAndJsonParams_result(findUserBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserBySchoolIdAndJsonParams_result deepCopy() {
      return new findUserBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserBySchoolIdAndJsonParams_result)
        return this.equals((findUserBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findUserBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findUserBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findUserBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findUserBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findUserBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findCalendarBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findCalendarBySchoolIdAndJsonParams_args, findCalendarBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCalendarBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCalendarBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCalendarBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCalendarBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCalendarBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findCalendarBySchoolIdAndJsonParams_args() {
    }

    public findCalendarBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCalendarBySchoolIdAndJsonParams_args(findCalendarBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findCalendarBySchoolIdAndJsonParams_args deepCopy() {
      return new findCalendarBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findCalendarBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findCalendarBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findCalendarBySchoolIdAndJsonParams_args)
        return this.equals((findCalendarBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findCalendarBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCalendarBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCalendarBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCalendarBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCalendarBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findCalendarBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findCalendarBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCalendarBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCalendarBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCalendarBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCalendarBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCalendarBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findCalendarBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findCalendarBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCalendarBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCalendarBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCalendarBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findCalendarBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findCalendarBySchoolIdAndJsonParams_result, findCalendarBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCalendarBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCalendarBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCalendarBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCalendarBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCalendarBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findCalendarBySchoolIdAndJsonParams_result() {
    }

    public findCalendarBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCalendarBySchoolIdAndJsonParams_result(findCalendarBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findCalendarBySchoolIdAndJsonParams_result deepCopy() {
      return new findCalendarBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findCalendarBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findCalendarBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findCalendarBySchoolIdAndJsonParams_result)
        return this.equals((findCalendarBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findCalendarBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCalendarBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCalendarBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCalendarBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCalendarBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findCalendarBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findCalendarBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCalendarBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCalendarBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCalendarBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCalendarBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findCalendarBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findCalendarBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findCalendarBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCalendarBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCalendarBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCalendarBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStaffBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findStaffBySchoolIdAndJsonParams_args, findStaffBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStaffBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStaffBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStaffBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStaffBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStaffBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findStaffBySchoolIdAndJsonParams_args() {
    }

    public findStaffBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStaffBySchoolIdAndJsonParams_args(findStaffBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findStaffBySchoolIdAndJsonParams_args deepCopy() {
      return new findStaffBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findStaffBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findStaffBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStaffBySchoolIdAndJsonParams_args)
        return this.equals((findStaffBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findStaffBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStaffBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStaffBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStaffBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStaffBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findStaffBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findStaffBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStaffBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStaffBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStaffBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStaffBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStaffBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findStaffBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findStaffBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStaffBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStaffBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStaffBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStaffBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findStaffBySchoolIdAndJsonParams_result, findStaffBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStaffBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStaffBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStaffBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStaffBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStaffBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findStaffBySchoolIdAndJsonParams_result() {
    }

    public findStaffBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStaffBySchoolIdAndJsonParams_result(findStaffBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findStaffBySchoolIdAndJsonParams_result deepCopy() {
      return new findStaffBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findStaffBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findStaffBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStaffBySchoolIdAndJsonParams_result)
        return this.equals((findStaffBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findStaffBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStaffBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStaffBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStaffBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStaffBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findStaffBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findStaffBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStaffBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStaffBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStaffBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStaffBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStaffBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findStaffBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findStaffBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStaffBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStaffBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStaffBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findHeadTeacherBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findHeadTeacherBySchoolIdAndJsonParams_args, findHeadTeacherBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findHeadTeacherBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHeadTeacherBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findHeadTeacherBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findHeadTeacherBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHeadTeacherBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findHeadTeacherBySchoolIdAndJsonParams_args() {
    }

    public findHeadTeacherBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHeadTeacherBySchoolIdAndJsonParams_args(findHeadTeacherBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findHeadTeacherBySchoolIdAndJsonParams_args deepCopy() {
      return new findHeadTeacherBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findHeadTeacherBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findHeadTeacherBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findHeadTeacherBySchoolIdAndJsonParams_args)
        return this.equals((findHeadTeacherBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findHeadTeacherBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findHeadTeacherBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findHeadTeacherBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findHeadTeacherBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findHeadTeacherBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findHeadTeacherBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findHeadTeacherBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findHeadTeacherBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findHeadTeacherBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findHeadTeacherBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findHeadTeacherBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findHeadTeacherBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findHeadTeacherBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findHeadTeacherBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findHeadTeacherBySchoolIdAndJsonParams_result, findHeadTeacherBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findHeadTeacherBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHeadTeacherBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findHeadTeacherBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findHeadTeacherBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHeadTeacherBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findHeadTeacherBySchoolIdAndJsonParams_result() {
    }

    public findHeadTeacherBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHeadTeacherBySchoolIdAndJsonParams_result(findHeadTeacherBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findHeadTeacherBySchoolIdAndJsonParams_result deepCopy() {
      return new findHeadTeacherBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findHeadTeacherBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findHeadTeacherBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findHeadTeacherBySchoolIdAndJsonParams_result)
        return this.equals((findHeadTeacherBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findHeadTeacherBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findHeadTeacherBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findHeadTeacherBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findHeadTeacherBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findHeadTeacherBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findHeadTeacherBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findHeadTeacherBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findHeadTeacherBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findHeadTeacherBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findHeadTeacherBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findHeadTeacherBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findHeadTeacherBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findHeadTeacherBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findHeadTeacherBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassUserDetailBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findClassUserDetailBySchoolIdAndJsonParams_args, findClassUserDetailBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findClassUserDetailBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassUserDetailBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassUserDetailBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findClassUserDetailBySchoolIdAndJsonParams_args() {
    }

    public findClassUserDetailBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassUserDetailBySchoolIdAndJsonParams_args(findClassUserDetailBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findClassUserDetailBySchoolIdAndJsonParams_args deepCopy() {
      return new findClassUserDetailBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findClassUserDetailBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findClassUserDetailBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassUserDetailBySchoolIdAndJsonParams_args)
        return this.equals((findClassUserDetailBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findClassUserDetailBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassUserDetailBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassUserDetailBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassUserDetailBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassUserDetailBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassUserDetailBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassUserDetailBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassUserDetailBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findClassUserDetailBySchoolIdAndJsonParams_result, findClassUserDetailBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findClassUserDetailBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassUserDetailBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassUserDetailBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassUserDetailBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findClassUserDetailBySchoolIdAndJsonParams_result() {
    }

    public findClassUserDetailBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassUserDetailBySchoolIdAndJsonParams_result(findClassUserDetailBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findClassUserDetailBySchoolIdAndJsonParams_result deepCopy() {
      return new findClassUserDetailBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findClassUserDetailBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findClassUserDetailBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassUserDetailBySchoolIdAndJsonParams_result)
        return this.equals((findClassUserDetailBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findClassUserDetailBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassUserDetailBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassUserDetailBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassUserDetailBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassUserDetailBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassUserDetailBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassUserDetailBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findClassUserDetailBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findClassUserDetailBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassUserDetailBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassUserDetailBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findBriefUserByV5_args implements org.apache.thrift.TBase<findBriefUserByV5_args, findBriefUserByV5_args._Fields>, java.io.Serializable, Cloneable, Comparable<findBriefUserByV5_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBriefUserByV5_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findBriefUserByV5_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findBriefUserByV5_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBriefUserByV5_args.class, metaDataMap);
    }

    public findBriefUserByV5_args() {
    }

    public findBriefUserByV5_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBriefUserByV5_args(findBriefUserByV5_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findBriefUserByV5_args deepCopy() {
      return new findBriefUserByV5_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findBriefUserByV5_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findBriefUserByV5_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findBriefUserByV5_args)
        return this.equals((findBriefUserByV5_args)that);
      return false;
    }

    public boolean equals(findBriefUserByV5_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findBriefUserByV5_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findBriefUserByV5_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBriefUserByV5_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBriefUserByV5_argsStandardScheme getScheme() {
        return new findBriefUserByV5_argsStandardScheme();
      }
    }

    private static class findBriefUserByV5_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findBriefUserByV5_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBriefUserByV5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBriefUserByV5_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBriefUserByV5_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBriefUserByV5_argsTupleScheme getScheme() {
        return new findBriefUserByV5_argsTupleScheme();
      }
    }

    private static class findBriefUserByV5_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findBriefUserByV5_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBriefUserByV5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBriefUserByV5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findBriefUserByV5_result implements org.apache.thrift.TBase<findBriefUserByV5_result, findBriefUserByV5_result._Fields>, java.io.Serializable, Cloneable, Comparable<findBriefUserByV5_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBriefUserByV5_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findBriefUserByV5_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findBriefUserByV5_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBriefUserByV5_result.class, metaDataMap);
    }

    public findBriefUserByV5_result() {
    }

    public findBriefUserByV5_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBriefUserByV5_result(findBriefUserByV5_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findBriefUserByV5_result deepCopy() {
      return new findBriefUserByV5_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findBriefUserByV5_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findBriefUserByV5_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findBriefUserByV5_result)
        return this.equals((findBriefUserByV5_result)that);
      return false;
    }

    public boolean equals(findBriefUserByV5_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findBriefUserByV5_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findBriefUserByV5_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBriefUserByV5_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBriefUserByV5_resultStandardScheme getScheme() {
        return new findBriefUserByV5_resultStandardScheme();
      }
    }

    private static class findBriefUserByV5_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findBriefUserByV5_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBriefUserByV5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBriefUserByV5_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBriefUserByV5_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBriefUserByV5_resultTupleScheme getScheme() {
        return new findBriefUserByV5_resultTupleScheme();
      }
    }

    private static class findBriefUserByV5_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findBriefUserByV5_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBriefUserByV5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBriefUserByV5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNewPageUserBy_args implements org.apache.thrift.TBase<findNewPageUserBy_args, findNewPageUserBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<findNewPageUserBy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNewPageUserBy_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNewPageUserBy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNewPageUserBy_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNewPageUserBy_args.class, metaDataMap);
    }

    public findNewPageUserBy_args() {
    }

    public findNewPageUserBy_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNewPageUserBy_args(findNewPageUserBy_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findNewPageUserBy_args deepCopy() {
      return new findNewPageUserBy_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findNewPageUserBy_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findNewPageUserBy_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNewPageUserBy_args)
        return this.equals((findNewPageUserBy_args)that);
      return false;
    }

    public boolean equals(findNewPageUserBy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNewPageUserBy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNewPageUserBy_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNewPageUserBy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNewPageUserBy_argsStandardScheme getScheme() {
        return new findNewPageUserBy_argsStandardScheme();
      }
    }

    private static class findNewPageUserBy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNewPageUserBy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNewPageUserBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNewPageUserBy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNewPageUserBy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNewPageUserBy_argsTupleScheme getScheme() {
        return new findNewPageUserBy_argsTupleScheme();
      }
    }

    private static class findNewPageUserBy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNewPageUserBy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNewPageUserBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNewPageUserBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNewPageUserBy_result implements org.apache.thrift.TBase<findNewPageUserBy_result, findNewPageUserBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<findNewPageUserBy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNewPageUserBy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNewPageUserBy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNewPageUserBy_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNewPageUserBy_result.class, metaDataMap);
    }

    public findNewPageUserBy_result() {
    }

    public findNewPageUserBy_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNewPageUserBy_result(findNewPageUserBy_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findNewPageUserBy_result deepCopy() {
      return new findNewPageUserBy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findNewPageUserBy_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findNewPageUserBy_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNewPageUserBy_result)
        return this.equals((findNewPageUserBy_result)that);
      return false;
    }

    public boolean equals(findNewPageUserBy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNewPageUserBy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNewPageUserBy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNewPageUserBy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNewPageUserBy_resultStandardScheme getScheme() {
        return new findNewPageUserBy_resultStandardScheme();
      }
    }

    private static class findNewPageUserBy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNewPageUserBy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNewPageUserBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNewPageUserBy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNewPageUserBy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNewPageUserBy_resultTupleScheme getScheme() {
        return new findNewPageUserBy_resultTupleScheme();
      }
    }

    private static class findNewPageUserBy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNewPageUserBy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNewPageUserBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNewPageUserBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args implements org.apache.thrift.TBase<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFICE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("officeIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField CLASS_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("classIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> officeIdList; // required
    public java.util.List<java.lang.String> classIdList; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      OFFICE_ID_LIST((short)2, "officeIdList"),
      CLASS_ID_LIST((short)3, "classIdList"),
      JSON_PARAMS((short)4, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // OFFICE_ID_LIST
            return OFFICE_ID_LIST;
          case 3: // CLASS_ID_LIST
            return CLASS_ID_LIST;
          case 4: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFICE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("officeIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CLASS_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("classIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args.class, metaDataMap);
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args() {
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> officeIdList,
      java.util.List<java.lang.String> classIdList,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.officeIdList = officeIdList;
      this.classIdList = classIdList;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetOfficeIdList()) {
        java.util.List<java.lang.String> __this__officeIdList = new java.util.ArrayList<java.lang.String>(other.officeIdList);
        this.officeIdList = __this__officeIdList;
      }
      if (other.isSetClassIdList()) {
        java.util.List<java.lang.String> __this__classIdList = new java.util.ArrayList<java.lang.String>(other.classIdList);
        this.classIdList = __this__classIdList;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args deepCopy() {
      return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.officeIdList = null;
      this.classIdList = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getOfficeIdListSize() {
      return (this.officeIdList == null) ? 0 : this.officeIdList.size();
    }

    public java.util.Iterator<java.lang.String> getOfficeIdListIterator() {
      return (this.officeIdList == null) ? null : this.officeIdList.iterator();
    }

    public void addToOfficeIdList(java.lang.String elem) {
      if (this.officeIdList == null) {
        this.officeIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.officeIdList.add(elem);
    }

    public java.util.List<java.lang.String> getOfficeIdList() {
      return this.officeIdList;
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args setOfficeIdList(java.util.List<java.lang.String> officeIdList) {
      this.officeIdList = officeIdList;
      return this;
    }

    public void unsetOfficeIdList() {
      this.officeIdList = null;
    }

    /** Returns true if field officeIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeIdList() {
      return this.officeIdList != null;
    }

    public void setOfficeIdListIsSet(boolean value) {
      if (!value) {
        this.officeIdList = null;
      }
    }

    public int getClassIdListSize() {
      return (this.classIdList == null) ? 0 : this.classIdList.size();
    }

    public java.util.Iterator<java.lang.String> getClassIdListIterator() {
      return (this.classIdList == null) ? null : this.classIdList.iterator();
    }

    public void addToClassIdList(java.lang.String elem) {
      if (this.classIdList == null) {
        this.classIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.classIdList.add(elem);
    }

    public java.util.List<java.lang.String> getClassIdList() {
      return this.classIdList;
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args setClassIdList(java.util.List<java.lang.String> classIdList) {
      this.classIdList = classIdList;
      return this;
    }

    public void unsetClassIdList() {
      this.classIdList = null;
    }

    /** Returns true if field classIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetClassIdList() {
      return this.classIdList != null;
    }

    public void setClassIdListIsSet(boolean value) {
      if (!value) {
        this.classIdList = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OFFICE_ID_LIST:
        if (value == null) {
          unsetOfficeIdList();
        } else {
          setOfficeIdList((java.util.List<java.lang.String>)value);
        }
        break;

      case CLASS_ID_LIST:
        if (value == null) {
          unsetClassIdList();
        } else {
          setClassIdList((java.util.List<java.lang.String>)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case OFFICE_ID_LIST:
        return getOfficeIdList();

      case CLASS_ID_LIST:
        return getClassIdList();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case OFFICE_ID_LIST:
        return isSetOfficeIdList();
      case CLASS_ID_LIST:
        return isSetClassIdList();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args)
        return this.equals((findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_officeIdList = true && this.isSetOfficeIdList();
      boolean that_present_officeIdList = true && that.isSetOfficeIdList();
      if (this_present_officeIdList || that_present_officeIdList) {
        if (!(this_present_officeIdList && that_present_officeIdList))
          return false;
        if (!this.officeIdList.equals(that.officeIdList))
          return false;
      }

      boolean this_present_classIdList = true && this.isSetClassIdList();
      boolean that_present_classIdList = true && that.isSetClassIdList();
      if (this_present_classIdList || that_present_classIdList) {
        if (!(this_present_classIdList && that_present_classIdList))
          return false;
        if (!this.classIdList.equals(that.classIdList))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOfficeIdList()) ? 131071 : 524287);
      if (isSetOfficeIdList())
        hashCode = hashCode * 8191 + officeIdList.hashCode();

      hashCode = hashCode * 8191 + ((isSetClassIdList()) ? 131071 : 524287);
      if (isSetClassIdList())
        hashCode = hashCode * 8191 + classIdList.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOfficeIdList()).compareTo(other.isSetOfficeIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeIdList, other.officeIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClassIdList()).compareTo(other.isSetClassIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classIdList, other.classIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("officeIdList:");
      if (this.officeIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.officeIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classIdList:");
      if (this.classIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.classIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsStandardScheme getScheme() {
        return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsStandardScheme();
      }
    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFICE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.officeIdList = new java.util.ArrayList<java.lang.String>(_list264.size);
                  java.lang.String _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = iprot.readString();
                    struct.officeIdList.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setOfficeIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLASS_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list267 = iprot.readListBegin();
                  struct.classIdList = new java.util.ArrayList<java.lang.String>(_list267.size);
                  java.lang.String _elem268;
                  for (int _i269 = 0; _i269 < _list267.size; ++_i269)
                  {
                    _elem268 = iprot.readString();
                    struct.classIdList.add(_elem268);
                  }
                  iprot.readListEnd();
                }
                struct.setClassIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.officeIdList != null) {
          oprot.writeFieldBegin(OFFICE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.officeIdList.size()));
            for (java.lang.String _iter270 : struct.officeIdList)
            {
              oprot.writeString(_iter270);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.classIdList != null) {
          oprot.writeFieldBegin(CLASS_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.classIdList.size()));
            for (java.lang.String _iter271 : struct.classIdList)
            {
              oprot.writeString(_iter271);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsTupleScheme getScheme() {
        return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsTupleScheme();
      }
    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetOfficeIdList()) {
          optionals.set(1);
        }
        if (struct.isSetClassIdList()) {
          optionals.set(2);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOfficeIdList()) {
          {
            oprot.writeI32(struct.officeIdList.size());
            for (java.lang.String _iter272 : struct.officeIdList)
            {
              oprot.writeString(_iter272);
            }
          }
        }
        if (struct.isSetClassIdList()) {
          {
            oprot.writeI32(struct.classIdList.size());
            for (java.lang.String _iter273 : struct.classIdList)
            {
              oprot.writeString(_iter273);
            }
          }
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list274 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.officeIdList = new java.util.ArrayList<java.lang.String>(_list274.size);
            java.lang.String _elem275;
            for (int _i276 = 0; _i276 < _list274.size; ++_i276)
            {
              _elem275 = iprot.readString();
              struct.officeIdList.add(_elem275);
            }
          }
          struct.setOfficeIdListIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.classIdList = new java.util.ArrayList<java.lang.String>(_list277.size);
            java.lang.String _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = iprot.readString();
              struct.classIdList.add(_elem278);
            }
          }
          struct.setClassIdListIsSet(true);
        }
        if (incoming.get(3)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result implements org.apache.thrift.TBase<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result.class, metaDataMap);
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result() {
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result deepCopy() {
      return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result)
        return this.equals((findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultStandardScheme getScheme() {
        return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultStandardScheme();
      }
    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultTupleScheme getScheme() {
        return new findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultTupleScheme();
      }
    }

    private static class findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserCountBySchoolIdAndOfficeIdsAndClassIdsAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args implements org.apache.thrift.TBase<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("classId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String classId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      CLASS_ID((short)2, "classId"),
      JSON_PARAMS((short)3, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // CLASS_ID
            return CLASS_ID;
          case 3: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("classId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args.class, metaDataMap);
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args() {
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String classId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.classId = classId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetClassId()) {
        this.classId = other.classId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args deepCopy() {
      return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.classId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getClassId() {
      return this.classId;
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args setClassId(java.lang.String classId) {
      this.classId = classId;
      return this;
    }

    public void unsetClassId() {
      this.classId = null;
    }

    /** Returns true if field classId is set (has been assigned a value) and false otherwise */
    public boolean isSetClassId() {
      return this.classId != null;
    }

    public void setClassIdIsSet(boolean value) {
      if (!value) {
        this.classId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case CLASS_ID:
        if (value == null) {
          unsetClassId();
        } else {
          setClassId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case CLASS_ID:
        return getClassId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case CLASS_ID:
        return isSetClassId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args)
        return this.equals((findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_classId = true && this.isSetClassId();
      boolean that_present_classId = true && that.isSetClassId();
      if (this_present_classId || that_present_classId) {
        if (!(this_present_classId && that_present_classId))
          return false;
        if (!this.classId.equals(that.classId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetClassId()) ? 131071 : 524287);
      if (isSetClassId())
        hashCode = hashCode * 8191 + classId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClassId()).compareTo(other.isSetClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classId, other.classId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classId:");
      if (this.classId == null) {
        sb.append("null");
      } else {
        sb.append(this.classId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsStandardScheme getScheme() {
        return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classId = iprot.readString();
                struct.setClassIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.classId != null) {
          oprot.writeFieldBegin(CLASS_ID_FIELD_DESC);
          oprot.writeString(struct.classId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsTupleScheme getScheme() {
        return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetClassId()) {
          optionals.set(1);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetClassId()) {
          oprot.writeString(struct.classId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classId = iprot.readString();
          struct.setClassIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result implements org.apache.thrift.TBase<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result.class, metaDataMap);
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result() {
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result deepCopy() {
      return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result)
        return this.equals((findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultStandardScheme getScheme() {
        return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultTupleScheme getScheme() {
        return new findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findClassStudentParentDetailBySchoolIdAndClassIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args implements org.apache.thrift.TBase<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRE_SYNC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("preSyncTime", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public long preSyncTime; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      PRE_SYNC_TIME((short)2, "preSyncTime"),
      JSON_PARAMS((short)3, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // PRE_SYNC_TIME
            return PRE_SYNC_TIME;
          case 3: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRESYNCTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRE_SYNC_TIME, new org.apache.thrift.meta_data.FieldMetaData("preSyncTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args.class, metaDataMap);
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args() {
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(
      java.lang.String schoolId,
      long preSyncTime,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.preSyncTime = preSyncTime;
      setPreSyncTimeIsSet(true);
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      this.preSyncTime = other.preSyncTime;
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args deepCopy() {
      return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      setPreSyncTimeIsSet(false);
      this.preSyncTime = 0;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public long getPreSyncTime() {
      return this.preSyncTime;
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args setPreSyncTime(long preSyncTime) {
      this.preSyncTime = preSyncTime;
      setPreSyncTimeIsSet(true);
      return this;
    }

    public void unsetPreSyncTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESYNCTIME_ISSET_ID);
    }

    /** Returns true if field preSyncTime is set (has been assigned a value) and false otherwise */
    public boolean isSetPreSyncTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESYNCTIME_ISSET_ID);
    }

    public void setPreSyncTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESYNCTIME_ISSET_ID, value);
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case PRE_SYNC_TIME:
        if (value == null) {
          unsetPreSyncTime();
        } else {
          setPreSyncTime((java.lang.Long)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case PRE_SYNC_TIME:
        return getPreSyncTime();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case PRE_SYNC_TIME:
        return isSetPreSyncTime();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args)
        return this.equals((findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args)that);
      return false;
    }

    public boolean equals(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_preSyncTime = true;
      boolean that_present_preSyncTime = true;
      if (this_present_preSyncTime || that_present_preSyncTime) {
        if (!(this_present_preSyncTime && that_present_preSyncTime))
          return false;
        if (this.preSyncTime != that.preSyncTime)
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(preSyncTime);

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPreSyncTime()).compareTo(other.isSetPreSyncTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreSyncTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preSyncTime, other.preSyncTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("preSyncTime:");
      sb.append(this.preSyncTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardScheme getScheme() {
        return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardScheme();
      }
    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRE_SYNC_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.preSyncTime = iprot.readI64();
                struct.setPreSyncTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRE_SYNC_TIME_FIELD_DESC);
        oprot.writeI64(struct.preSyncTime);
        oprot.writeFieldEnd();
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleScheme getScheme() {
        return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleScheme();
      }
    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetPreSyncTime()) {
          optionals.set(1);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetPreSyncTime()) {
          oprot.writeI64(struct.preSyncTime);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.preSyncTime = iprot.readI64();
          struct.setPreSyncTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result implements org.apache.thrift.TBase<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result.class, metaDataMap);
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result() {
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result deepCopy() {
      return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result)
        return this.equals((findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result)that);
      return false;
    }

    public boolean equals(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardScheme getScheme() {
        return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardScheme();
      }
    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleScheme getScheme() {
        return new findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleScheme();
      }
    }

    private static class findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllCanteenUnsyncUserBySchoolIdAndPreSyncTimeAndOtherJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args implements org.apache.thrift.TBase<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("officeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String officeId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      OFFICE_ID((short)2, "officeId"),
      JSON_PARAMS((short)3, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // OFFICE_ID
            return OFFICE_ID;
          case 3: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFICE_ID, new org.apache.thrift.meta_data.FieldMetaData("officeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args.class, metaDataMap);
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args() {
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String officeId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.officeId = officeId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetOfficeId()) {
        this.officeId = other.officeId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args deepCopy() {
      return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.officeId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getOfficeId() {
      return this.officeId;
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args setOfficeId(java.lang.String officeId) {
      this.officeId = officeId;
      return this;
    }

    public void unsetOfficeId() {
      this.officeId = null;
    }

    /** Returns true if field officeId is set (has been assigned a value) and false otherwise */
    public boolean isSetOfficeId() {
      return this.officeId != null;
    }

    public void setOfficeIdIsSet(boolean value) {
      if (!value) {
        this.officeId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case OFFICE_ID:
        if (value == null) {
          unsetOfficeId();
        } else {
          setOfficeId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case OFFICE_ID:
        return getOfficeId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case OFFICE_ID:
        return isSetOfficeId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args)
        return this.equals((findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_officeId = true && this.isSetOfficeId();
      boolean that_present_officeId = true && that.isSetOfficeId();
      if (this_present_officeId || that_present_officeId) {
        if (!(this_present_officeId && that_present_officeId))
          return false;
        if (!this.officeId.equals(that.officeId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOfficeId()) ? 131071 : 524287);
      if (isSetOfficeId())
        hashCode = hashCode * 8191 + officeId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOfficeId()).compareTo(other.isSetOfficeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfficeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeId, other.officeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("officeId:");
      if (this.officeId == null) {
        sb.append("null");
      } else {
        sb.append(this.officeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsStandardScheme getScheme() {
        return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.officeId = iprot.readString();
                struct.setOfficeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.officeId != null) {
          oprot.writeFieldBegin(OFFICE_ID_FIELD_DESC);
          oprot.writeString(struct.officeId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsTupleScheme getScheme() {
        return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetOfficeId()) {
          optionals.set(1);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetOfficeId()) {
          oprot.writeString(struct.officeId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.officeId = iprot.readString();
          struct.setOfficeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result implements org.apache.thrift.TBase<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result.class, metaDataMap);
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result() {
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result deepCopy() {
      return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result)
        return this.equals((findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultStandardScheme getScheme() {
        return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultTupleScheme getScheme() {
        return new findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findChildOfficeListBySchoolIdAndOfficeIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAbnormalUserIdListBySchoolId_args implements org.apache.thrift.TBase<findAbnormalUserIdListBySchoolId_args, findAbnormalUserIdListBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAbnormalUserIdListBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAbnormalUserIdListBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAbnormalUserIdListBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAbnormalUserIdListBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAbnormalUserIdListBySchoolId_args.class, metaDataMap);
    }

    public findAbnormalUserIdListBySchoolId_args() {
    }

    public findAbnormalUserIdListBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAbnormalUserIdListBySchoolId_args(findAbnormalUserIdListBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findAbnormalUserIdListBySchoolId_args deepCopy() {
      return new findAbnormalUserIdListBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findAbnormalUserIdListBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAbnormalUserIdListBySchoolId_args)
        return this.equals((findAbnormalUserIdListBySchoolId_args)that);
      return false;
    }

    public boolean equals(findAbnormalUserIdListBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAbnormalUserIdListBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAbnormalUserIdListBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAbnormalUserIdListBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAbnormalUserIdListBySchoolId_argsStandardScheme getScheme() {
        return new findAbnormalUserIdListBySchoolId_argsStandardScheme();
      }
    }

    private static class findAbnormalUserIdListBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAbnormalUserIdListBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAbnormalUserIdListBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAbnormalUserIdListBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAbnormalUserIdListBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAbnormalUserIdListBySchoolId_argsTupleScheme getScheme() {
        return new findAbnormalUserIdListBySchoolId_argsTupleScheme();
      }
    }

    private static class findAbnormalUserIdListBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAbnormalUserIdListBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAbnormalUserIdListBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAbnormalUserIdListBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findAbnormalUserIdListBySchoolId_result implements org.apache.thrift.TBase<findAbnormalUserIdListBySchoolId_result, findAbnormalUserIdListBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAbnormalUserIdListBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAbnormalUserIdListBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAbnormalUserIdListBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAbnormalUserIdListBySchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAbnormalUserIdListBySchoolId_result.class, metaDataMap);
    }

    public findAbnormalUserIdListBySchoolId_result() {
    }

    public findAbnormalUserIdListBySchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAbnormalUserIdListBySchoolId_result(findAbnormalUserIdListBySchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findAbnormalUserIdListBySchoolId_result deepCopy() {
      return new findAbnormalUserIdListBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findAbnormalUserIdListBySchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findAbnormalUserIdListBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findAbnormalUserIdListBySchoolId_result)
        return this.equals((findAbnormalUserIdListBySchoolId_result)that);
      return false;
    }

    public boolean equals(findAbnormalUserIdListBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findAbnormalUserIdListBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findAbnormalUserIdListBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAbnormalUserIdListBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAbnormalUserIdListBySchoolId_resultStandardScheme getScheme() {
        return new findAbnormalUserIdListBySchoolId_resultStandardScheme();
      }
    }

    private static class findAbnormalUserIdListBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAbnormalUserIdListBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAbnormalUserIdListBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAbnormalUserIdListBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAbnormalUserIdListBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findAbnormalUserIdListBySchoolId_resultTupleScheme getScheme() {
        return new findAbnormalUserIdListBySchoolId_resultTupleScheme();
      }
    }

    private static class findAbnormalUserIdListBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAbnormalUserIdListBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAbnormalUserIdListBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAbnormalUserIdListBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSemesterBySchoolId_args implements org.apache.thrift.TBase<findSemesterBySchoolId_args, findSemesterBySchoolId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSemesterBySchoolId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSemesterBySchoolId_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSemesterBySchoolId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSemesterBySchoolId_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSemesterBySchoolId_args.class, metaDataMap);
    }

    public findSemesterBySchoolId_args() {
    }

    public findSemesterBySchoolId_args(
      java.lang.String schoolId)
    {
      this();
      this.schoolId = schoolId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSemesterBySchoolId_args(findSemesterBySchoolId_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
    }

    public findSemesterBySchoolId_args deepCopy() {
      return new findSemesterBySchoolId_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findSemesterBySchoolId_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSemesterBySchoolId_args)
        return this.equals((findSemesterBySchoolId_args)that);
      return false;
    }

    public boolean equals(findSemesterBySchoolId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSemesterBySchoolId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSemesterBySchoolId_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSemesterBySchoolId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSemesterBySchoolId_argsStandardScheme getScheme() {
        return new findSemesterBySchoolId_argsStandardScheme();
      }
    }

    private static class findSemesterBySchoolId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSemesterBySchoolId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSemesterBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSemesterBySchoolId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSemesterBySchoolId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSemesterBySchoolId_argsTupleScheme getScheme() {
        return new findSemesterBySchoolId_argsTupleScheme();
      }
    }

    private static class findSemesterBySchoolId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSemesterBySchoolId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSemesterBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSemesterBySchoolId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSemesterBySchoolId_result implements org.apache.thrift.TBase<findSemesterBySchoolId_result, findSemesterBySchoolId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSemesterBySchoolId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSemesterBySchoolId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSemesterBySchoolId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSemesterBySchoolId_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSemesterBySchoolId_result.class, metaDataMap);
    }

    public findSemesterBySchoolId_result() {
    }

    public findSemesterBySchoolId_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSemesterBySchoolId_result(findSemesterBySchoolId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSemesterBySchoolId_result deepCopy() {
      return new findSemesterBySchoolId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findSemesterBySchoolId_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSemesterBySchoolId_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSemesterBySchoolId_result)
        return this.equals((findSemesterBySchoolId_result)that);
      return false;
    }

    public boolean equals(findSemesterBySchoolId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSemesterBySchoolId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSemesterBySchoolId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSemesterBySchoolId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSemesterBySchoolId_resultStandardScheme getScheme() {
        return new findSemesterBySchoolId_resultStandardScheme();
      }
    }

    private static class findSemesterBySchoolId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSemesterBySchoolId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSemesterBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSemesterBySchoolId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSemesterBySchoolId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSemesterBySchoolId_resultTupleScheme getScheme() {
        return new findSemesterBySchoolId_resultTupleScheme();
      }
    }

    private static class findSemesterBySchoolId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSemesterBySchoolId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSemesterBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSemesterBySchoolId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findRoleBySchoolIdAndJsonParams_args, findRoleBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findRoleBySchoolIdAndJsonParams_args() {
    }

    public findRoleBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleBySchoolIdAndJsonParams_args(findRoleBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findRoleBySchoolIdAndJsonParams_args deepCopy() {
      return new findRoleBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findRoleBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findRoleBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleBySchoolIdAndJsonParams_args)
        return this.equals((findRoleBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findRoleBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findRoleBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findRoleBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findRoleBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findRoleBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findRoleBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findRoleBySchoolIdAndJsonParams_result, findRoleBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRoleBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findRoleBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findRoleBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findRoleBySchoolIdAndJsonParams_result() {
    }

    public findRoleBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleBySchoolIdAndJsonParams_result(findRoleBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findRoleBySchoolIdAndJsonParams_result deepCopy() {
      return new findRoleBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findRoleBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findRoleBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleBySchoolIdAndJsonParams_result)
        return this.equals((findRoleBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findRoleBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findRoleBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findRoleBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findRoleBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findRoleBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findRoleBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findRoleBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findRoleBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findRoleBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findRoleBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSysRoleBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findSysRoleBySchoolIdAndJsonParams_args, findSysRoleBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSysRoleBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSysRoleBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSysRoleBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSysRoleBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSysRoleBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findSysRoleBySchoolIdAndJsonParams_args() {
    }

    public findSysRoleBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSysRoleBySchoolIdAndJsonParams_args(findSysRoleBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findSysRoleBySchoolIdAndJsonParams_args deepCopy() {
      return new findSysRoleBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findSysRoleBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findSysRoleBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSysRoleBySchoolIdAndJsonParams_args)
        return this.equals((findSysRoleBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findSysRoleBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSysRoleBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSysRoleBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSysRoleBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findSysRoleBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findSysRoleBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSysRoleBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSysRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSysRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSysRoleBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findSysRoleBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findSysRoleBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSysRoleBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSysRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSysRoleBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findSysRoleBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findSysRoleBySchoolIdAndJsonParams_result, findSysRoleBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSysRoleBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSysRoleBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findSysRoleBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findSysRoleBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSysRoleBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findSysRoleBySchoolIdAndJsonParams_result() {
    }

    public findSysRoleBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSysRoleBySchoolIdAndJsonParams_result(findSysRoleBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findSysRoleBySchoolIdAndJsonParams_result deepCopy() {
      return new findSysRoleBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findSysRoleBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findSysRoleBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findSysRoleBySchoolIdAndJsonParams_result)
        return this.equals((findSysRoleBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findSysRoleBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findSysRoleBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findSysRoleBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSysRoleBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findSysRoleBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findSysRoleBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findSysRoleBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSysRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSysRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSysRoleBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findSysRoleBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findSysRoleBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findSysRoleBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findSysRoleBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSysRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSysRoleBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findBusiClassBySchoolIdAndJsonParams_args implements org.apache.thrift.TBase<findBusiClassBySchoolIdAndJsonParams_args, findBusiClassBySchoolIdAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findBusiClassBySchoolIdAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBusiClassBySchoolIdAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findBusiClassBySchoolIdAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findBusiClassBySchoolIdAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      JSON_PARAMS((short)2, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBusiClassBySchoolIdAndJsonParams_args.class, metaDataMap);
    }

    public findBusiClassBySchoolIdAndJsonParams_args() {
    }

    public findBusiClassBySchoolIdAndJsonParams_args(
      java.lang.String schoolId,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBusiClassBySchoolIdAndJsonParams_args(findBusiClassBySchoolIdAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findBusiClassBySchoolIdAndJsonParams_args deepCopy() {
      return new findBusiClassBySchoolIdAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findBusiClassBySchoolIdAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findBusiClassBySchoolIdAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findBusiClassBySchoolIdAndJsonParams_args)
        return this.equals((findBusiClassBySchoolIdAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findBusiClassBySchoolIdAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findBusiClassBySchoolIdAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findBusiClassBySchoolIdAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBusiClassBySchoolIdAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBusiClassBySchoolIdAndJsonParams_argsStandardScheme getScheme() {
        return new findBusiClassBySchoolIdAndJsonParams_argsStandardScheme();
      }
    }

    private static class findBusiClassBySchoolIdAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findBusiClassBySchoolIdAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBusiClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBusiClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBusiClassBySchoolIdAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBusiClassBySchoolIdAndJsonParams_argsTupleScheme getScheme() {
        return new findBusiClassBySchoolIdAndJsonParams_argsTupleScheme();
      }
    }

    private static class findBusiClassBySchoolIdAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findBusiClassBySchoolIdAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBusiClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBusiClassBySchoolIdAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findBusiClassBySchoolIdAndJsonParams_result implements org.apache.thrift.TBase<findBusiClassBySchoolIdAndJsonParams_result, findBusiClassBySchoolIdAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findBusiClassBySchoolIdAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBusiClassBySchoolIdAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findBusiClassBySchoolIdAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findBusiClassBySchoolIdAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBusiClassBySchoolIdAndJsonParams_result.class, metaDataMap);
    }

    public findBusiClassBySchoolIdAndJsonParams_result() {
    }

    public findBusiClassBySchoolIdAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBusiClassBySchoolIdAndJsonParams_result(findBusiClassBySchoolIdAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findBusiClassBySchoolIdAndJsonParams_result deepCopy() {
      return new findBusiClassBySchoolIdAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findBusiClassBySchoolIdAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findBusiClassBySchoolIdAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findBusiClassBySchoolIdAndJsonParams_result)
        return this.equals((findBusiClassBySchoolIdAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findBusiClassBySchoolIdAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findBusiClassBySchoolIdAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findBusiClassBySchoolIdAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBusiClassBySchoolIdAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBusiClassBySchoolIdAndJsonParams_resultStandardScheme getScheme() {
        return new findBusiClassBySchoolIdAndJsonParams_resultStandardScheme();
      }
    }

    private static class findBusiClassBySchoolIdAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findBusiClassBySchoolIdAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBusiClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBusiClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBusiClassBySchoolIdAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBusiClassBySchoolIdAndJsonParams_resultTupleScheme getScheme() {
        return new findBusiClassBySchoolIdAndJsonParams_resultTupleScheme();
      }
    }

    private static class findBusiClassBySchoolIdAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findBusiClassBySchoolIdAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBusiClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBusiClassBySchoolIdAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args implements org.apache.thrift.TBase<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args");

    private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField JSON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonParams", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsTupleSchemeFactory();

    public java.lang.String schoolId; // required
    public java.util.List<java.lang.String> userIdList; // required
    public java.lang.String jsonParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOL_ID((short)1, "schoolId"),
      USER_ID_LIST((short)2, "userIdList"),
      JSON_PARAMS((short)3, "jsonParams");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOL_ID
            return SCHOOL_ID;
          case 2: // USER_ID_LIST
            return USER_ID_LIST;
          case 3: // JSON_PARAMS
            return JSON_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.JSON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("jsonParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args.class, metaDataMap);
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args() {
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args(
      java.lang.String schoolId,
      java.util.List<java.lang.String> userIdList,
      java.lang.String jsonParams)
    {
      this();
      this.schoolId = schoolId;
      this.userIdList = userIdList;
      this.jsonParams = jsonParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args other) {
      if (other.isSetSchoolId()) {
        this.schoolId = other.schoolId;
      }
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.String> __this__userIdList = new java.util.ArrayList<java.lang.String>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
      if (other.isSetJsonParams()) {
        this.jsonParams = other.jsonParams;
      }
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args deepCopy() {
      return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args(this);
    }

    @Override
    public void clear() {
      this.schoolId = null;
      this.userIdList = null;
      this.jsonParams = null;
    }

    public java.lang.String getSchoolId() {
      return this.schoolId;
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args setSchoolId(java.lang.String schoolId) {
      this.schoolId = schoolId;
      return this;
    }

    public void unsetSchoolId() {
      this.schoolId = null;
    }

    /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolId() {
      return this.schoolId != null;
    }

    public void setSchoolIdIsSet(boolean value) {
      if (!value) {
        this.schoolId = null;
      }
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }

    public java.util.Iterator<java.lang.String> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(java.lang.String elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.String>();
      }
      this.userIdList.add(elem);
    }

    public java.util.List<java.lang.String> getUserIdList() {
      return this.userIdList;
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args setUserIdList(java.util.List<java.lang.String> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public java.lang.String getJsonParams() {
      return this.jsonParams;
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args setJsonParams(java.lang.String jsonParams) {
      this.jsonParams = jsonParams;
      return this;
    }

    public void unsetJsonParams() {
      this.jsonParams = null;
    }

    /** Returns true if field jsonParams is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonParams() {
      return this.jsonParams != null;
    }

    public void setJsonParamsIsSet(boolean value) {
      if (!value) {
        this.jsonParams = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SCHOOL_ID:
        if (value == null) {
          unsetSchoolId();
        } else {
          setSchoolId((java.lang.String)value);
        }
        break;

      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.String>)value);
        }
        break;

      case JSON_PARAMS:
        if (value == null) {
          unsetJsonParams();
        } else {
          setJsonParams((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOL_ID:
        return getSchoolId();

      case USER_ID_LIST:
        return getUserIdList();

      case JSON_PARAMS:
        return getJsonParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHOOL_ID:
        return isSetSchoolId();
      case USER_ID_LIST:
        return isSetUserIdList();
      case JSON_PARAMS:
        return isSetJsonParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args)
        return this.equals((findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args)that);
      return false;
    }

    public boolean equals(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schoolId = true && this.isSetSchoolId();
      boolean that_present_schoolId = true && that.isSetSchoolId();
      if (this_present_schoolId || that_present_schoolId) {
        if (!(this_present_schoolId && that_present_schoolId))
          return false;
        if (!this.schoolId.equals(that.schoolId))
          return false;
      }

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      boolean this_present_jsonParams = true && this.isSetJsonParams();
      boolean that_present_jsonParams = true && that.isSetJsonParams();
      if (this_present_jsonParams || that_present_jsonParams) {
        if (!(this_present_jsonParams && that_present_jsonParams))
          return false;
        if (!this.jsonParams.equals(that.jsonParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
      if (isSetSchoolId())
        hashCode = hashCode * 8191 + schoolId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonParams()) ? 131071 : 524287);
      if (isSetJsonParams())
        hashCode = hashCode * 8191 + jsonParams.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonParams()).compareTo(other.isSetJsonParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonParams, other.jsonParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args(");
      boolean first = true;

      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonParams:");
      if (this.jsonParams == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsStandardScheme getScheme() {
        return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsStandardScheme();
      }
    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schoolId = iprot.readString();
                struct.setSchoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.String>(_list280.size);
                  java.lang.String _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    _elem281 = iprot.readString();
                    struct.userIdList.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JSON_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonParams = iprot.readString();
                struct.setJsonParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolId != null) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.userIdList.size()));
            for (java.lang.String _iter283 : struct.userIdList)
            {
              oprot.writeString(_iter283);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jsonParams != null) {
          oprot.writeFieldBegin(JSON_PARAMS_FIELD_DESC);
          oprot.writeString(struct.jsonParams);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsTupleScheme getScheme() {
        return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsTupleScheme();
      }
    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchoolId()) {
          optionals.set(0);
        }
        if (struct.isSetUserIdList()) {
          optionals.set(1);
        }
        if (struct.isSetJsonParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchoolId()) {
          oprot.writeString(struct.schoolId);
        }
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (java.lang.String _iter284 : struct.userIdList)
            {
              oprot.writeString(_iter284);
            }
          }
        }
        if (struct.isSetJsonParams()) {
          oprot.writeString(struct.jsonParams);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schoolId = iprot.readString();
          struct.setSchoolIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.String>(_list285.size);
            java.lang.String _elem286;
            for (int _i287 = 0; _i287 < _list285.size; ++_i287)
            {
              _elem286 = iprot.readString();
              struct.userIdList.add(_elem286);
            }
          }
          struct.setUserIdListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jsonParams = iprot.readString();
          struct.setJsonParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result implements org.apache.thrift.TBase<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public ThriftBusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBusinessException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result.class, metaDataMap);
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result() {
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result(
      java.lang.String success,
      ThriftBusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftBusinessException(other.ex);
      }
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result deepCopy() {
      return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftBusinessException getEx() {
      return this.ex;
    }

    public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result setEx(ThriftBusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftBusinessException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result)
        return this.equals((findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result)that);
      return false;
    }

    public boolean equals(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultStandardScheme getScheme() {
        return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultStandardScheme();
      }
    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftBusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultTupleScheme getScheme() {
        return new findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultTupleScheme();
      }
    }

    private static class findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserJobTypeBySchoolIdAndUserIdListAndJsonParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftBusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
