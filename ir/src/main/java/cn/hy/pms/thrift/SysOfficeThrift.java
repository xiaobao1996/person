/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.hy.pms.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 部门信息
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-03-04")
public class SysOfficeThrift implements org.apache.thrift.TBase<SysOfficeThrift, SysOfficeThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SysOfficeThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysOfficeThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("parentIds", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TREE_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("treeSort", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TREE_SORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("treeSorts", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TREE_LEAF_FIELD_DESC = new org.apache.thrift.protocol.TField("treeLeaf", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField TREE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("treeLevel", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TREE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("treeNames", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OFFICE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("officeCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OFFICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("officeName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OFFICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("officeType", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField IS_CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChain", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("createBy", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField UPDATE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("updateBy", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)19);
  private static final org.apache.thrift.protocol.TField PARENT_OFFICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parentOfficeName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("children", org.apache.thrift.protocol.TType.LIST, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SysOfficeThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SysOfficeThriftTupleSchemeFactory();

  /**
   * 主键
   */
  public java.lang.String id; // optional
  /**
   * 父级id
   */
  public java.lang.String parentId; // optional
  /**
   * 所有父级id","分割
   */
  public java.lang.String parentIds; // optional
  /**
   * 本级排序号（升序）
   */
  public int treeSort; // optional
  /**
   * 所有级别排序号
   */
  public java.lang.String treeSorts; // optional
  /**
   * 是否最末级
   */
  public byte treeLeaf; // optional
  /**
   * 层次级别
   */
  public int treeLevel; // optional
  /**
   * 全节点名
   */
  public java.lang.String treeNames; // optional
  /**
   * 机构代码
   */
  public java.lang.String officeCode; // optional
  /**
   * 机构名称
   */
  public java.lang.String officeName; // optional
  /**
   * 机构类型 0:学校 1:部门
   */
  public byte officeType; // optional
  /**
   * 是否是连锁学校 0:否，1:是
   */
  public byte isChain; // optional
  /**
   * 机构学校id
   */
  public java.lang.String schoolId; // optional
  /**
   * 创建时间
   */
  public java.lang.String createAt; // optional
  /**
   * 创建者
   */
  public java.lang.String createBy; // optional
  /**
   * 更新时间
   */
  public java.lang.String updateAt; // optional
  /**
   * 更新者
   */
  public java.lang.String updateBy; // optional
  /**
   * 备注信息
   */
  public java.lang.String remark; // optional
  /**
   * 状态（0删除 1正常 2停用）
   */
  public byte status; // optional
  /**
   * 父级机构名称
   */
  public java.lang.String parentOfficeName; // optional
  /**
   * 下级机构
   * 
   */
  public java.util.List<SysOfficeThrift> children; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键
     */
    ID((short)1, "id"),
    /**
     * 父级id
     */
    PARENT_ID((short)2, "parentId"),
    /**
     * 所有父级id","分割
     */
    PARENT_IDS((short)3, "parentIds"),
    /**
     * 本级排序号（升序）
     */
    TREE_SORT((short)4, "treeSort"),
    /**
     * 所有级别排序号
     */
    TREE_SORTS((short)5, "treeSorts"),
    /**
     * 是否最末级
     */
    TREE_LEAF((short)6, "treeLeaf"),
    /**
     * 层次级别
     */
    TREE_LEVEL((short)7, "treeLevel"),
    /**
     * 全节点名
     */
    TREE_NAMES((short)8, "treeNames"),
    /**
     * 机构代码
     */
    OFFICE_CODE((short)9, "officeCode"),
    /**
     * 机构名称
     */
    OFFICE_NAME((short)10, "officeName"),
    /**
     * 机构类型 0:学校 1:部门
     */
    OFFICE_TYPE((short)11, "officeType"),
    /**
     * 是否是连锁学校 0:否，1:是
     */
    IS_CHAIN((short)12, "isChain"),
    /**
     * 机构学校id
     */
    SCHOOL_ID((short)13, "schoolId"),
    /**
     * 创建时间
     */
    CREATE_AT((short)14, "createAt"),
    /**
     * 创建者
     */
    CREATE_BY((short)15, "createBy"),
    /**
     * 更新时间
     */
    UPDATE_AT((short)16, "updateAt"),
    /**
     * 更新者
     */
    UPDATE_BY((short)17, "updateBy"),
    /**
     * 备注信息
     */
    REMARK((short)18, "remark"),
    /**
     * 状态（0删除 1正常 2停用）
     */
    STATUS((short)19, "status"),
    /**
     * 父级机构名称
     */
    PARENT_OFFICE_NAME((short)20, "parentOfficeName"),
    /**
     * 下级机构
     * 
     */
    CHILDREN((short)21, "children");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARENT_ID
          return PARENT_ID;
        case 3: // PARENT_IDS
          return PARENT_IDS;
        case 4: // TREE_SORT
          return TREE_SORT;
        case 5: // TREE_SORTS
          return TREE_SORTS;
        case 6: // TREE_LEAF
          return TREE_LEAF;
        case 7: // TREE_LEVEL
          return TREE_LEVEL;
        case 8: // TREE_NAMES
          return TREE_NAMES;
        case 9: // OFFICE_CODE
          return OFFICE_CODE;
        case 10: // OFFICE_NAME
          return OFFICE_NAME;
        case 11: // OFFICE_TYPE
          return OFFICE_TYPE;
        case 12: // IS_CHAIN
          return IS_CHAIN;
        case 13: // SCHOOL_ID
          return SCHOOL_ID;
        case 14: // CREATE_AT
          return CREATE_AT;
        case 15: // CREATE_BY
          return CREATE_BY;
        case 16: // UPDATE_AT
          return UPDATE_AT;
        case 17: // UPDATE_BY
          return UPDATE_BY;
        case 18: // REMARK
          return REMARK;
        case 19: // STATUS
          return STATUS;
        case 20: // PARENT_OFFICE_NAME
          return PARENT_OFFICE_NAME;
        case 21: // CHILDREN
          return CHILDREN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TREESORT_ISSET_ID = 0;
  private static final int __TREELEAF_ISSET_ID = 1;
  private static final int __TREELEVEL_ISSET_ID = 2;
  private static final int __OFFICETYPE_ISSET_ID = 3;
  private static final int __ISCHAIN_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PARENT_ID,_Fields.PARENT_IDS,_Fields.TREE_SORT,_Fields.TREE_SORTS,_Fields.TREE_LEAF,_Fields.TREE_LEVEL,_Fields.TREE_NAMES,_Fields.OFFICE_CODE,_Fields.OFFICE_NAME,_Fields.OFFICE_TYPE,_Fields.IS_CHAIN,_Fields.SCHOOL_ID,_Fields.CREATE_AT,_Fields.CREATE_BY,_Fields.UPDATE_AT,_Fields.UPDATE_BY,_Fields.REMARK,_Fields.STATUS,_Fields.PARENT_OFFICE_NAME,_Fields.CHILDREN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("parentIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_SORT, new org.apache.thrift.meta_data.FieldMetaData("treeSort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TREE_SORTS, new org.apache.thrift.meta_data.FieldMetaData("treeSorts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_LEAF, new org.apache.thrift.meta_data.FieldMetaData("treeLeaf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TREE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("treeLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TREE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("treeNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICE_CODE, new org.apache.thrift.meta_data.FieldMetaData("officeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("officeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("officeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_CHAIN, new org.apache.thrift.meta_data.FieldMetaData("isChain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_BY, new org.apache.thrift.meta_data.FieldMetaData("createBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_BY, new org.apache.thrift.meta_data.FieldMetaData("updateBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PARENT_OFFICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("parentOfficeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("children", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SysOfficeThrift"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysOfficeThrift.class, metaDataMap);
  }

  public SysOfficeThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysOfficeThrift(SysOfficeThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetParentId()) {
      this.parentId = other.parentId;
    }
    if (other.isSetParentIds()) {
      this.parentIds = other.parentIds;
    }
    this.treeSort = other.treeSort;
    if (other.isSetTreeSorts()) {
      this.treeSorts = other.treeSorts;
    }
    this.treeLeaf = other.treeLeaf;
    this.treeLevel = other.treeLevel;
    if (other.isSetTreeNames()) {
      this.treeNames = other.treeNames;
    }
    if (other.isSetOfficeCode()) {
      this.officeCode = other.officeCode;
    }
    if (other.isSetOfficeName()) {
      this.officeName = other.officeName;
    }
    this.officeType = other.officeType;
    this.isChain = other.isChain;
    if (other.isSetSchoolId()) {
      this.schoolId = other.schoolId;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetCreateBy()) {
      this.createBy = other.createBy;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
    if (other.isSetUpdateBy()) {
      this.updateBy = other.updateBy;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetParentOfficeName()) {
      this.parentOfficeName = other.parentOfficeName;
    }
    if (other.isSetChildren()) {
      java.util.List<SysOfficeThrift> __this__children = new java.util.ArrayList<SysOfficeThrift>(other.children.size());
      for (SysOfficeThrift other_element : other.children) {
        __this__children.add(new SysOfficeThrift(other_element));
      }
      this.children = __this__children;
    }
  }

  public SysOfficeThrift deepCopy() {
    return new SysOfficeThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.parentId = null;
    this.parentIds = null;
    setTreeSortIsSet(false);
    this.treeSort = 0;
    this.treeSorts = null;
    setTreeLeafIsSet(false);
    this.treeLeaf = 0;
    setTreeLevelIsSet(false);
    this.treeLevel = 0;
    this.treeNames = null;
    this.officeCode = null;
    this.officeName = null;
    setOfficeTypeIsSet(false);
    this.officeType = 0;
    setIsChainIsSet(false);
    this.isChain = 0;
    this.schoolId = null;
    this.createAt = null;
    this.createBy = null;
    this.updateAt = null;
    this.updateBy = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.parentOfficeName = null;
    this.children = null;
  }

  /**
   * 主键
   */
  public java.lang.String getId() {
    return this.id;
  }

  /**
   * 主键
   */
  public SysOfficeThrift setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 父级id
   */
  public java.lang.String getParentId() {
    return this.parentId;
  }

  /**
   * 父级id
   */
  public SysOfficeThrift setParentId(java.lang.String parentId) {
    this.parentId = parentId;
    return this;
  }

  public void unsetParentId() {
    this.parentId = null;
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return this.parentId != null;
  }

  public void setParentIdIsSet(boolean value) {
    if (!value) {
      this.parentId = null;
    }
  }

  /**
   * 所有父级id","分割
   */
  public java.lang.String getParentIds() {
    return this.parentIds;
  }

  /**
   * 所有父级id","分割
   */
  public SysOfficeThrift setParentIds(java.lang.String parentIds) {
    this.parentIds = parentIds;
    return this;
  }

  public void unsetParentIds() {
    this.parentIds = null;
  }

  /** Returns true if field parentIds is set (has been assigned a value) and false otherwise */
  public boolean isSetParentIds() {
    return this.parentIds != null;
  }

  public void setParentIdsIsSet(boolean value) {
    if (!value) {
      this.parentIds = null;
    }
  }

  /**
   * 本级排序号（升序）
   */
  public int getTreeSort() {
    return this.treeSort;
  }

  /**
   * 本级排序号（升序）
   */
  public SysOfficeThrift setTreeSort(int treeSort) {
    this.treeSort = treeSort;
    setTreeSortIsSet(true);
    return this;
  }

  public void unsetTreeSort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TREESORT_ISSET_ID);
  }

  /** Returns true if field treeSort is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeSort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TREESORT_ISSET_ID);
  }

  public void setTreeSortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TREESORT_ISSET_ID, value);
  }

  /**
   * 所有级别排序号
   */
  public java.lang.String getTreeSorts() {
    return this.treeSorts;
  }

  /**
   * 所有级别排序号
   */
  public SysOfficeThrift setTreeSorts(java.lang.String treeSorts) {
    this.treeSorts = treeSorts;
    return this;
  }

  public void unsetTreeSorts() {
    this.treeSorts = null;
  }

  /** Returns true if field treeSorts is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeSorts() {
    return this.treeSorts != null;
  }

  public void setTreeSortsIsSet(boolean value) {
    if (!value) {
      this.treeSorts = null;
    }
  }

  /**
   * 是否最末级
   */
  public byte getTreeLeaf() {
    return this.treeLeaf;
  }

  /**
   * 是否最末级
   */
  public SysOfficeThrift setTreeLeaf(byte treeLeaf) {
    this.treeLeaf = treeLeaf;
    setTreeLeafIsSet(true);
    return this;
  }

  public void unsetTreeLeaf() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TREELEAF_ISSET_ID);
  }

  /** Returns true if field treeLeaf is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeLeaf() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TREELEAF_ISSET_ID);
  }

  public void setTreeLeafIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TREELEAF_ISSET_ID, value);
  }

  /**
   * 层次级别
   */
  public int getTreeLevel() {
    return this.treeLevel;
  }

  /**
   * 层次级别
   */
  public SysOfficeThrift setTreeLevel(int treeLevel) {
    this.treeLevel = treeLevel;
    setTreeLevelIsSet(true);
    return this;
  }

  public void unsetTreeLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TREELEVEL_ISSET_ID);
  }

  /** Returns true if field treeLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TREELEVEL_ISSET_ID);
  }

  public void setTreeLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TREELEVEL_ISSET_ID, value);
  }

  /**
   * 全节点名
   */
  public java.lang.String getTreeNames() {
    return this.treeNames;
  }

  /**
   * 全节点名
   */
  public SysOfficeThrift setTreeNames(java.lang.String treeNames) {
    this.treeNames = treeNames;
    return this;
  }

  public void unsetTreeNames() {
    this.treeNames = null;
  }

  /** Returns true if field treeNames is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeNames() {
    return this.treeNames != null;
  }

  public void setTreeNamesIsSet(boolean value) {
    if (!value) {
      this.treeNames = null;
    }
  }

  /**
   * 机构代码
   */
  public java.lang.String getOfficeCode() {
    return this.officeCode;
  }

  /**
   * 机构代码
   */
  public SysOfficeThrift setOfficeCode(java.lang.String officeCode) {
    this.officeCode = officeCode;
    return this;
  }

  public void unsetOfficeCode() {
    this.officeCode = null;
  }

  /** Returns true if field officeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficeCode() {
    return this.officeCode != null;
  }

  public void setOfficeCodeIsSet(boolean value) {
    if (!value) {
      this.officeCode = null;
    }
  }

  /**
   * 机构名称
   */
  public java.lang.String getOfficeName() {
    return this.officeName;
  }

  /**
   * 机构名称
   */
  public SysOfficeThrift setOfficeName(java.lang.String officeName) {
    this.officeName = officeName;
    return this;
  }

  public void unsetOfficeName() {
    this.officeName = null;
  }

  /** Returns true if field officeName is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficeName() {
    return this.officeName != null;
  }

  public void setOfficeNameIsSet(boolean value) {
    if (!value) {
      this.officeName = null;
    }
  }

  /**
   * 机构类型 0:学校 1:部门
   */
  public byte getOfficeType() {
    return this.officeType;
  }

  /**
   * 机构类型 0:学校 1:部门
   */
  public SysOfficeThrift setOfficeType(byte officeType) {
    this.officeType = officeType;
    setOfficeTypeIsSet(true);
    return this;
  }

  public void unsetOfficeType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFICETYPE_ISSET_ID);
  }

  /** Returns true if field officeType is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficeType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFICETYPE_ISSET_ID);
  }

  public void setOfficeTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFICETYPE_ISSET_ID, value);
  }

  /**
   * 是否是连锁学校 0:否，1:是
   */
  public byte getIsChain() {
    return this.isChain;
  }

  /**
   * 是否是连锁学校 0:否，1:是
   */
  public SysOfficeThrift setIsChain(byte isChain) {
    this.isChain = isChain;
    setIsChainIsSet(true);
    return this;
  }

  public void unsetIsChain() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCHAIN_ISSET_ID);
  }

  /** Returns true if field isChain is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChain() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCHAIN_ISSET_ID);
  }

  public void setIsChainIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCHAIN_ISSET_ID, value);
  }

  /**
   * 机构学校id
   */
  public java.lang.String getSchoolId() {
    return this.schoolId;
  }

  /**
   * 机构学校id
   */
  public SysOfficeThrift setSchoolId(java.lang.String schoolId) {
    this.schoolId = schoolId;
    return this;
  }

  public void unsetSchoolId() {
    this.schoolId = null;
  }

  /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
  public boolean isSetSchoolId() {
    return this.schoolId != null;
  }

  public void setSchoolIdIsSet(boolean value) {
    if (!value) {
      this.schoolId = null;
    }
  }

  /**
   * 创建时间
   */
  public java.lang.String getCreateAt() {
    return this.createAt;
  }

  /**
   * 创建时间
   */
  public SysOfficeThrift setCreateAt(java.lang.String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  /**
   * 创建者
   */
  public java.lang.String getCreateBy() {
    return this.createBy;
  }

  /**
   * 创建者
   */
  public SysOfficeThrift setCreateBy(java.lang.String createBy) {
    this.createBy = createBy;
    return this;
  }

  public void unsetCreateBy() {
    this.createBy = null;
  }

  /** Returns true if field createBy is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateBy() {
    return this.createBy != null;
  }

  public void setCreateByIsSet(boolean value) {
    if (!value) {
      this.createBy = null;
    }
  }

  /**
   * 更新时间
   */
  public java.lang.String getUpdateAt() {
    return this.updateAt;
  }

  /**
   * 更新时间
   */
  public SysOfficeThrift setUpdateAt(java.lang.String updateAt) {
    this.updateAt = updateAt;
    return this;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  /**
   * 更新者
   */
  public java.lang.String getUpdateBy() {
    return this.updateBy;
  }

  /**
   * 更新者
   */
  public SysOfficeThrift setUpdateBy(java.lang.String updateBy) {
    this.updateBy = updateBy;
    return this;
  }

  public void unsetUpdateBy() {
    this.updateBy = null;
  }

  /** Returns true if field updateBy is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateBy() {
    return this.updateBy != null;
  }

  public void setUpdateByIsSet(boolean value) {
    if (!value) {
      this.updateBy = null;
    }
  }

  /**
   * 备注信息
   */
  public java.lang.String getRemark() {
    return this.remark;
  }

  /**
   * 备注信息
   */
  public SysOfficeThrift setRemark(java.lang.String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 状态（0删除 1正常 2停用）
   */
  public byte getStatus() {
    return this.status;
  }

  /**
   * 状态（0删除 1正常 2停用）
   */
  public SysOfficeThrift setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 父级机构名称
   */
  public java.lang.String getParentOfficeName() {
    return this.parentOfficeName;
  }

  /**
   * 父级机构名称
   */
  public SysOfficeThrift setParentOfficeName(java.lang.String parentOfficeName) {
    this.parentOfficeName = parentOfficeName;
    return this;
  }

  public void unsetParentOfficeName() {
    this.parentOfficeName = null;
  }

  /** Returns true if field parentOfficeName is set (has been assigned a value) and false otherwise */
  public boolean isSetParentOfficeName() {
    return this.parentOfficeName != null;
  }

  public void setParentOfficeNameIsSet(boolean value) {
    if (!value) {
      this.parentOfficeName = null;
    }
  }

  public int getChildrenSize() {
    return (this.children == null) ? 0 : this.children.size();
  }

  public java.util.Iterator<SysOfficeThrift> getChildrenIterator() {
    return (this.children == null) ? null : this.children.iterator();
  }

  public void addToChildren(SysOfficeThrift elem) {
    if (this.children == null) {
      this.children = new java.util.ArrayList<SysOfficeThrift>();
    }
    this.children.add(elem);
  }

  /**
   * 下级机构
   * 
   */
  public java.util.List<SysOfficeThrift> getChildren() {
    return this.children;
  }

  /**
   * 下级机构
   * 
   */
  public SysOfficeThrift setChildren(java.util.List<SysOfficeThrift> children) {
    this.children = children;
    return this;
  }

  public void unsetChildren() {
    this.children = null;
  }

  /** Returns true if field children is set (has been assigned a value) and false otherwise */
  public boolean isSetChildren() {
    return this.children != null;
  }

  public void setChildrenIsSet(boolean value) {
    if (!value) {
      this.children = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((java.lang.String)value);
      }
      break;

    case PARENT_IDS:
      if (value == null) {
        unsetParentIds();
      } else {
        setParentIds((java.lang.String)value);
      }
      break;

    case TREE_SORT:
      if (value == null) {
        unsetTreeSort();
      } else {
        setTreeSort((java.lang.Integer)value);
      }
      break;

    case TREE_SORTS:
      if (value == null) {
        unsetTreeSorts();
      } else {
        setTreeSorts((java.lang.String)value);
      }
      break;

    case TREE_LEAF:
      if (value == null) {
        unsetTreeLeaf();
      } else {
        setTreeLeaf((java.lang.Byte)value);
      }
      break;

    case TREE_LEVEL:
      if (value == null) {
        unsetTreeLevel();
      } else {
        setTreeLevel((java.lang.Integer)value);
      }
      break;

    case TREE_NAMES:
      if (value == null) {
        unsetTreeNames();
      } else {
        setTreeNames((java.lang.String)value);
      }
      break;

    case OFFICE_CODE:
      if (value == null) {
        unsetOfficeCode();
      } else {
        setOfficeCode((java.lang.String)value);
      }
      break;

    case OFFICE_NAME:
      if (value == null) {
        unsetOfficeName();
      } else {
        setOfficeName((java.lang.String)value);
      }
      break;

    case OFFICE_TYPE:
      if (value == null) {
        unsetOfficeType();
      } else {
        setOfficeType((java.lang.Byte)value);
      }
      break;

    case IS_CHAIN:
      if (value == null) {
        unsetIsChain();
      } else {
        setIsChain((java.lang.Byte)value);
      }
      break;

    case SCHOOL_ID:
      if (value == null) {
        unsetSchoolId();
      } else {
        setSchoolId((java.lang.String)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((java.lang.String)value);
      }
      break;

    case CREATE_BY:
      if (value == null) {
        unsetCreateBy();
      } else {
        setCreateBy((java.lang.String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((java.lang.String)value);
      }
      break;

    case UPDATE_BY:
      if (value == null) {
        unsetUpdateBy();
      } else {
        setUpdateBy((java.lang.String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Byte)value);
      }
      break;

    case PARENT_OFFICE_NAME:
      if (value == null) {
        unsetParentOfficeName();
      } else {
        setParentOfficeName((java.lang.String)value);
      }
      break;

    case CHILDREN:
      if (value == null) {
        unsetChildren();
      } else {
        setChildren((java.util.List<SysOfficeThrift>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PARENT_ID:
      return getParentId();

    case PARENT_IDS:
      return getParentIds();

    case TREE_SORT:
      return getTreeSort();

    case TREE_SORTS:
      return getTreeSorts();

    case TREE_LEAF:
      return getTreeLeaf();

    case TREE_LEVEL:
      return getTreeLevel();

    case TREE_NAMES:
      return getTreeNames();

    case OFFICE_CODE:
      return getOfficeCode();

    case OFFICE_NAME:
      return getOfficeName();

    case OFFICE_TYPE:
      return getOfficeType();

    case IS_CHAIN:
      return getIsChain();

    case SCHOOL_ID:
      return getSchoolId();

    case CREATE_AT:
      return getCreateAt();

    case CREATE_BY:
      return getCreateBy();

    case UPDATE_AT:
      return getUpdateAt();

    case UPDATE_BY:
      return getUpdateBy();

    case REMARK:
      return getRemark();

    case STATUS:
      return getStatus();

    case PARENT_OFFICE_NAME:
      return getParentOfficeName();

    case CHILDREN:
      return getChildren();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARENT_ID:
      return isSetParentId();
    case PARENT_IDS:
      return isSetParentIds();
    case TREE_SORT:
      return isSetTreeSort();
    case TREE_SORTS:
      return isSetTreeSorts();
    case TREE_LEAF:
      return isSetTreeLeaf();
    case TREE_LEVEL:
      return isSetTreeLevel();
    case TREE_NAMES:
      return isSetTreeNames();
    case OFFICE_CODE:
      return isSetOfficeCode();
    case OFFICE_NAME:
      return isSetOfficeName();
    case OFFICE_TYPE:
      return isSetOfficeType();
    case IS_CHAIN:
      return isSetIsChain();
    case SCHOOL_ID:
      return isSetSchoolId();
    case CREATE_AT:
      return isSetCreateAt();
    case CREATE_BY:
      return isSetCreateBy();
    case UPDATE_AT:
      return isSetUpdateAt();
    case UPDATE_BY:
      return isSetUpdateBy();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case PARENT_OFFICE_NAME:
      return isSetParentOfficeName();
    case CHILDREN:
      return isSetChildren();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SysOfficeThrift)
      return this.equals((SysOfficeThrift)that);
    return false;
  }

  public boolean equals(SysOfficeThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (!this.parentId.equals(that.parentId))
        return false;
    }

    boolean this_present_parentIds = true && this.isSetParentIds();
    boolean that_present_parentIds = true && that.isSetParentIds();
    if (this_present_parentIds || that_present_parentIds) {
      if (!(this_present_parentIds && that_present_parentIds))
        return false;
      if (!this.parentIds.equals(that.parentIds))
        return false;
    }

    boolean this_present_treeSort = true && this.isSetTreeSort();
    boolean that_present_treeSort = true && that.isSetTreeSort();
    if (this_present_treeSort || that_present_treeSort) {
      if (!(this_present_treeSort && that_present_treeSort))
        return false;
      if (this.treeSort != that.treeSort)
        return false;
    }

    boolean this_present_treeSorts = true && this.isSetTreeSorts();
    boolean that_present_treeSorts = true && that.isSetTreeSorts();
    if (this_present_treeSorts || that_present_treeSorts) {
      if (!(this_present_treeSorts && that_present_treeSorts))
        return false;
      if (!this.treeSorts.equals(that.treeSorts))
        return false;
    }

    boolean this_present_treeLeaf = true && this.isSetTreeLeaf();
    boolean that_present_treeLeaf = true && that.isSetTreeLeaf();
    if (this_present_treeLeaf || that_present_treeLeaf) {
      if (!(this_present_treeLeaf && that_present_treeLeaf))
        return false;
      if (this.treeLeaf != that.treeLeaf)
        return false;
    }

    boolean this_present_treeLevel = true && this.isSetTreeLevel();
    boolean that_present_treeLevel = true && that.isSetTreeLevel();
    if (this_present_treeLevel || that_present_treeLevel) {
      if (!(this_present_treeLevel && that_present_treeLevel))
        return false;
      if (this.treeLevel != that.treeLevel)
        return false;
    }

    boolean this_present_treeNames = true && this.isSetTreeNames();
    boolean that_present_treeNames = true && that.isSetTreeNames();
    if (this_present_treeNames || that_present_treeNames) {
      if (!(this_present_treeNames && that_present_treeNames))
        return false;
      if (!this.treeNames.equals(that.treeNames))
        return false;
    }

    boolean this_present_officeCode = true && this.isSetOfficeCode();
    boolean that_present_officeCode = true && that.isSetOfficeCode();
    if (this_present_officeCode || that_present_officeCode) {
      if (!(this_present_officeCode && that_present_officeCode))
        return false;
      if (!this.officeCode.equals(that.officeCode))
        return false;
    }

    boolean this_present_officeName = true && this.isSetOfficeName();
    boolean that_present_officeName = true && that.isSetOfficeName();
    if (this_present_officeName || that_present_officeName) {
      if (!(this_present_officeName && that_present_officeName))
        return false;
      if (!this.officeName.equals(that.officeName))
        return false;
    }

    boolean this_present_officeType = true && this.isSetOfficeType();
    boolean that_present_officeType = true && that.isSetOfficeType();
    if (this_present_officeType || that_present_officeType) {
      if (!(this_present_officeType && that_present_officeType))
        return false;
      if (this.officeType != that.officeType)
        return false;
    }

    boolean this_present_isChain = true && this.isSetIsChain();
    boolean that_present_isChain = true && that.isSetIsChain();
    if (this_present_isChain || that_present_isChain) {
      if (!(this_present_isChain && that_present_isChain))
        return false;
      if (this.isChain != that.isChain)
        return false;
    }

    boolean this_present_schoolId = true && this.isSetSchoolId();
    boolean that_present_schoolId = true && that.isSetSchoolId();
    if (this_present_schoolId || that_present_schoolId) {
      if (!(this_present_schoolId && that_present_schoolId))
        return false;
      if (!this.schoolId.equals(that.schoolId))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_createBy = true && this.isSetCreateBy();
    boolean that_present_createBy = true && that.isSetCreateBy();
    if (this_present_createBy || that_present_createBy) {
      if (!(this_present_createBy && that_present_createBy))
        return false;
      if (!this.createBy.equals(that.createBy))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    boolean this_present_updateBy = true && this.isSetUpdateBy();
    boolean that_present_updateBy = true && that.isSetUpdateBy();
    if (this_present_updateBy || that_present_updateBy) {
      if (!(this_present_updateBy && that_present_updateBy))
        return false;
      if (!this.updateBy.equals(that.updateBy))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_parentOfficeName = true && this.isSetParentOfficeName();
    boolean that_present_parentOfficeName = true && that.isSetParentOfficeName();
    if (this_present_parentOfficeName || that_present_parentOfficeName) {
      if (!(this_present_parentOfficeName && that_present_parentOfficeName))
        return false;
      if (!this.parentOfficeName.equals(that.parentOfficeName))
        return false;
    }

    boolean this_present_children = true && this.isSetChildren();
    boolean that_present_children = true && that.isSetChildren();
    if (this_present_children || that_present_children) {
      if (!(this_present_children && that_present_children))
        return false;
      if (!this.children.equals(that.children))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentId()) ? 131071 : 524287);
    if (isSetParentId())
      hashCode = hashCode * 8191 + parentId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentIds()) ? 131071 : 524287);
    if (isSetParentIds())
      hashCode = hashCode * 8191 + parentIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetTreeSort()) ? 131071 : 524287);
    if (isSetTreeSort())
      hashCode = hashCode * 8191 + treeSort;

    hashCode = hashCode * 8191 + ((isSetTreeSorts()) ? 131071 : 524287);
    if (isSetTreeSorts())
      hashCode = hashCode * 8191 + treeSorts.hashCode();

    hashCode = hashCode * 8191 + ((isSetTreeLeaf()) ? 131071 : 524287);
    if (isSetTreeLeaf())
      hashCode = hashCode * 8191 + (int) (treeLeaf);

    hashCode = hashCode * 8191 + ((isSetTreeLevel()) ? 131071 : 524287);
    if (isSetTreeLevel())
      hashCode = hashCode * 8191 + treeLevel;

    hashCode = hashCode * 8191 + ((isSetTreeNames()) ? 131071 : 524287);
    if (isSetTreeNames())
      hashCode = hashCode * 8191 + treeNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetOfficeCode()) ? 131071 : 524287);
    if (isSetOfficeCode())
      hashCode = hashCode * 8191 + officeCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetOfficeName()) ? 131071 : 524287);
    if (isSetOfficeName())
      hashCode = hashCode * 8191 + officeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOfficeType()) ? 131071 : 524287);
    if (isSetOfficeType())
      hashCode = hashCode * 8191 + (int) (officeType);

    hashCode = hashCode * 8191 + ((isSetIsChain()) ? 131071 : 524287);
    if (isSetIsChain())
      hashCode = hashCode * 8191 + (int) (isChain);

    hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
    if (isSetSchoolId())
      hashCode = hashCode * 8191 + schoolId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateAt()) ? 131071 : 524287);
    if (isSetCreateAt())
      hashCode = hashCode * 8191 + createAt.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateBy()) ? 131071 : 524287);
    if (isSetCreateBy())
      hashCode = hashCode * 8191 + createBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateAt()) ? 131071 : 524287);
    if (isSetUpdateAt())
      hashCode = hashCode * 8191 + updateAt.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateBy()) ? 131071 : 524287);
    if (isSetUpdateBy())
      hashCode = hashCode * 8191 + updateBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetParentOfficeName()) ? 131071 : 524287);
    if (isSetParentOfficeName())
      hashCode = hashCode * 8191 + parentOfficeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetChildren()) ? 131071 : 524287);
    if (isSetChildren())
      hashCode = hashCode * 8191 + children.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SysOfficeThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentIds()).compareTo(other.isSetParentIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentIds, other.parentIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeSort()).compareTo(other.isSetTreeSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeSort, other.treeSort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeSorts()).compareTo(other.isSetTreeSorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeSorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeSorts, other.treeSorts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeLeaf()).compareTo(other.isSetTreeLeaf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeLeaf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeLeaf, other.treeLeaf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeLevel()).compareTo(other.isSetTreeLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeLevel, other.treeLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeNames()).compareTo(other.isSetTreeNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeNames, other.treeNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOfficeCode()).compareTo(other.isSetOfficeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeCode, other.officeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOfficeName()).compareTo(other.isSetOfficeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeName, other.officeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOfficeType()).compareTo(other.isSetOfficeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officeType, other.officeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsChain()).compareTo(other.isSetIsChain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChain, other.isChain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchoolId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateBy()).compareTo(other.isSetCreateBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createBy, other.createBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateBy()).compareTo(other.isSetUpdateBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateBy, other.updateBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentOfficeName()).compareTo(other.isSetParentOfficeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentOfficeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentOfficeName, other.parentOfficeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChildren()).compareTo(other.isSetChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildren()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.children, other.children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SysOfficeThrift(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetParentId()) {
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
    }
    if (isSetParentIds()) {
      if (!first) sb.append(", ");
      sb.append("parentIds:");
      if (this.parentIds == null) {
        sb.append("null");
      } else {
        sb.append(this.parentIds);
      }
      first = false;
    }
    if (isSetTreeSort()) {
      if (!first) sb.append(", ");
      sb.append("treeSort:");
      sb.append(this.treeSort);
      first = false;
    }
    if (isSetTreeSorts()) {
      if (!first) sb.append(", ");
      sb.append("treeSorts:");
      if (this.treeSorts == null) {
        sb.append("null");
      } else {
        sb.append(this.treeSorts);
      }
      first = false;
    }
    if (isSetTreeLeaf()) {
      if (!first) sb.append(", ");
      sb.append("treeLeaf:");
      sb.append(this.treeLeaf);
      first = false;
    }
    if (isSetTreeLevel()) {
      if (!first) sb.append(", ");
      sb.append("treeLevel:");
      sb.append(this.treeLevel);
      first = false;
    }
    if (isSetTreeNames()) {
      if (!first) sb.append(", ");
      sb.append("treeNames:");
      if (this.treeNames == null) {
        sb.append("null");
      } else {
        sb.append(this.treeNames);
      }
      first = false;
    }
    if (isSetOfficeCode()) {
      if (!first) sb.append(", ");
      sb.append("officeCode:");
      if (this.officeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.officeCode);
      }
      first = false;
    }
    if (isSetOfficeName()) {
      if (!first) sb.append(", ");
      sb.append("officeName:");
      if (this.officeName == null) {
        sb.append("null");
      } else {
        sb.append(this.officeName);
      }
      first = false;
    }
    if (isSetOfficeType()) {
      if (!first) sb.append(", ");
      sb.append("officeType:");
      sb.append(this.officeType);
      first = false;
    }
    if (isSetIsChain()) {
      if (!first) sb.append(", ");
      sb.append("isChain:");
      sb.append(this.isChain);
      first = false;
    }
    if (isSetSchoolId()) {
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
    }
    if (isSetCreateAt()) {
      if (!first) sb.append(", ");
      sb.append("createAt:");
      if (this.createAt == null) {
        sb.append("null");
      } else {
        sb.append(this.createAt);
      }
      first = false;
    }
    if (isSetCreateBy()) {
      if (!first) sb.append(", ");
      sb.append("createBy:");
      if (this.createBy == null) {
        sb.append("null");
      } else {
        sb.append(this.createBy);
      }
      first = false;
    }
    if (isSetUpdateAt()) {
      if (!first) sb.append(", ");
      sb.append("updateAt:");
      if (this.updateAt == null) {
        sb.append("null");
      } else {
        sb.append(this.updateAt);
      }
      first = false;
    }
    if (isSetUpdateBy()) {
      if (!first) sb.append(", ");
      sb.append("updateBy:");
      if (this.updateBy == null) {
        sb.append("null");
      } else {
        sb.append(this.updateBy);
      }
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetParentOfficeName()) {
      if (!first) sb.append(", ");
      sb.append("parentOfficeName:");
      if (this.parentOfficeName == null) {
        sb.append("null");
      } else {
        sb.append(this.parentOfficeName);
      }
      first = false;
    }
    if (isSetChildren()) {
      if (!first) sb.append(", ");
      sb.append("children:");
      if (this.children == null) {
        sb.append("null");
      } else {
        sb.append(this.children);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysOfficeThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysOfficeThriftStandardScheme getScheme() {
      return new SysOfficeThriftStandardScheme();
    }
  }

  private static class SysOfficeThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<SysOfficeThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysOfficeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentId = iprot.readString();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentIds = iprot.readString();
              struct.setParentIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TREE_SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.treeSort = iprot.readI32();
              struct.setTreeSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TREE_SORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treeSorts = iprot.readString();
              struct.setTreeSortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TREE_LEAF
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.treeLeaf = iprot.readByte();
              struct.setTreeLeafIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TREE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.treeLevel = iprot.readI32();
              struct.setTreeLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TREE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treeNames = iprot.readString();
              struct.setTreeNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OFFICE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officeCode = iprot.readString();
              struct.setOfficeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OFFICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officeName = iprot.readString();
              struct.setOfficeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OFFICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.officeType = iprot.readByte();
              struct.setOfficeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_CHAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isChain = iprot.readByte();
              struct.setIsChainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SCHOOL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schoolId = iprot.readString();
              struct.setSchoolIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createBy = iprot.readString();
              struct.setCreateByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPDATE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateBy = iprot.readString();
              struct.setUpdateByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PARENT_OFFICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentOfficeName = iprot.readString();
              struct.setParentOfficeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.children = new java.util.ArrayList<SysOfficeThrift>(_list8.size);
                SysOfficeThrift _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new SysOfficeThrift();
                  _elem9.read(iprot);
                  struct.children.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setChildrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysOfficeThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parentId != null) {
        if (struct.isSetParentId()) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parentIds != null) {
        if (struct.isSetParentIds()) {
          oprot.writeFieldBegin(PARENT_IDS_FIELD_DESC);
          oprot.writeString(struct.parentIds);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTreeSort()) {
        oprot.writeFieldBegin(TREE_SORT_FIELD_DESC);
        oprot.writeI32(struct.treeSort);
        oprot.writeFieldEnd();
      }
      if (struct.treeSorts != null) {
        if (struct.isSetTreeSorts()) {
          oprot.writeFieldBegin(TREE_SORTS_FIELD_DESC);
          oprot.writeString(struct.treeSorts);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTreeLeaf()) {
        oprot.writeFieldBegin(TREE_LEAF_FIELD_DESC);
        oprot.writeByte(struct.treeLeaf);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTreeLevel()) {
        oprot.writeFieldBegin(TREE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.treeLevel);
        oprot.writeFieldEnd();
      }
      if (struct.treeNames != null) {
        if (struct.isSetTreeNames()) {
          oprot.writeFieldBegin(TREE_NAMES_FIELD_DESC);
          oprot.writeString(struct.treeNames);
          oprot.writeFieldEnd();
        }
      }
      if (struct.officeCode != null) {
        if (struct.isSetOfficeCode()) {
          oprot.writeFieldBegin(OFFICE_CODE_FIELD_DESC);
          oprot.writeString(struct.officeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.officeName != null) {
        if (struct.isSetOfficeName()) {
          oprot.writeFieldBegin(OFFICE_NAME_FIELD_DESC);
          oprot.writeString(struct.officeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOfficeType()) {
        oprot.writeFieldBegin(OFFICE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.officeType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsChain()) {
        oprot.writeFieldBegin(IS_CHAIN_FIELD_DESC);
        oprot.writeByte(struct.isChain);
        oprot.writeFieldEnd();
      }
      if (struct.schoolId != null) {
        if (struct.isSetSchoolId()) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createAt != null) {
        if (struct.isSetCreateAt()) {
          oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
          oprot.writeString(struct.createAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createBy != null) {
        if (struct.isSetCreateBy()) {
          oprot.writeFieldBegin(CREATE_BY_FIELD_DESC);
          oprot.writeString(struct.createBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateAt != null) {
        if (struct.isSetUpdateAt()) {
          oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
          oprot.writeString(struct.updateAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateBy != null) {
        if (struct.isSetUpdateBy()) {
          oprot.writeFieldBegin(UPDATE_BY_FIELD_DESC);
          oprot.writeString(struct.updateBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeByte(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.parentOfficeName != null) {
        if (struct.isSetParentOfficeName()) {
          oprot.writeFieldBegin(PARENT_OFFICE_NAME_FIELD_DESC);
          oprot.writeString(struct.parentOfficeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.children != null) {
        if (struct.isSetChildren()) {
          oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.children.size()));
            for (SysOfficeThrift _iter11 : struct.children)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysOfficeThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysOfficeThriftTupleScheme getScheme() {
      return new SysOfficeThriftTupleScheme();
    }
  }

  private static class SysOfficeThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<SysOfficeThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysOfficeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetParentId()) {
        optionals.set(1);
      }
      if (struct.isSetParentIds()) {
        optionals.set(2);
      }
      if (struct.isSetTreeSort()) {
        optionals.set(3);
      }
      if (struct.isSetTreeSorts()) {
        optionals.set(4);
      }
      if (struct.isSetTreeLeaf()) {
        optionals.set(5);
      }
      if (struct.isSetTreeLevel()) {
        optionals.set(6);
      }
      if (struct.isSetTreeNames()) {
        optionals.set(7);
      }
      if (struct.isSetOfficeCode()) {
        optionals.set(8);
      }
      if (struct.isSetOfficeName()) {
        optionals.set(9);
      }
      if (struct.isSetOfficeType()) {
        optionals.set(10);
      }
      if (struct.isSetIsChain()) {
        optionals.set(11);
      }
      if (struct.isSetSchoolId()) {
        optionals.set(12);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(13);
      }
      if (struct.isSetCreateBy()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(15);
      }
      if (struct.isSetUpdateBy()) {
        optionals.set(16);
      }
      if (struct.isSetRemark()) {
        optionals.set(17);
      }
      if (struct.isSetStatus()) {
        optionals.set(18);
      }
      if (struct.isSetParentOfficeName()) {
        optionals.set(19);
      }
      if (struct.isSetChildren()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetParentId()) {
        oprot.writeString(struct.parentId);
      }
      if (struct.isSetParentIds()) {
        oprot.writeString(struct.parentIds);
      }
      if (struct.isSetTreeSort()) {
        oprot.writeI32(struct.treeSort);
      }
      if (struct.isSetTreeSorts()) {
        oprot.writeString(struct.treeSorts);
      }
      if (struct.isSetTreeLeaf()) {
        oprot.writeByte(struct.treeLeaf);
      }
      if (struct.isSetTreeLevel()) {
        oprot.writeI32(struct.treeLevel);
      }
      if (struct.isSetTreeNames()) {
        oprot.writeString(struct.treeNames);
      }
      if (struct.isSetOfficeCode()) {
        oprot.writeString(struct.officeCode);
      }
      if (struct.isSetOfficeName()) {
        oprot.writeString(struct.officeName);
      }
      if (struct.isSetOfficeType()) {
        oprot.writeByte(struct.officeType);
      }
      if (struct.isSetIsChain()) {
        oprot.writeByte(struct.isChain);
      }
      if (struct.isSetSchoolId()) {
        oprot.writeString(struct.schoolId);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetCreateBy()) {
        oprot.writeString(struct.createBy);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
      if (struct.isSetUpdateBy()) {
        oprot.writeString(struct.updateBy);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetParentOfficeName()) {
        oprot.writeString(struct.parentOfficeName);
      }
      if (struct.isSetChildren()) {
        {
          oprot.writeI32(struct.children.size());
          for (SysOfficeThrift _iter12 : struct.children)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysOfficeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parentId = iprot.readString();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentIds = iprot.readString();
        struct.setParentIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.treeSort = iprot.readI32();
        struct.setTreeSortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.treeSorts = iprot.readString();
        struct.setTreeSortsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.treeLeaf = iprot.readByte();
        struct.setTreeLeafIsSet(true);
      }
      if (incoming.get(6)) {
        struct.treeLevel = iprot.readI32();
        struct.setTreeLevelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.treeNames = iprot.readString();
        struct.setTreeNamesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.officeCode = iprot.readString();
        struct.setOfficeCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.officeName = iprot.readString();
        struct.setOfficeNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.officeType = iprot.readByte();
        struct.setOfficeTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isChain = iprot.readByte();
        struct.setIsChainIsSet(true);
      }
      if (incoming.get(12)) {
        struct.schoolId = iprot.readString();
        struct.setSchoolIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createBy = iprot.readString();
        struct.setCreateByIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.updateBy = iprot.readString();
        struct.setUpdateByIsSet(true);
      }
      if (incoming.get(17)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(18)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.parentOfficeName = iprot.readString();
        struct.setParentOfficeNameIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.children = new java.util.ArrayList<SysOfficeThrift>(_list13.size);
          SysOfficeThrift _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new SysOfficeThrift();
            _elem14.read(iprot);
            struct.children.add(_elem14);
          }
        }
        struct.setChildrenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

