/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.hy.pms.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * PageInfo 分页数据
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-03-04")
public class PageInfoThrift implements org.apache.thrift.TBase<PageInfoThrift, PageInfoThrift._Fields>, java.io.Serializable, Cloneable, Comparable<PageInfoThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageInfoThrift");

  private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("pages", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_FIRST_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFirstPage", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IS_LAST_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("isLastPage", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PageInfoThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PageInfoThriftTupleSchemeFactory();

  /**
   * 当前页
   * 
   */
  public int pageNum; // optional
  /**
   * //每页的数量
   * 
   */
  public int pageSize; // optional
  /**
   * 角色名称集合
   * 
   */
  public long total; // optional
  /**
   * 总页数
   * 
   */
  public int pages; // optional
  /**
   * 结果集
   * 
   */
  public java.lang.String result; // optional
  /**
   * 是否为第一页
   * 
   */
  public boolean isFirstPage; // required
  /**
   * 是否为最后一页
   * 
   */
  public boolean isLastPage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 当前页
     * 
     */
    PAGE_NUM((short)1, "pageNum"),
    /**
     * //每页的数量
     * 
     */
    PAGE_SIZE((short)2, "pageSize"),
    /**
     * 角色名称集合
     * 
     */
    TOTAL((short)3, "total"),
    /**
     * 总页数
     * 
     */
    PAGES((short)4, "pages"),
    /**
     * 结果集
     * 
     */
    RESULT((short)5, "result"),
    /**
     * 是否为第一页
     * 
     */
    IS_FIRST_PAGE((short)6, "isFirstPage"),
    /**
     * 是否为最后一页
     * 
     */
    IS_LAST_PAGE((short)7, "isLastPage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_NUM
          return PAGE_NUM;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // TOTAL
          return TOTAL;
        case 4: // PAGES
          return PAGES;
        case 5: // RESULT
          return RESULT;
        case 6: // IS_FIRST_PAGE
          return IS_FIRST_PAGE;
        case 7: // IS_LAST_PAGE
          return IS_LAST_PAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGENUM_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __TOTAL_ISSET_ID = 2;
  private static final int __PAGES_ISSET_ID = 3;
  private static final int __ISFIRSTPAGE_ISSET_ID = 4;
  private static final int __ISLASTPAGE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAGE_NUM,_Fields.PAGE_SIZE,_Fields.TOTAL,_Fields.PAGES,_Fields.RESULT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGES, new org.apache.thrift.meta_data.FieldMetaData("pages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FIRST_PAGE, new org.apache.thrift.meta_data.FieldMetaData("isFirstPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_LAST_PAGE, new org.apache.thrift.meta_data.FieldMetaData("isLastPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageInfoThrift.class, metaDataMap);
  }

  public PageInfoThrift() {
    this.isFirstPage = false;

    this.isLastPage = false;

  }

  public PageInfoThrift(
    boolean isFirstPage,
    boolean isLastPage)
  {
    this();
    this.isFirstPage = isFirstPage;
    setIsFirstPageIsSet(true);
    this.isLastPage = isLastPage;
    setIsLastPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageInfoThrift(PageInfoThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pageNum = other.pageNum;
    this.pageSize = other.pageSize;
    this.total = other.total;
    this.pages = other.pages;
    if (other.isSetResult()) {
      this.result = other.result;
    }
    this.isFirstPage = other.isFirstPage;
    this.isLastPage = other.isLastPage;
  }

  public PageInfoThrift deepCopy() {
    return new PageInfoThrift(this);
  }

  @Override
  public void clear() {
    setPageNumIsSet(false);
    this.pageNum = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setTotalIsSet(false);
    this.total = 0;
    setPagesIsSet(false);
    this.pages = 0;
    this.result = null;
    this.isFirstPage = false;

    this.isLastPage = false;

  }

  /**
   * 当前页
   * 
   */
  public int getPageNum() {
    return this.pageNum;
  }

  /**
   * 当前页
   * 
   */
  public PageInfoThrift setPageNum(int pageNum) {
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    return this;
  }

  public void unsetPageNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  public void setPageNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
  }

  /**
   * //每页的数量
   * 
   */
  public int getPageSize() {
    return this.pageSize;
  }

  /**
   * //每页的数量
   * 
   */
  public PageInfoThrift setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  /**
   * 角色名称集合
   * 
   */
  public long getTotal() {
    return this.total;
  }

  /**
   * 角色名称集合
   * 
   */
  public PageInfoThrift setTotal(long total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  /**
   * 总页数
   * 
   */
  public int getPages() {
    return this.pages;
  }

  /**
   * 总页数
   * 
   */
  public PageInfoThrift setPages(int pages) {
    this.pages = pages;
    setPagesIsSet(true);
    return this;
  }

  public void unsetPages() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGES_ISSET_ID);
  }

  /** Returns true if field pages is set (has been assigned a value) and false otherwise */
  public boolean isSetPages() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGES_ISSET_ID);
  }

  public void setPagesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGES_ISSET_ID, value);
  }

  /**
   * 结果集
   * 
   */
  public java.lang.String getResult() {
    return this.result;
  }

  /**
   * 结果集
   * 
   */
  public PageInfoThrift setResult(java.lang.String result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  /**
   * 是否为第一页
   * 
   */
  public boolean isIsFirstPage() {
    return this.isFirstPage;
  }

  /**
   * 是否为第一页
   * 
   */
  public PageInfoThrift setIsFirstPage(boolean isFirstPage) {
    this.isFirstPage = isFirstPage;
    setIsFirstPageIsSet(true);
    return this;
  }

  public void unsetIsFirstPage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFIRSTPAGE_ISSET_ID);
  }

  /** Returns true if field isFirstPage is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFirstPage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFIRSTPAGE_ISSET_ID);
  }

  public void setIsFirstPageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFIRSTPAGE_ISSET_ID, value);
  }

  /**
   * 是否为最后一页
   * 
   */
  public boolean isIsLastPage() {
    return this.isLastPage;
  }

  /**
   * 是否为最后一页
   * 
   */
  public PageInfoThrift setIsLastPage(boolean isLastPage) {
    this.isLastPage = isLastPage;
    setIsLastPageIsSet(true);
    return this;
  }

  public void unsetIsLastPage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLASTPAGE_ISSET_ID);
  }

  /** Returns true if field isLastPage is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLastPage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLASTPAGE_ISSET_ID);
  }

  public void setIsLastPageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLASTPAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PAGE_NUM:
      if (value == null) {
        unsetPageNum();
      } else {
        setPageNum((java.lang.Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((java.lang.Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((java.lang.Long)value);
      }
      break;

    case PAGES:
      if (value == null) {
        unsetPages();
      } else {
        setPages((java.lang.Integer)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((java.lang.String)value);
      }
      break;

    case IS_FIRST_PAGE:
      if (value == null) {
        unsetIsFirstPage();
      } else {
        setIsFirstPage((java.lang.Boolean)value);
      }
      break;

    case IS_LAST_PAGE:
      if (value == null) {
        unsetIsLastPage();
      } else {
        setIsLastPage((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_NUM:
      return getPageNum();

    case PAGE_SIZE:
      return getPageSize();

    case TOTAL:
      return getTotal();

    case PAGES:
      return getPages();

    case RESULT:
      return getResult();

    case IS_FIRST_PAGE:
      return isIsFirstPage();

    case IS_LAST_PAGE:
      return isIsLastPage();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAGE_NUM:
      return isSetPageNum();
    case PAGE_SIZE:
      return isSetPageSize();
    case TOTAL:
      return isSetTotal();
    case PAGES:
      return isSetPages();
    case RESULT:
      return isSetResult();
    case IS_FIRST_PAGE:
      return isSetIsFirstPage();
    case IS_LAST_PAGE:
      return isSetIsLastPage();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PageInfoThrift)
      return this.equals((PageInfoThrift)that);
    return false;
  }

  public boolean equals(PageInfoThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pageNum = true && this.isSetPageNum();
    boolean that_present_pageNum = true && that.isSetPageNum();
    if (this_present_pageNum || that_present_pageNum) {
      if (!(this_present_pageNum && that_present_pageNum))
        return false;
      if (this.pageNum != that.pageNum)
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_total = true && this.isSetTotal();
    boolean that_present_total = true && that.isSetTotal();
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_pages = true && this.isSetPages();
    boolean that_present_pages = true && that.isSetPages();
    if (this_present_pages || that_present_pages) {
      if (!(this_present_pages && that_present_pages))
        return false;
      if (this.pages != that.pages)
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_isFirstPage = true;
    boolean that_present_isFirstPage = true;
    if (this_present_isFirstPage || that_present_isFirstPage) {
      if (!(this_present_isFirstPage && that_present_isFirstPage))
        return false;
      if (this.isFirstPage != that.isFirstPage)
        return false;
    }

    boolean this_present_isLastPage = true;
    boolean that_present_isLastPage = true;
    if (this_present_isLastPage || that_present_isLastPage) {
      if (!(this_present_isLastPage && that_present_isLastPage))
        return false;
      if (this.isLastPage != that.isLastPage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPageNum()) ? 131071 : 524287);
    if (isSetPageNum())
      hashCode = hashCode * 8191 + pageNum;

    hashCode = hashCode * 8191 + ((isSetPageSize()) ? 131071 : 524287);
    if (isSetPageSize())
      hashCode = hashCode * 8191 + pageSize;

    hashCode = hashCode * 8191 + ((isSetTotal()) ? 131071 : 524287);
    if (isSetTotal())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total);

    hashCode = hashCode * 8191 + ((isSetPages()) ? 131071 : 524287);
    if (isSetPages())
      hashCode = hashCode * 8191 + pages;

    hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
    if (isSetResult())
      hashCode = hashCode * 8191 + result.hashCode();

    hashCode = hashCode * 8191 + ((isFirstPage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isLastPage) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(PageInfoThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPages()).compareTo(other.isSetPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pages, other.pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsFirstPage()).compareTo(other.isSetIsFirstPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFirstPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFirstPage, other.isFirstPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsLastPage()).compareTo(other.isSetIsLastPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLastPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLastPage, other.isLastPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PageInfoThrift(");
    boolean first = true;

    if (isSetPageNum()) {
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
    }
    if (isSetPageSize()) {
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
    }
    if (isSetTotal()) {
      if (!first) sb.append(", ");
      sb.append("total:");
      sb.append(this.total);
      first = false;
    }
    if (isSetPages()) {
      if (!first) sb.append(", ");
      sb.append("pages:");
      sb.append(this.pages);
      first = false;
    }
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isFirstPage:");
    sb.append(this.isFirstPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLastPage:");
    sb.append(this.isLastPage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageInfoThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PageInfoThriftStandardScheme getScheme() {
      return new PageInfoThriftStandardScheme();
    }
  }

  private static class PageInfoThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<PageInfoThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageInfoThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNum = iprot.readI32();
              struct.setPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total = iprot.readI64();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pages = iprot.readI32();
              struct.setPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.result = iprot.readString();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_FIRST_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFirstPage = iprot.readBool();
              struct.setIsFirstPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_LAST_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLastPage = iprot.readBool();
              struct.setIsLastPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageInfoThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPageNum()) {
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageSize()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal()) {
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeI64(struct.total);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPages()) {
        oprot.writeFieldBegin(PAGES_FIELD_DESC);
        oprot.writeI32(struct.pages);
        oprot.writeFieldEnd();
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_FIRST_PAGE_FIELD_DESC);
      oprot.writeBool(struct.isFirstPage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LAST_PAGE_FIELD_DESC);
      oprot.writeBool(struct.isLastPage);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageInfoThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PageInfoThriftTupleScheme getScheme() {
      return new PageInfoThriftTupleScheme();
    }
  }

  private static class PageInfoThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<PageInfoThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageInfoThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPageNum()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetTotal()) {
        optionals.set(2);
      }
      if (struct.isSetPages()) {
        optionals.set(3);
      }
      if (struct.isSetResult()) {
        optionals.set(4);
      }
      if (struct.isSetIsFirstPage()) {
        optionals.set(5);
      }
      if (struct.isSetIsLastPage()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPageNum()) {
        oprot.writeI32(struct.pageNum);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetTotal()) {
        oprot.writeI64(struct.total);
      }
      if (struct.isSetPages()) {
        oprot.writeI32(struct.pages);
      }
      if (struct.isSetResult()) {
        oprot.writeString(struct.result);
      }
      if (struct.isSetIsFirstPage()) {
        oprot.writeBool(struct.isFirstPage);
      }
      if (struct.isSetIsLastPage()) {
        oprot.writeBool(struct.isLastPage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageInfoThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.pageNum = iprot.readI32();
        struct.setPageNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.total = iprot.readI64();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pages = iprot.readI32();
        struct.setPagesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.result = iprot.readString();
        struct.setResultIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isFirstPage = iprot.readBool();
        struct.setIsFirstPageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isLastPage = iprot.readBool();
        struct.setIsLastPageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

