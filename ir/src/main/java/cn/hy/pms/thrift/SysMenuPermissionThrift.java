/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.hy.pms.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 菜单权限信息
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-03-04")
public class SysMenuPermissionThrift implements org.apache.thrift.TBase<SysMenuPermissionThrift, SysMenuPermissionThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SysMenuPermissionThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysMenuPermissionThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("parentIds", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TREE_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("treeSort", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TREE_SORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("treeSorts", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TREE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("treeNames", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MENU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("menuName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MENU_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("menuType", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField MENU_HREF_FIELD_DESC = new org.apache.thrift.protocol.TField("menuHref", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("permission", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField MATCH_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("matchPath", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MENU_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("menuIcon", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SysMenuPermissionThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SysMenuPermissionThriftTupleSchemeFactory();

  /**
   * 主键
   */
  public java.lang.String id; // optional
  /**
   * 父级id
   */
  public java.lang.String parentId; // optional
  /**
   * 所有父级id
   */
  public java.lang.String parentIds; // optional
  /**
   * 本级排序号（升序）
   */
  public int treeSort; // optional
  /**
   * 所有级别排序号
   */
  public java.lang.String treeSorts; // optional
  /**
   * 全节点名
   */
  public java.lang.String treeNames; // optional
  /**
   * 菜单名称
   */
  public java.lang.String menuName; // optional
  /**
   * 菜单类型（1菜单 2权限）
   */
  public byte menuType; // optional
  /**
   * 链接
   */
  public java.lang.String menuHref; // optional
  /**
   * 权限标识
   */
  public java.lang.String permission; // optional
  /**
   * 应用系统id
   */
  public java.lang.String appId; // optional
  /**
   * 状态（1正常 2停用）
   */
  public byte status; // optional
  /**
   * 路径匹配规则
   * 
   */
  public java.lang.String matchPath; // optional
  /**
   * 链接
   */
  public java.lang.String menuIcon; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键
     */
    ID((short)1, "id"),
    /**
     * 父级id
     */
    PARENT_ID((short)2, "parentId"),
    /**
     * 所有父级id
     */
    PARENT_IDS((short)3, "parentIds"),
    /**
     * 本级排序号（升序）
     */
    TREE_SORT((short)4, "treeSort"),
    /**
     * 所有级别排序号
     */
    TREE_SORTS((short)5, "treeSorts"),
    /**
     * 全节点名
     */
    TREE_NAMES((short)6, "treeNames"),
    /**
     * 菜单名称
     */
    MENU_NAME((short)7, "menuName"),
    /**
     * 菜单类型（1菜单 2权限）
     */
    MENU_TYPE((short)8, "menuType"),
    /**
     * 链接
     */
    MENU_HREF((short)9, "menuHref"),
    /**
     * 权限标识
     */
    PERMISSION((short)10, "permission"),
    /**
     * 应用系统id
     */
    APP_ID((short)11, "appId"),
    /**
     * 状态（1正常 2停用）
     */
    STATUS((short)12, "status"),
    /**
     * 路径匹配规则
     * 
     */
    MATCH_PATH((short)13, "matchPath"),
    /**
     * 链接
     */
    MENU_ICON((short)14, "menuIcon");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARENT_ID
          return PARENT_ID;
        case 3: // PARENT_IDS
          return PARENT_IDS;
        case 4: // TREE_SORT
          return TREE_SORT;
        case 5: // TREE_SORTS
          return TREE_SORTS;
        case 6: // TREE_NAMES
          return TREE_NAMES;
        case 7: // MENU_NAME
          return MENU_NAME;
        case 8: // MENU_TYPE
          return MENU_TYPE;
        case 9: // MENU_HREF
          return MENU_HREF;
        case 10: // PERMISSION
          return PERMISSION;
        case 11: // APP_ID
          return APP_ID;
        case 12: // STATUS
          return STATUS;
        case 13: // MATCH_PATH
          return MATCH_PATH;
        case 14: // MENU_ICON
          return MENU_ICON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TREESORT_ISSET_ID = 0;
  private static final int __MENUTYPE_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PARENT_ID,_Fields.PARENT_IDS,_Fields.TREE_SORT,_Fields.TREE_SORTS,_Fields.TREE_NAMES,_Fields.MENU_NAME,_Fields.MENU_TYPE,_Fields.MENU_HREF,_Fields.PERMISSION,_Fields.APP_ID,_Fields.STATUS,_Fields.MATCH_PATH,_Fields.MENU_ICON};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("parentIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_SORT, new org.apache.thrift.meta_data.FieldMetaData("treeSort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TREE_SORTS, new org.apache.thrift.meta_data.FieldMetaData("treeSorts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("treeNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_NAME, new org.apache.thrift.meta_data.FieldMetaData("menuName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_TYPE, new org.apache.thrift.meta_data.FieldMetaData("menuType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MENU_HREF, new org.apache.thrift.meta_data.FieldMetaData("menuHref", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("permission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MATCH_PATH, new org.apache.thrift.meta_data.FieldMetaData("matchPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_ICON, new org.apache.thrift.meta_data.FieldMetaData("menuIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysMenuPermissionThrift.class, metaDataMap);
  }

  public SysMenuPermissionThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysMenuPermissionThrift(SysMenuPermissionThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetParentId()) {
      this.parentId = other.parentId;
    }
    if (other.isSetParentIds()) {
      this.parentIds = other.parentIds;
    }
    this.treeSort = other.treeSort;
    if (other.isSetTreeSorts()) {
      this.treeSorts = other.treeSorts;
    }
    if (other.isSetTreeNames()) {
      this.treeNames = other.treeNames;
    }
    if (other.isSetMenuName()) {
      this.menuName = other.menuName;
    }
    this.menuType = other.menuType;
    if (other.isSetMenuHref()) {
      this.menuHref = other.menuHref;
    }
    if (other.isSetPermission()) {
      this.permission = other.permission;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    this.status = other.status;
    if (other.isSetMatchPath()) {
      this.matchPath = other.matchPath;
    }
    if (other.isSetMenuIcon()) {
      this.menuIcon = other.menuIcon;
    }
  }

  public SysMenuPermissionThrift deepCopy() {
    return new SysMenuPermissionThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.parentId = null;
    this.parentIds = null;
    setTreeSortIsSet(false);
    this.treeSort = 0;
    this.treeSorts = null;
    this.treeNames = null;
    this.menuName = null;
    setMenuTypeIsSet(false);
    this.menuType = 0;
    this.menuHref = null;
    this.permission = null;
    this.appId = null;
    setStatusIsSet(false);
    this.status = 0;
    this.matchPath = null;
    this.menuIcon = null;
  }

  /**
   * 主键
   */
  public java.lang.String getId() {
    return this.id;
  }

  /**
   * 主键
   */
  public SysMenuPermissionThrift setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 父级id
   */
  public java.lang.String getParentId() {
    return this.parentId;
  }

  /**
   * 父级id
   */
  public SysMenuPermissionThrift setParentId(java.lang.String parentId) {
    this.parentId = parentId;
    return this;
  }

  public void unsetParentId() {
    this.parentId = null;
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return this.parentId != null;
  }

  public void setParentIdIsSet(boolean value) {
    if (!value) {
      this.parentId = null;
    }
  }

  /**
   * 所有父级id
   */
  public java.lang.String getParentIds() {
    return this.parentIds;
  }

  /**
   * 所有父级id
   */
  public SysMenuPermissionThrift setParentIds(java.lang.String parentIds) {
    this.parentIds = parentIds;
    return this;
  }

  public void unsetParentIds() {
    this.parentIds = null;
  }

  /** Returns true if field parentIds is set (has been assigned a value) and false otherwise */
  public boolean isSetParentIds() {
    return this.parentIds != null;
  }

  public void setParentIdsIsSet(boolean value) {
    if (!value) {
      this.parentIds = null;
    }
  }

  /**
   * 本级排序号（升序）
   */
  public int getTreeSort() {
    return this.treeSort;
  }

  /**
   * 本级排序号（升序）
   */
  public SysMenuPermissionThrift setTreeSort(int treeSort) {
    this.treeSort = treeSort;
    setTreeSortIsSet(true);
    return this;
  }

  public void unsetTreeSort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TREESORT_ISSET_ID);
  }

  /** Returns true if field treeSort is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeSort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TREESORT_ISSET_ID);
  }

  public void setTreeSortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TREESORT_ISSET_ID, value);
  }

  /**
   * 所有级别排序号
   */
  public java.lang.String getTreeSorts() {
    return this.treeSorts;
  }

  /**
   * 所有级别排序号
   */
  public SysMenuPermissionThrift setTreeSorts(java.lang.String treeSorts) {
    this.treeSorts = treeSorts;
    return this;
  }

  public void unsetTreeSorts() {
    this.treeSorts = null;
  }

  /** Returns true if field treeSorts is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeSorts() {
    return this.treeSorts != null;
  }

  public void setTreeSortsIsSet(boolean value) {
    if (!value) {
      this.treeSorts = null;
    }
  }

  /**
   * 全节点名
   */
  public java.lang.String getTreeNames() {
    return this.treeNames;
  }

  /**
   * 全节点名
   */
  public SysMenuPermissionThrift setTreeNames(java.lang.String treeNames) {
    this.treeNames = treeNames;
    return this;
  }

  public void unsetTreeNames() {
    this.treeNames = null;
  }

  /** Returns true if field treeNames is set (has been assigned a value) and false otherwise */
  public boolean isSetTreeNames() {
    return this.treeNames != null;
  }

  public void setTreeNamesIsSet(boolean value) {
    if (!value) {
      this.treeNames = null;
    }
  }

  /**
   * 菜单名称
   */
  public java.lang.String getMenuName() {
    return this.menuName;
  }

  /**
   * 菜单名称
   */
  public SysMenuPermissionThrift setMenuName(java.lang.String menuName) {
    this.menuName = menuName;
    return this;
  }

  public void unsetMenuName() {
    this.menuName = null;
  }

  /** Returns true if field menuName is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuName() {
    return this.menuName != null;
  }

  public void setMenuNameIsSet(boolean value) {
    if (!value) {
      this.menuName = null;
    }
  }

  /**
   * 菜单类型（1菜单 2权限）
   */
  public byte getMenuType() {
    return this.menuType;
  }

  /**
   * 菜单类型（1菜单 2权限）
   */
  public SysMenuPermissionThrift setMenuType(byte menuType) {
    this.menuType = menuType;
    setMenuTypeIsSet(true);
    return this;
  }

  public void unsetMenuType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MENUTYPE_ISSET_ID);
  }

  /** Returns true if field menuType is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MENUTYPE_ISSET_ID);
  }

  public void setMenuTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MENUTYPE_ISSET_ID, value);
  }

  /**
   * 链接
   */
  public java.lang.String getMenuHref() {
    return this.menuHref;
  }

  /**
   * 链接
   */
  public SysMenuPermissionThrift setMenuHref(java.lang.String menuHref) {
    this.menuHref = menuHref;
    return this;
  }

  public void unsetMenuHref() {
    this.menuHref = null;
  }

  /** Returns true if field menuHref is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuHref() {
    return this.menuHref != null;
  }

  public void setMenuHrefIsSet(boolean value) {
    if (!value) {
      this.menuHref = null;
    }
  }

  /**
   * 权限标识
   */
  public java.lang.String getPermission() {
    return this.permission;
  }

  /**
   * 权限标识
   */
  public SysMenuPermissionThrift setPermission(java.lang.String permission) {
    this.permission = permission;
    return this;
  }

  public void unsetPermission() {
    this.permission = null;
  }

  /** Returns true if field permission is set (has been assigned a value) and false otherwise */
  public boolean isSetPermission() {
    return this.permission != null;
  }

  public void setPermissionIsSet(boolean value) {
    if (!value) {
      this.permission = null;
    }
  }

  /**
   * 应用系统id
   */
  public java.lang.String getAppId() {
    return this.appId;
  }

  /**
   * 应用系统id
   */
  public SysMenuPermissionThrift setAppId(java.lang.String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  /**
   * 状态（1正常 2停用）
   */
  public byte getStatus() {
    return this.status;
  }

  /**
   * 状态（1正常 2停用）
   */
  public SysMenuPermissionThrift setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 路径匹配规则
   * 
   */
  public java.lang.String getMatchPath() {
    return this.matchPath;
  }

  /**
   * 路径匹配规则
   * 
   */
  public SysMenuPermissionThrift setMatchPath(java.lang.String matchPath) {
    this.matchPath = matchPath;
    return this;
  }

  public void unsetMatchPath() {
    this.matchPath = null;
  }

  /** Returns true if field matchPath is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchPath() {
    return this.matchPath != null;
  }

  public void setMatchPathIsSet(boolean value) {
    if (!value) {
      this.matchPath = null;
    }
  }

  /**
   * 链接
   */
  public java.lang.String getMenuIcon() {
    return this.menuIcon;
  }

  /**
   * 链接
   */
  public SysMenuPermissionThrift setMenuIcon(java.lang.String menuIcon) {
    this.menuIcon = menuIcon;
    return this;
  }

  public void unsetMenuIcon() {
    this.menuIcon = null;
  }

  /** Returns true if field menuIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuIcon() {
    return this.menuIcon != null;
  }

  public void setMenuIconIsSet(boolean value) {
    if (!value) {
      this.menuIcon = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((java.lang.String)value);
      }
      break;

    case PARENT_IDS:
      if (value == null) {
        unsetParentIds();
      } else {
        setParentIds((java.lang.String)value);
      }
      break;

    case TREE_SORT:
      if (value == null) {
        unsetTreeSort();
      } else {
        setTreeSort((java.lang.Integer)value);
      }
      break;

    case TREE_SORTS:
      if (value == null) {
        unsetTreeSorts();
      } else {
        setTreeSorts((java.lang.String)value);
      }
      break;

    case TREE_NAMES:
      if (value == null) {
        unsetTreeNames();
      } else {
        setTreeNames((java.lang.String)value);
      }
      break;

    case MENU_NAME:
      if (value == null) {
        unsetMenuName();
      } else {
        setMenuName((java.lang.String)value);
      }
      break;

    case MENU_TYPE:
      if (value == null) {
        unsetMenuType();
      } else {
        setMenuType((java.lang.Byte)value);
      }
      break;

    case MENU_HREF:
      if (value == null) {
        unsetMenuHref();
      } else {
        setMenuHref((java.lang.String)value);
      }
      break;

    case PERMISSION:
      if (value == null) {
        unsetPermission();
      } else {
        setPermission((java.lang.String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Byte)value);
      }
      break;

    case MATCH_PATH:
      if (value == null) {
        unsetMatchPath();
      } else {
        setMatchPath((java.lang.String)value);
      }
      break;

    case MENU_ICON:
      if (value == null) {
        unsetMenuIcon();
      } else {
        setMenuIcon((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PARENT_ID:
      return getParentId();

    case PARENT_IDS:
      return getParentIds();

    case TREE_SORT:
      return getTreeSort();

    case TREE_SORTS:
      return getTreeSorts();

    case TREE_NAMES:
      return getTreeNames();

    case MENU_NAME:
      return getMenuName();

    case MENU_TYPE:
      return getMenuType();

    case MENU_HREF:
      return getMenuHref();

    case PERMISSION:
      return getPermission();

    case APP_ID:
      return getAppId();

    case STATUS:
      return getStatus();

    case MATCH_PATH:
      return getMatchPath();

    case MENU_ICON:
      return getMenuIcon();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARENT_ID:
      return isSetParentId();
    case PARENT_IDS:
      return isSetParentIds();
    case TREE_SORT:
      return isSetTreeSort();
    case TREE_SORTS:
      return isSetTreeSorts();
    case TREE_NAMES:
      return isSetTreeNames();
    case MENU_NAME:
      return isSetMenuName();
    case MENU_TYPE:
      return isSetMenuType();
    case MENU_HREF:
      return isSetMenuHref();
    case PERMISSION:
      return isSetPermission();
    case APP_ID:
      return isSetAppId();
    case STATUS:
      return isSetStatus();
    case MATCH_PATH:
      return isSetMatchPath();
    case MENU_ICON:
      return isSetMenuIcon();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SysMenuPermissionThrift)
      return this.equals((SysMenuPermissionThrift)that);
    return false;
  }

  public boolean equals(SysMenuPermissionThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (!this.parentId.equals(that.parentId))
        return false;
    }

    boolean this_present_parentIds = true && this.isSetParentIds();
    boolean that_present_parentIds = true && that.isSetParentIds();
    if (this_present_parentIds || that_present_parentIds) {
      if (!(this_present_parentIds && that_present_parentIds))
        return false;
      if (!this.parentIds.equals(that.parentIds))
        return false;
    }

    boolean this_present_treeSort = true && this.isSetTreeSort();
    boolean that_present_treeSort = true && that.isSetTreeSort();
    if (this_present_treeSort || that_present_treeSort) {
      if (!(this_present_treeSort && that_present_treeSort))
        return false;
      if (this.treeSort != that.treeSort)
        return false;
    }

    boolean this_present_treeSorts = true && this.isSetTreeSorts();
    boolean that_present_treeSorts = true && that.isSetTreeSorts();
    if (this_present_treeSorts || that_present_treeSorts) {
      if (!(this_present_treeSorts && that_present_treeSorts))
        return false;
      if (!this.treeSorts.equals(that.treeSorts))
        return false;
    }

    boolean this_present_treeNames = true && this.isSetTreeNames();
    boolean that_present_treeNames = true && that.isSetTreeNames();
    if (this_present_treeNames || that_present_treeNames) {
      if (!(this_present_treeNames && that_present_treeNames))
        return false;
      if (!this.treeNames.equals(that.treeNames))
        return false;
    }

    boolean this_present_menuName = true && this.isSetMenuName();
    boolean that_present_menuName = true && that.isSetMenuName();
    if (this_present_menuName || that_present_menuName) {
      if (!(this_present_menuName && that_present_menuName))
        return false;
      if (!this.menuName.equals(that.menuName))
        return false;
    }

    boolean this_present_menuType = true && this.isSetMenuType();
    boolean that_present_menuType = true && that.isSetMenuType();
    if (this_present_menuType || that_present_menuType) {
      if (!(this_present_menuType && that_present_menuType))
        return false;
      if (this.menuType != that.menuType)
        return false;
    }

    boolean this_present_menuHref = true && this.isSetMenuHref();
    boolean that_present_menuHref = true && that.isSetMenuHref();
    if (this_present_menuHref || that_present_menuHref) {
      if (!(this_present_menuHref && that_present_menuHref))
        return false;
      if (!this.menuHref.equals(that.menuHref))
        return false;
    }

    boolean this_present_permission = true && this.isSetPermission();
    boolean that_present_permission = true && that.isSetPermission();
    if (this_present_permission || that_present_permission) {
      if (!(this_present_permission && that_present_permission))
        return false;
      if (!this.permission.equals(that.permission))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_matchPath = true && this.isSetMatchPath();
    boolean that_present_matchPath = true && that.isSetMatchPath();
    if (this_present_matchPath || that_present_matchPath) {
      if (!(this_present_matchPath && that_present_matchPath))
        return false;
      if (!this.matchPath.equals(that.matchPath))
        return false;
    }

    boolean this_present_menuIcon = true && this.isSetMenuIcon();
    boolean that_present_menuIcon = true && that.isSetMenuIcon();
    if (this_present_menuIcon || that_present_menuIcon) {
      if (!(this_present_menuIcon && that_present_menuIcon))
        return false;
      if (!this.menuIcon.equals(that.menuIcon))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentId()) ? 131071 : 524287);
    if (isSetParentId())
      hashCode = hashCode * 8191 + parentId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentIds()) ? 131071 : 524287);
    if (isSetParentIds())
      hashCode = hashCode * 8191 + parentIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetTreeSort()) ? 131071 : 524287);
    if (isSetTreeSort())
      hashCode = hashCode * 8191 + treeSort;

    hashCode = hashCode * 8191 + ((isSetTreeSorts()) ? 131071 : 524287);
    if (isSetTreeSorts())
      hashCode = hashCode * 8191 + treeSorts.hashCode();

    hashCode = hashCode * 8191 + ((isSetTreeNames()) ? 131071 : 524287);
    if (isSetTreeNames())
      hashCode = hashCode * 8191 + treeNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetMenuName()) ? 131071 : 524287);
    if (isSetMenuName())
      hashCode = hashCode * 8191 + menuName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMenuType()) ? 131071 : 524287);
    if (isSetMenuType())
      hashCode = hashCode * 8191 + (int) (menuType);

    hashCode = hashCode * 8191 + ((isSetMenuHref()) ? 131071 : 524287);
    if (isSetMenuHref())
      hashCode = hashCode * 8191 + menuHref.hashCode();

    hashCode = hashCode * 8191 + ((isSetPermission()) ? 131071 : 524287);
    if (isSetPermission())
      hashCode = hashCode * 8191 + permission.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetMatchPath()) ? 131071 : 524287);
    if (isSetMatchPath())
      hashCode = hashCode * 8191 + matchPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetMenuIcon()) ? 131071 : 524287);
    if (isSetMenuIcon())
      hashCode = hashCode * 8191 + menuIcon.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SysMenuPermissionThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentIds()).compareTo(other.isSetParentIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentIds, other.parentIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeSort()).compareTo(other.isSetTreeSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeSort, other.treeSort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeSorts()).compareTo(other.isSetTreeSorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeSorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeSorts, other.treeSorts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTreeNames()).compareTo(other.isSetTreeNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreeNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treeNames, other.treeNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMenuName()).compareTo(other.isSetMenuName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuName, other.menuName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMenuType()).compareTo(other.isSetMenuType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuType, other.menuType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMenuHref()).compareTo(other.isSetMenuHref());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuHref()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuHref, other.menuHref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPermission()).compareTo(other.isSetPermission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permission, other.permission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMatchPath()).compareTo(other.isSetMatchPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchPath, other.matchPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMenuIcon()).compareTo(other.isSetMenuIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuIcon, other.menuIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SysMenuPermissionThrift(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetParentId()) {
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
    }
    if (isSetParentIds()) {
      if (!first) sb.append(", ");
      sb.append("parentIds:");
      if (this.parentIds == null) {
        sb.append("null");
      } else {
        sb.append(this.parentIds);
      }
      first = false;
    }
    if (isSetTreeSort()) {
      if (!first) sb.append(", ");
      sb.append("treeSort:");
      sb.append(this.treeSort);
      first = false;
    }
    if (isSetTreeSorts()) {
      if (!first) sb.append(", ");
      sb.append("treeSorts:");
      if (this.treeSorts == null) {
        sb.append("null");
      } else {
        sb.append(this.treeSorts);
      }
      first = false;
    }
    if (isSetTreeNames()) {
      if (!first) sb.append(", ");
      sb.append("treeNames:");
      if (this.treeNames == null) {
        sb.append("null");
      } else {
        sb.append(this.treeNames);
      }
      first = false;
    }
    if (isSetMenuName()) {
      if (!first) sb.append(", ");
      sb.append("menuName:");
      if (this.menuName == null) {
        sb.append("null");
      } else {
        sb.append(this.menuName);
      }
      first = false;
    }
    if (isSetMenuType()) {
      if (!first) sb.append(", ");
      sb.append("menuType:");
      sb.append(this.menuType);
      first = false;
    }
    if (isSetMenuHref()) {
      if (!first) sb.append(", ");
      sb.append("menuHref:");
      if (this.menuHref == null) {
        sb.append("null");
      } else {
        sb.append(this.menuHref);
      }
      first = false;
    }
    if (isSetPermission()) {
      if (!first) sb.append(", ");
      sb.append("permission:");
      if (this.permission == null) {
        sb.append("null");
      } else {
        sb.append(this.permission);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetMatchPath()) {
      if (!first) sb.append(", ");
      sb.append("matchPath:");
      if (this.matchPath == null) {
        sb.append("null");
      } else {
        sb.append(this.matchPath);
      }
      first = false;
    }
    if (isSetMenuIcon()) {
      if (!first) sb.append(", ");
      sb.append("menuIcon:");
      if (this.menuIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.menuIcon);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysMenuPermissionThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysMenuPermissionThriftStandardScheme getScheme() {
      return new SysMenuPermissionThriftStandardScheme();
    }
  }

  private static class SysMenuPermissionThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<SysMenuPermissionThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysMenuPermissionThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentId = iprot.readString();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentIds = iprot.readString();
              struct.setParentIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TREE_SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.treeSort = iprot.readI32();
              struct.setTreeSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TREE_SORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treeSorts = iprot.readString();
              struct.setTreeSortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TREE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treeNames = iprot.readString();
              struct.setTreeNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MENU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menuName = iprot.readString();
              struct.setMenuNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MENU_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.menuType = iprot.readByte();
              struct.setMenuTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MENU_HREF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menuHref = iprot.readString();
              struct.setMenuHrefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PERMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permission = iprot.readString();
              struct.setPermissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MATCH_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchPath = iprot.readString();
              struct.setMatchPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MENU_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menuIcon = iprot.readString();
              struct.setMenuIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysMenuPermissionThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parentId != null) {
        if (struct.isSetParentId()) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parentIds != null) {
        if (struct.isSetParentIds()) {
          oprot.writeFieldBegin(PARENT_IDS_FIELD_DESC);
          oprot.writeString(struct.parentIds);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTreeSort()) {
        oprot.writeFieldBegin(TREE_SORT_FIELD_DESC);
        oprot.writeI32(struct.treeSort);
        oprot.writeFieldEnd();
      }
      if (struct.treeSorts != null) {
        if (struct.isSetTreeSorts()) {
          oprot.writeFieldBegin(TREE_SORTS_FIELD_DESC);
          oprot.writeString(struct.treeSorts);
          oprot.writeFieldEnd();
        }
      }
      if (struct.treeNames != null) {
        if (struct.isSetTreeNames()) {
          oprot.writeFieldBegin(TREE_NAMES_FIELD_DESC);
          oprot.writeString(struct.treeNames);
          oprot.writeFieldEnd();
        }
      }
      if (struct.menuName != null) {
        if (struct.isSetMenuName()) {
          oprot.writeFieldBegin(MENU_NAME_FIELD_DESC);
          oprot.writeString(struct.menuName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMenuType()) {
        oprot.writeFieldBegin(MENU_TYPE_FIELD_DESC);
        oprot.writeByte(struct.menuType);
        oprot.writeFieldEnd();
      }
      if (struct.menuHref != null) {
        if (struct.isSetMenuHref()) {
          oprot.writeFieldBegin(MENU_HREF_FIELD_DESC);
          oprot.writeString(struct.menuHref);
          oprot.writeFieldEnd();
        }
      }
      if (struct.permission != null) {
        if (struct.isSetPermission()) {
          oprot.writeFieldBegin(PERMISSION_FIELD_DESC);
          oprot.writeString(struct.permission);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeByte(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.matchPath != null) {
        if (struct.isSetMatchPath()) {
          oprot.writeFieldBegin(MATCH_PATH_FIELD_DESC);
          oprot.writeString(struct.matchPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.menuIcon != null) {
        if (struct.isSetMenuIcon()) {
          oprot.writeFieldBegin(MENU_ICON_FIELD_DESC);
          oprot.writeString(struct.menuIcon);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysMenuPermissionThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysMenuPermissionThriftTupleScheme getScheme() {
      return new SysMenuPermissionThriftTupleScheme();
    }
  }

  private static class SysMenuPermissionThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<SysMenuPermissionThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysMenuPermissionThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetParentId()) {
        optionals.set(1);
      }
      if (struct.isSetParentIds()) {
        optionals.set(2);
      }
      if (struct.isSetTreeSort()) {
        optionals.set(3);
      }
      if (struct.isSetTreeSorts()) {
        optionals.set(4);
      }
      if (struct.isSetTreeNames()) {
        optionals.set(5);
      }
      if (struct.isSetMenuName()) {
        optionals.set(6);
      }
      if (struct.isSetMenuType()) {
        optionals.set(7);
      }
      if (struct.isSetMenuHref()) {
        optionals.set(8);
      }
      if (struct.isSetPermission()) {
        optionals.set(9);
      }
      if (struct.isSetAppId()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetMatchPath()) {
        optionals.set(12);
      }
      if (struct.isSetMenuIcon()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetParentId()) {
        oprot.writeString(struct.parentId);
      }
      if (struct.isSetParentIds()) {
        oprot.writeString(struct.parentIds);
      }
      if (struct.isSetTreeSort()) {
        oprot.writeI32(struct.treeSort);
      }
      if (struct.isSetTreeSorts()) {
        oprot.writeString(struct.treeSorts);
      }
      if (struct.isSetTreeNames()) {
        oprot.writeString(struct.treeNames);
      }
      if (struct.isSetMenuName()) {
        oprot.writeString(struct.menuName);
      }
      if (struct.isSetMenuType()) {
        oprot.writeByte(struct.menuType);
      }
      if (struct.isSetMenuHref()) {
        oprot.writeString(struct.menuHref);
      }
      if (struct.isSetPermission()) {
        oprot.writeString(struct.permission);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetMatchPath()) {
        oprot.writeString(struct.matchPath);
      }
      if (struct.isSetMenuIcon()) {
        oprot.writeString(struct.menuIcon);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysMenuPermissionThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parentId = iprot.readString();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentIds = iprot.readString();
        struct.setParentIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.treeSort = iprot.readI32();
        struct.setTreeSortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.treeSorts = iprot.readString();
        struct.setTreeSortsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.treeNames = iprot.readString();
        struct.setTreeNamesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.menuName = iprot.readString();
        struct.setMenuNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.menuType = iprot.readByte();
        struct.setMenuTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.menuHref = iprot.readString();
        struct.setMenuHrefIsSet(true);
      }
      if (incoming.get(9)) {
        struct.permission = iprot.readString();
        struct.setPermissionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.matchPath = iprot.readString();
        struct.setMatchPathIsSet(true);
      }
      if (incoming.get(13)) {
        struct.menuIcon = iprot.readString();
        struct.setMenuIconIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

