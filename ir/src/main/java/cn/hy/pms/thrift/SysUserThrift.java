/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.hy.pms.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 用户信息
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-03-04")
public class SysUserThrift implements org.apache.thrift.TBase<SysUserThrift, SysUserThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SysUserThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysUserThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField WX_OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("wxOpenid", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField PAPERS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("papersType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ID_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("idCard", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PASSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("passport", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SysUserThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SysUserThriftTupleSchemeFactory();

  /**
   * 主键
   */
  public java.lang.String id; // optional
  /**
   * 登录名
   */
  public java.lang.String username; // optional
  /**
   * 用户姓名
   */
  public java.lang.String realName; // optional
  /**
   * 电子邮箱
   */
  public java.lang.String email; // optional
  /**
   * 手机号码
   */
  public java.lang.String mobile; // optional
  /**
   * 办公电话
   */
  public java.lang.String phone; // optional
  /**
   * 用户性别
   */
  public byte sex; // optional
  /**
   * 头像路径
   */
  public java.lang.String avatar; // optional
  /**
   * 绑定的微信openId
   */
  public java.lang.String wxOpenid; // optional
  /**
   * 状态（1正常 2停用 3冻结）
   */
  public byte status; // optional
  /**
   * 证件类型（0:身份证，1:护照）
   */
  public java.lang.String papersType; // optional
  /**
   * 身份证号
   */
  public java.lang.String idCard; // optional
  /**
   * 护照
   */
  public java.lang.String passport; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键
     */
    ID((short)1, "id"),
    /**
     * 登录名
     */
    USERNAME((short)2, "username"),
    /**
     * 用户姓名
     */
    REAL_NAME((short)3, "realName"),
    /**
     * 电子邮箱
     */
    EMAIL((short)4, "email"),
    /**
     * 手机号码
     */
    MOBILE((short)5, "mobile"),
    /**
     * 办公电话
     */
    PHONE((short)6, "phone"),
    /**
     * 用户性别
     */
    SEX((short)7, "sex"),
    /**
     * 头像路径
     */
    AVATAR((short)8, "avatar"),
    /**
     * 绑定的微信openId
     */
    WX_OPENID((short)9, "wxOpenid"),
    /**
     * 状态（1正常 2停用 3冻结）
     */
    STATUS((short)10, "status"),
    /**
     * 证件类型（0:身份证，1:护照）
     */
    PAPERS_TYPE((short)11, "papersType"),
    /**
     * 身份证号
     */
    ID_CARD((short)12, "idCard"),
    /**
     * 护照
     */
    PASSPORT((short)13, "passport");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // REAL_NAME
          return REAL_NAME;
        case 4: // EMAIL
          return EMAIL;
        case 5: // MOBILE
          return MOBILE;
        case 6: // PHONE
          return PHONE;
        case 7: // SEX
          return SEX;
        case 8: // AVATAR
          return AVATAR;
        case 9: // WX_OPENID
          return WX_OPENID;
        case 10: // STATUS
          return STATUS;
        case 11: // PAPERS_TYPE
          return PAPERS_TYPE;
        case 12: // ID_CARD
          return ID_CARD;
        case 13: // PASSPORT
          return PASSPORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEX_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.USERNAME,_Fields.REAL_NAME,_Fields.EMAIL,_Fields.MOBILE,_Fields.PHONE,_Fields.SEX,_Fields.AVATAR,_Fields.WX_OPENID,_Fields.STATUS,_Fields.PAPERS_TYPE,_Fields.ID_CARD,_Fields.PASSPORT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WX_OPENID, new org.apache.thrift.meta_data.FieldMetaData("wxOpenid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PAPERS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("papersType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD, new org.apache.thrift.meta_data.FieldMetaData("idCard", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSPORT, new org.apache.thrift.meta_data.FieldMetaData("passport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysUserThrift.class, metaDataMap);
  }

  public SysUserThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysUserThrift(SysUserThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    this.sex = other.sex;
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetWxOpenid()) {
      this.wxOpenid = other.wxOpenid;
    }
    this.status = other.status;
    if (other.isSetPapersType()) {
      this.papersType = other.papersType;
    }
    if (other.isSetIdCard()) {
      this.idCard = other.idCard;
    }
    if (other.isSetPassport()) {
      this.passport = other.passport;
    }
  }

  public SysUserThrift deepCopy() {
    return new SysUserThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.username = null;
    this.realName = null;
    this.email = null;
    this.mobile = null;
    this.phone = null;
    setSexIsSet(false);
    this.sex = 0;
    this.avatar = null;
    this.wxOpenid = null;
    setStatusIsSet(false);
    this.status = 0;
    this.papersType = null;
    this.idCard = null;
    this.passport = null;
  }

  /**
   * 主键
   */
  public java.lang.String getId() {
    return this.id;
  }

  /**
   * 主键
   */
  public SysUserThrift setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 登录名
   */
  public java.lang.String getUsername() {
    return this.username;
  }

  /**
   * 登录名
   */
  public SysUserThrift setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  /**
   * 用户姓名
   */
  public java.lang.String getRealName() {
    return this.realName;
  }

  /**
   * 用户姓名
   */
  public SysUserThrift setRealName(java.lang.String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  /**
   * 电子邮箱
   */
  public java.lang.String getEmail() {
    return this.email;
  }

  /**
   * 电子邮箱
   */
  public SysUserThrift setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  /**
   * 手机号码
   */
  public java.lang.String getMobile() {
    return this.mobile;
  }

  /**
   * 手机号码
   */
  public SysUserThrift setMobile(java.lang.String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 办公电话
   */
  public java.lang.String getPhone() {
    return this.phone;
  }

  /**
   * 办公电话
   */
  public SysUserThrift setPhone(java.lang.String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 用户性别
   */
  public byte getSex() {
    return this.sex;
  }

  /**
   * 用户性别
   */
  public SysUserThrift setSex(byte sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  /**
   * 头像路径
   */
  public java.lang.String getAvatar() {
    return this.avatar;
  }

  /**
   * 头像路径
   */
  public SysUserThrift setAvatar(java.lang.String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  /**
   * 绑定的微信openId
   */
  public java.lang.String getWxOpenid() {
    return this.wxOpenid;
  }

  /**
   * 绑定的微信openId
   */
  public SysUserThrift setWxOpenid(java.lang.String wxOpenid) {
    this.wxOpenid = wxOpenid;
    return this;
  }

  public void unsetWxOpenid() {
    this.wxOpenid = null;
  }

  /** Returns true if field wxOpenid is set (has been assigned a value) and false otherwise */
  public boolean isSetWxOpenid() {
    return this.wxOpenid != null;
  }

  public void setWxOpenidIsSet(boolean value) {
    if (!value) {
      this.wxOpenid = null;
    }
  }

  /**
   * 状态（1正常 2停用 3冻结）
   */
  public byte getStatus() {
    return this.status;
  }

  /**
   * 状态（1正常 2停用 3冻结）
   */
  public SysUserThrift setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 证件类型（0:身份证，1:护照）
   */
  public java.lang.String getPapersType() {
    return this.papersType;
  }

  /**
   * 证件类型（0:身份证，1:护照）
   */
  public SysUserThrift setPapersType(java.lang.String papersType) {
    this.papersType = papersType;
    return this;
  }

  public void unsetPapersType() {
    this.papersType = null;
  }

  /** Returns true if field papersType is set (has been assigned a value) and false otherwise */
  public boolean isSetPapersType() {
    return this.papersType != null;
  }

  public void setPapersTypeIsSet(boolean value) {
    if (!value) {
      this.papersType = null;
    }
  }

  /**
   * 身份证号
   */
  public java.lang.String getIdCard() {
    return this.idCard;
  }

  /**
   * 身份证号
   */
  public SysUserThrift setIdCard(java.lang.String idCard) {
    this.idCard = idCard;
    return this;
  }

  public void unsetIdCard() {
    this.idCard = null;
  }

  /** Returns true if field idCard is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCard() {
    return this.idCard != null;
  }

  public void setIdCardIsSet(boolean value) {
    if (!value) {
      this.idCard = null;
    }
  }

  /**
   * 护照
   */
  public java.lang.String getPassport() {
    return this.passport;
  }

  /**
   * 护照
   */
  public SysUserThrift setPassport(java.lang.String passport) {
    this.passport = passport;
    return this;
  }

  public void unsetPassport() {
    this.passport = null;
  }

  /** Returns true if field passport is set (has been assigned a value) and false otherwise */
  public boolean isSetPassport() {
    return this.passport != null;
  }

  public void setPassportIsSet(boolean value) {
    if (!value) {
      this.passport = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((java.lang.String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((java.lang.String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((java.lang.Byte)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((java.lang.String)value);
      }
      break;

    case WX_OPENID:
      if (value == null) {
        unsetWxOpenid();
      } else {
        setWxOpenid((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Byte)value);
      }
      break;

    case PAPERS_TYPE:
      if (value == null) {
        unsetPapersType();
      } else {
        setPapersType((java.lang.String)value);
      }
      break;

    case ID_CARD:
      if (value == null) {
        unsetIdCard();
      } else {
        setIdCard((java.lang.String)value);
      }
      break;

    case PASSPORT:
      if (value == null) {
        unsetPassport();
      } else {
        setPassport((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USERNAME:
      return getUsername();

    case REAL_NAME:
      return getRealName();

    case EMAIL:
      return getEmail();

    case MOBILE:
      return getMobile();

    case PHONE:
      return getPhone();

    case SEX:
      return getSex();

    case AVATAR:
      return getAvatar();

    case WX_OPENID:
      return getWxOpenid();

    case STATUS:
      return getStatus();

    case PAPERS_TYPE:
      return getPapersType();

    case ID_CARD:
      return getIdCard();

    case PASSPORT:
      return getPassport();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USERNAME:
      return isSetUsername();
    case REAL_NAME:
      return isSetRealName();
    case EMAIL:
      return isSetEmail();
    case MOBILE:
      return isSetMobile();
    case PHONE:
      return isSetPhone();
    case SEX:
      return isSetSex();
    case AVATAR:
      return isSetAvatar();
    case WX_OPENID:
      return isSetWxOpenid();
    case STATUS:
      return isSetStatus();
    case PAPERS_TYPE:
      return isSetPapersType();
    case ID_CARD:
      return isSetIdCard();
    case PASSPORT:
      return isSetPassport();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SysUserThrift)
      return this.equals((SysUserThrift)that);
    return false;
  }

  public boolean equals(SysUserThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_wxOpenid = true && this.isSetWxOpenid();
    boolean that_present_wxOpenid = true && that.isSetWxOpenid();
    if (this_present_wxOpenid || that_present_wxOpenid) {
      if (!(this_present_wxOpenid && that_present_wxOpenid))
        return false;
      if (!this.wxOpenid.equals(that.wxOpenid))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_papersType = true && this.isSetPapersType();
    boolean that_present_papersType = true && that.isSetPapersType();
    if (this_present_papersType || that_present_papersType) {
      if (!(this_present_papersType && that_present_papersType))
        return false;
      if (!this.papersType.equals(that.papersType))
        return false;
    }

    boolean this_present_idCard = true && this.isSetIdCard();
    boolean that_present_idCard = true && that.isSetIdCard();
    if (this_present_idCard || that_present_idCard) {
      if (!(this_present_idCard && that_present_idCard))
        return false;
      if (!this.idCard.equals(that.idCard))
        return false;
    }

    boolean this_present_passport = true && this.isSetPassport();
    boolean that_present_passport = true && that.isSetPassport();
    if (this_present_passport || that_present_passport) {
      if (!(this_present_passport && that_present_passport))
        return false;
      if (!this.passport.equals(that.passport))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetRealName()) ? 131071 : 524287);
    if (isSetRealName())
      hashCode = hashCode * 8191 + realName.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
    if (isSetPhone())
      hashCode = hashCode * 8191 + phone.hashCode();

    hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
    if (isSetSex())
      hashCode = hashCode * 8191 + (int) (sex);

    hashCode = hashCode * 8191 + ((isSetAvatar()) ? 131071 : 524287);
    if (isSetAvatar())
      hashCode = hashCode * 8191 + avatar.hashCode();

    hashCode = hashCode * 8191 + ((isSetWxOpenid()) ? 131071 : 524287);
    if (isSetWxOpenid())
      hashCode = hashCode * 8191 + wxOpenid.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetPapersType()) ? 131071 : 524287);
    if (isSetPapersType())
      hashCode = hashCode * 8191 + papersType.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdCard()) ? 131071 : 524287);
    if (isSetIdCard())
      hashCode = hashCode * 8191 + idCard.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassport()) ? 131071 : 524287);
    if (isSetPassport())
      hashCode = hashCode * 8191 + passport.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SysUserThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWxOpenid()).compareTo(other.isSetWxOpenid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWxOpenid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxOpenid, other.wxOpenid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPapersType()).compareTo(other.isSetPapersType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPapersType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.papersType, other.papersType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdCard()).compareTo(other.isSetIdCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCard, other.idCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassport()).compareTo(other.isSetPassport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passport, other.passport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SysUserThrift(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetRealName()) {
      if (!first) sb.append(", ");
      sb.append("realName:");
      if (this.realName == null) {
        sb.append("null");
      } else {
        sb.append(this.realName);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetAvatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (isSetWxOpenid()) {
      if (!first) sb.append(", ");
      sb.append("wxOpenid:");
      if (this.wxOpenid == null) {
        sb.append("null");
      } else {
        sb.append(this.wxOpenid);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetPapersType()) {
      if (!first) sb.append(", ");
      sb.append("papersType:");
      if (this.papersType == null) {
        sb.append("null");
      } else {
        sb.append(this.papersType);
      }
      first = false;
    }
    if (isSetIdCard()) {
      if (!first) sb.append(", ");
      sb.append("idCard:");
      if (this.idCard == null) {
        sb.append("null");
      } else {
        sb.append(this.idCard);
      }
      first = false;
    }
    if (isSetPassport()) {
      if (!first) sb.append(", ");
      sb.append("passport:");
      if (this.passport == null) {
        sb.append("null");
      } else {
        sb.append(this.passport);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysUserThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysUserThriftStandardScheme getScheme() {
      return new SysUserThriftStandardScheme();
    }
  }

  private static class SysUserThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<SysUserThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysUserThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sex = iprot.readByte();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WX_OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wxOpenid = iprot.readString();
              struct.setWxOpenidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAPERS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.papersType = iprot.readString();
              struct.setPapersTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ID_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCard = iprot.readString();
              struct.setIdCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PASSPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passport = iprot.readString();
              struct.setPassportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysUserThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.realName != null) {
        if (struct.isSetRealName()) {
          oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
          oprot.writeString(struct.realName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeByte(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        if (struct.isSetAvatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wxOpenid != null) {
        if (struct.isSetWxOpenid()) {
          oprot.writeFieldBegin(WX_OPENID_FIELD_DESC);
          oprot.writeString(struct.wxOpenid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeByte(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.papersType != null) {
        if (struct.isSetPapersType()) {
          oprot.writeFieldBegin(PAPERS_TYPE_FIELD_DESC);
          oprot.writeString(struct.papersType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.idCard != null) {
        if (struct.isSetIdCard()) {
          oprot.writeFieldBegin(ID_CARD_FIELD_DESC);
          oprot.writeString(struct.idCard);
          oprot.writeFieldEnd();
        }
      }
      if (struct.passport != null) {
        if (struct.isSetPassport()) {
          oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
          oprot.writeString(struct.passport);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysUserThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysUserThriftTupleScheme getScheme() {
      return new SysUserThriftTupleScheme();
    }
  }

  private static class SysUserThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<SysUserThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysUserThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetRealName()) {
        optionals.set(2);
      }
      if (struct.isSetEmail()) {
        optionals.set(3);
      }
      if (struct.isSetMobile()) {
        optionals.set(4);
      }
      if (struct.isSetPhone()) {
        optionals.set(5);
      }
      if (struct.isSetSex()) {
        optionals.set(6);
      }
      if (struct.isSetAvatar()) {
        optionals.set(7);
      }
      if (struct.isSetWxOpenid()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetPapersType()) {
        optionals.set(10);
      }
      if (struct.isSetIdCard()) {
        optionals.set(11);
      }
      if (struct.isSetPassport()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetSex()) {
        oprot.writeByte(struct.sex);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetWxOpenid()) {
        oprot.writeString(struct.wxOpenid);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetPapersType()) {
        oprot.writeString(struct.papersType);
      }
      if (struct.isSetIdCard()) {
        oprot.writeString(struct.idCard);
      }
      if (struct.isSetPassport()) {
        oprot.writeString(struct.passport);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysUserThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(5)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sex = iprot.readByte();
        struct.setSexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(8)) {
        struct.wxOpenid = iprot.readString();
        struct.setWxOpenidIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.papersType = iprot.readString();
        struct.setPapersTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.idCard = iprot.readString();
        struct.setIdCardIsSet(true);
      }
      if (incoming.get(12)) {
        struct.passport = iprot.readString();
        struct.setPassportIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

