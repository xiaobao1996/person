/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.hy.pms.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 角色注册需求配置
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-03-04")
public class SysRoleRegisterRequirementThrift implements org.apache.thrift.TBase<SysRoleRegisterRequirementThrift, SysRoleRegisterRequirementThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SysRoleRegisterRequirementThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysRoleRegisterRequirementThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCHOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQUIRE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("requireKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AVAILABLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("availableValue", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REQUIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("require", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField TIP_FIELD_DESC = new org.apache.thrift.protocol.TField("tip", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("createBy", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sort", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DATABASE_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseMapping", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SysRoleRegisterRequirementThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SysRoleRegisterRequirementThriftTupleSchemeFactory();

  /**
   * 主键
   */
  public java.lang.String id; // optional
  /**
   * 角色id
   */
  public java.lang.String roleId; // optional
  /**
   * 角色所在学校id
   */
  public java.lang.String schoolId; // optional
  /**
   * 角色注册要求key
   */
  public java.lang.String requireKey; // optional
  /**
   * 备选值(json格式的字符串）
   */
  public java.lang.String availableValue; // optional
  /**
   * 是否必填（0:否，1:是）
   */
  public byte require; // optional
  /**
   * 提示信息
   */
  public java.lang.String tip; // optional
  /**
   * 要求类型（0:输入框，1:文件，2:下拉选择）
   */
  public byte type; // optional
  /**
   * 创建人
   */
  public java.lang.String createBy; // optional
  /**
   * 创建时间
   */
  public java.lang.String createAt; // optional
  /**
   * 排序
   */
  public int sort; // optional
  /**
   * 自动审核对应的数据库字段（表明.字段名的格式）
   */
  public java.lang.String databaseMapping; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键
     */
    ID((short)1, "id"),
    /**
     * 角色id
     */
    ROLE_ID((short)2, "roleId"),
    /**
     * 角色所在学校id
     */
    SCHOOL_ID((short)3, "schoolId"),
    /**
     * 角色注册要求key
     */
    REQUIRE_KEY((short)4, "requireKey"),
    /**
     * 备选值(json格式的字符串）
     */
    AVAILABLE_VALUE((short)5, "availableValue"),
    /**
     * 是否必填（0:否，1:是）
     */
    REQUIRE((short)6, "require"),
    /**
     * 提示信息
     */
    TIP((short)7, "tip"),
    /**
     * 要求类型（0:输入框，1:文件，2:下拉选择）
     */
    TYPE((short)8, "type"),
    /**
     * 创建人
     */
    CREATE_BY((short)9, "createBy"),
    /**
     * 创建时间
     */
    CREATE_AT((short)10, "createAt"),
    /**
     * 排序
     */
    SORT((short)11, "sort"),
    /**
     * 自动审核对应的数据库字段（表明.字段名的格式）
     */
    DATABASE_MAPPING((short)12, "databaseMapping");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ROLE_ID
          return ROLE_ID;
        case 3: // SCHOOL_ID
          return SCHOOL_ID;
        case 4: // REQUIRE_KEY
          return REQUIRE_KEY;
        case 5: // AVAILABLE_VALUE
          return AVAILABLE_VALUE;
        case 6: // REQUIRE
          return REQUIRE;
        case 7: // TIP
          return TIP;
        case 8: // TYPE
          return TYPE;
        case 9: // CREATE_BY
          return CREATE_BY;
        case 10: // CREATE_AT
          return CREATE_AT;
        case 11: // SORT
          return SORT;
        case 12: // DATABASE_MAPPING
          return DATABASE_MAPPING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUIRE_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __SORT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.ROLE_ID,_Fields.SCHOOL_ID,_Fields.REQUIRE_KEY,_Fields.AVAILABLE_VALUE,_Fields.REQUIRE,_Fields.TIP,_Fields.TYPE,_Fields.CREATE_BY,_Fields.CREATE_AT,_Fields.SORT,_Fields.DATABASE_MAPPING};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("schoolId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRE_KEY, new org.apache.thrift.meta_data.FieldMetaData("requireKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("availableValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRE, new org.apache.thrift.meta_data.FieldMetaData("require", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TIP, new org.apache.thrift.meta_data.FieldMetaData("tip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATE_BY, new org.apache.thrift.meta_data.FieldMetaData("createBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT, new org.apache.thrift.meta_data.FieldMetaData("sort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATABASE_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("databaseMapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysRoleRegisterRequirementThrift.class, metaDataMap);
  }

  public SysRoleRegisterRequirementThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysRoleRegisterRequirementThrift(SysRoleRegisterRequirementThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetRoleId()) {
      this.roleId = other.roleId;
    }
    if (other.isSetSchoolId()) {
      this.schoolId = other.schoolId;
    }
    if (other.isSetRequireKey()) {
      this.requireKey = other.requireKey;
    }
    if (other.isSetAvailableValue()) {
      this.availableValue = other.availableValue;
    }
    this.require = other.require;
    if (other.isSetTip()) {
      this.tip = other.tip;
    }
    this.type = other.type;
    if (other.isSetCreateBy()) {
      this.createBy = other.createBy;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    this.sort = other.sort;
    if (other.isSetDatabaseMapping()) {
      this.databaseMapping = other.databaseMapping;
    }
  }

  public SysRoleRegisterRequirementThrift deepCopy() {
    return new SysRoleRegisterRequirementThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.roleId = null;
    this.schoolId = null;
    this.requireKey = null;
    this.availableValue = null;
    setRequireIsSet(false);
    this.require = 0;
    this.tip = null;
    setTypeIsSet(false);
    this.type = 0;
    this.createBy = null;
    this.createAt = null;
    setSortIsSet(false);
    this.sort = 0;
    this.databaseMapping = null;
  }

  /**
   * 主键
   */
  public java.lang.String getId() {
    return this.id;
  }

  /**
   * 主键
   */
  public SysRoleRegisterRequirementThrift setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 角色id
   */
  public java.lang.String getRoleId() {
    return this.roleId;
  }

  /**
   * 角色id
   */
  public SysRoleRegisterRequirementThrift setRoleId(java.lang.String roleId) {
    this.roleId = roleId;
    return this;
  }

  public void unsetRoleId() {
    this.roleId = null;
  }

  /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleId() {
    return this.roleId != null;
  }

  public void setRoleIdIsSet(boolean value) {
    if (!value) {
      this.roleId = null;
    }
  }

  /**
   * 角色所在学校id
   */
  public java.lang.String getSchoolId() {
    return this.schoolId;
  }

  /**
   * 角色所在学校id
   */
  public SysRoleRegisterRequirementThrift setSchoolId(java.lang.String schoolId) {
    this.schoolId = schoolId;
    return this;
  }

  public void unsetSchoolId() {
    this.schoolId = null;
  }

  /** Returns true if field schoolId is set (has been assigned a value) and false otherwise */
  public boolean isSetSchoolId() {
    return this.schoolId != null;
  }

  public void setSchoolIdIsSet(boolean value) {
    if (!value) {
      this.schoolId = null;
    }
  }

  /**
   * 角色注册要求key
   */
  public java.lang.String getRequireKey() {
    return this.requireKey;
  }

  /**
   * 角色注册要求key
   */
  public SysRoleRegisterRequirementThrift setRequireKey(java.lang.String requireKey) {
    this.requireKey = requireKey;
    return this;
  }

  public void unsetRequireKey() {
    this.requireKey = null;
  }

  /** Returns true if field requireKey is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireKey() {
    return this.requireKey != null;
  }

  public void setRequireKeyIsSet(boolean value) {
    if (!value) {
      this.requireKey = null;
    }
  }

  /**
   * 备选值(json格式的字符串）
   */
  public java.lang.String getAvailableValue() {
    return this.availableValue;
  }

  /**
   * 备选值(json格式的字符串）
   */
  public SysRoleRegisterRequirementThrift setAvailableValue(java.lang.String availableValue) {
    this.availableValue = availableValue;
    return this;
  }

  public void unsetAvailableValue() {
    this.availableValue = null;
  }

  /** Returns true if field availableValue is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableValue() {
    return this.availableValue != null;
  }

  public void setAvailableValueIsSet(boolean value) {
    if (!value) {
      this.availableValue = null;
    }
  }

  /**
   * 是否必填（0:否，1:是）
   */
  public byte getRequire() {
    return this.require;
  }

  /**
   * 是否必填（0:否，1:是）
   */
  public SysRoleRegisterRequirementThrift setRequire(byte require) {
    this.require = require;
    setRequireIsSet(true);
    return this;
  }

  public void unsetRequire() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUIRE_ISSET_ID);
  }

  /** Returns true if field require is set (has been assigned a value) and false otherwise */
  public boolean isSetRequire() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUIRE_ISSET_ID);
  }

  public void setRequireIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUIRE_ISSET_ID, value);
  }

  /**
   * 提示信息
   */
  public java.lang.String getTip() {
    return this.tip;
  }

  /**
   * 提示信息
   */
  public SysRoleRegisterRequirementThrift setTip(java.lang.String tip) {
    this.tip = tip;
    return this;
  }

  public void unsetTip() {
    this.tip = null;
  }

  /** Returns true if field tip is set (has been assigned a value) and false otherwise */
  public boolean isSetTip() {
    return this.tip != null;
  }

  public void setTipIsSet(boolean value) {
    if (!value) {
      this.tip = null;
    }
  }

  /**
   * 要求类型（0:输入框，1:文件，2:下拉选择）
   */
  public byte getType() {
    return this.type;
  }

  /**
   * 要求类型（0:输入框，1:文件，2:下拉选择）
   */
  public SysRoleRegisterRequirementThrift setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  /**
   * 创建人
   */
  public java.lang.String getCreateBy() {
    return this.createBy;
  }

  /**
   * 创建人
   */
  public SysRoleRegisterRequirementThrift setCreateBy(java.lang.String createBy) {
    this.createBy = createBy;
    return this;
  }

  public void unsetCreateBy() {
    this.createBy = null;
  }

  /** Returns true if field createBy is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateBy() {
    return this.createBy != null;
  }

  public void setCreateByIsSet(boolean value) {
    if (!value) {
      this.createBy = null;
    }
  }

  /**
   * 创建时间
   */
  public java.lang.String getCreateAt() {
    return this.createAt;
  }

  /**
   * 创建时间
   */
  public SysRoleRegisterRequirementThrift setCreateAt(java.lang.String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  /**
   * 排序
   */
  public int getSort() {
    return this.sort;
  }

  /**
   * 排序
   */
  public SysRoleRegisterRequirementThrift setSort(int sort) {
    this.sort = sort;
    setSortIsSet(true);
    return this;
  }

  public void unsetSort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORT_ISSET_ID);
  }

  /** Returns true if field sort is set (has been assigned a value) and false otherwise */
  public boolean isSetSort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORT_ISSET_ID);
  }

  public void setSortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORT_ISSET_ID, value);
  }

  /**
   * 自动审核对应的数据库字段（表明.字段名的格式）
   */
  public java.lang.String getDatabaseMapping() {
    return this.databaseMapping;
  }

  /**
   * 自动审核对应的数据库字段（表明.字段名的格式）
   */
  public SysRoleRegisterRequirementThrift setDatabaseMapping(java.lang.String databaseMapping) {
    this.databaseMapping = databaseMapping;
    return this;
  }

  public void unsetDatabaseMapping() {
    this.databaseMapping = null;
  }

  /** Returns true if field databaseMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseMapping() {
    return this.databaseMapping != null;
  }

  public void setDatabaseMappingIsSet(boolean value) {
    if (!value) {
      this.databaseMapping = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRoleId();
      } else {
        setRoleId((java.lang.String)value);
      }
      break;

    case SCHOOL_ID:
      if (value == null) {
        unsetSchoolId();
      } else {
        setSchoolId((java.lang.String)value);
      }
      break;

    case REQUIRE_KEY:
      if (value == null) {
        unsetRequireKey();
      } else {
        setRequireKey((java.lang.String)value);
      }
      break;

    case AVAILABLE_VALUE:
      if (value == null) {
        unsetAvailableValue();
      } else {
        setAvailableValue((java.lang.String)value);
      }
      break;

    case REQUIRE:
      if (value == null) {
        unsetRequire();
      } else {
        setRequire((java.lang.Byte)value);
      }
      break;

    case TIP:
      if (value == null) {
        unsetTip();
      } else {
        setTip((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.Byte)value);
      }
      break;

    case CREATE_BY:
      if (value == null) {
        unsetCreateBy();
      } else {
        setCreateBy((java.lang.String)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((java.lang.String)value);
      }
      break;

    case SORT:
      if (value == null) {
        unsetSort();
      } else {
        setSort((java.lang.Integer)value);
      }
      break;

    case DATABASE_MAPPING:
      if (value == null) {
        unsetDatabaseMapping();
      } else {
        setDatabaseMapping((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ROLE_ID:
      return getRoleId();

    case SCHOOL_ID:
      return getSchoolId();

    case REQUIRE_KEY:
      return getRequireKey();

    case AVAILABLE_VALUE:
      return getAvailableValue();

    case REQUIRE:
      return getRequire();

    case TIP:
      return getTip();

    case TYPE:
      return getType();

    case CREATE_BY:
      return getCreateBy();

    case CREATE_AT:
      return getCreateAt();

    case SORT:
      return getSort();

    case DATABASE_MAPPING:
      return getDatabaseMapping();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ROLE_ID:
      return isSetRoleId();
    case SCHOOL_ID:
      return isSetSchoolId();
    case REQUIRE_KEY:
      return isSetRequireKey();
    case AVAILABLE_VALUE:
      return isSetAvailableValue();
    case REQUIRE:
      return isSetRequire();
    case TIP:
      return isSetTip();
    case TYPE:
      return isSetType();
    case CREATE_BY:
      return isSetCreateBy();
    case CREATE_AT:
      return isSetCreateAt();
    case SORT:
      return isSetSort();
    case DATABASE_MAPPING:
      return isSetDatabaseMapping();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SysRoleRegisterRequirementThrift)
      return this.equals((SysRoleRegisterRequirementThrift)that);
    return false;
  }

  public boolean equals(SysRoleRegisterRequirementThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_roleId = true && this.isSetRoleId();
    boolean that_present_roleId = true && that.isSetRoleId();
    if (this_present_roleId || that_present_roleId) {
      if (!(this_present_roleId && that_present_roleId))
        return false;
      if (!this.roleId.equals(that.roleId))
        return false;
    }

    boolean this_present_schoolId = true && this.isSetSchoolId();
    boolean that_present_schoolId = true && that.isSetSchoolId();
    if (this_present_schoolId || that_present_schoolId) {
      if (!(this_present_schoolId && that_present_schoolId))
        return false;
      if (!this.schoolId.equals(that.schoolId))
        return false;
    }

    boolean this_present_requireKey = true && this.isSetRequireKey();
    boolean that_present_requireKey = true && that.isSetRequireKey();
    if (this_present_requireKey || that_present_requireKey) {
      if (!(this_present_requireKey && that_present_requireKey))
        return false;
      if (!this.requireKey.equals(that.requireKey))
        return false;
    }

    boolean this_present_availableValue = true && this.isSetAvailableValue();
    boolean that_present_availableValue = true && that.isSetAvailableValue();
    if (this_present_availableValue || that_present_availableValue) {
      if (!(this_present_availableValue && that_present_availableValue))
        return false;
      if (!this.availableValue.equals(that.availableValue))
        return false;
    }

    boolean this_present_require = true && this.isSetRequire();
    boolean that_present_require = true && that.isSetRequire();
    if (this_present_require || that_present_require) {
      if (!(this_present_require && that_present_require))
        return false;
      if (this.require != that.require)
        return false;
    }

    boolean this_present_tip = true && this.isSetTip();
    boolean that_present_tip = true && that.isSetTip();
    if (this_present_tip || that_present_tip) {
      if (!(this_present_tip && that_present_tip))
        return false;
      if (!this.tip.equals(that.tip))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_createBy = true && this.isSetCreateBy();
    boolean that_present_createBy = true && that.isSetCreateBy();
    if (this_present_createBy || that_present_createBy) {
      if (!(this_present_createBy && that_present_createBy))
        return false;
      if (!this.createBy.equals(that.createBy))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_sort = true && this.isSetSort();
    boolean that_present_sort = true && that.isSetSort();
    if (this_present_sort || that_present_sort) {
      if (!(this_present_sort && that_present_sort))
        return false;
      if (this.sort != that.sort)
        return false;
    }

    boolean this_present_databaseMapping = true && this.isSetDatabaseMapping();
    boolean that_present_databaseMapping = true && that.isSetDatabaseMapping();
    if (this_present_databaseMapping || that_present_databaseMapping) {
      if (!(this_present_databaseMapping && that_present_databaseMapping))
        return false;
      if (!this.databaseMapping.equals(that.databaseMapping))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoleId()) ? 131071 : 524287);
    if (isSetRoleId())
      hashCode = hashCode * 8191 + roleId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchoolId()) ? 131071 : 524287);
    if (isSetSchoolId())
      hashCode = hashCode * 8191 + schoolId.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequireKey()) ? 131071 : 524287);
    if (isSetRequireKey())
      hashCode = hashCode * 8191 + requireKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetAvailableValue()) ? 131071 : 524287);
    if (isSetAvailableValue())
      hashCode = hashCode * 8191 + availableValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequire()) ? 131071 : 524287);
    if (isSetRequire())
      hashCode = hashCode * 8191 + (int) (require);

    hashCode = hashCode * 8191 + ((isSetTip()) ? 131071 : 524287);
    if (isSetTip())
      hashCode = hashCode * 8191 + tip.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + ((isSetCreateBy()) ? 131071 : 524287);
    if (isSetCreateBy())
      hashCode = hashCode * 8191 + createBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateAt()) ? 131071 : 524287);
    if (isSetCreateAt())
      hashCode = hashCode * 8191 + createAt.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort()) ? 131071 : 524287);
    if (isSetSort())
      hashCode = hashCode * 8191 + sort;

    hashCode = hashCode * 8191 + ((isSetDatabaseMapping()) ? 131071 : 524287);
    if (isSetDatabaseMapping())
      hashCode = hashCode * 8191 + databaseMapping.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SysRoleRegisterRequirementThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchoolId()).compareTo(other.isSetSchoolId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchoolId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolId, other.schoolId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequireKey()).compareTo(other.isSetRequireKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireKey, other.requireKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvailableValue()).compareTo(other.isSetAvailableValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableValue, other.availableValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequire()).compareTo(other.isSetRequire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.require, other.require);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTip()).compareTo(other.isSetTip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tip, other.tip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateBy()).compareTo(other.isSetCreateBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createBy, other.createBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSort()).compareTo(other.isSetSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort, other.sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatabaseMapping()).compareTo(other.isSetDatabaseMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseMapping, other.databaseMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SysRoleRegisterRequirementThrift(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetRoleId()) {
      if (!first) sb.append(", ");
      sb.append("roleId:");
      if (this.roleId == null) {
        sb.append("null");
      } else {
        sb.append(this.roleId);
      }
      first = false;
    }
    if (isSetSchoolId()) {
      if (!first) sb.append(", ");
      sb.append("schoolId:");
      if (this.schoolId == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolId);
      }
      first = false;
    }
    if (isSetRequireKey()) {
      if (!first) sb.append(", ");
      sb.append("requireKey:");
      if (this.requireKey == null) {
        sb.append("null");
      } else {
        sb.append(this.requireKey);
      }
      first = false;
    }
    if (isSetAvailableValue()) {
      if (!first) sb.append(", ");
      sb.append("availableValue:");
      if (this.availableValue == null) {
        sb.append("null");
      } else {
        sb.append(this.availableValue);
      }
      first = false;
    }
    if (isSetRequire()) {
      if (!first) sb.append(", ");
      sb.append("require:");
      sb.append(this.require);
      first = false;
    }
    if (isSetTip()) {
      if (!first) sb.append(", ");
      sb.append("tip:");
      if (this.tip == null) {
        sb.append("null");
      } else {
        sb.append(this.tip);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetCreateBy()) {
      if (!first) sb.append(", ");
      sb.append("createBy:");
      if (this.createBy == null) {
        sb.append("null");
      } else {
        sb.append(this.createBy);
      }
      first = false;
    }
    if (isSetCreateAt()) {
      if (!first) sb.append(", ");
      sb.append("createAt:");
      if (this.createAt == null) {
        sb.append("null");
      } else {
        sb.append(this.createAt);
      }
      first = false;
    }
    if (isSetSort()) {
      if (!first) sb.append(", ");
      sb.append("sort:");
      sb.append(this.sort);
      first = false;
    }
    if (isSetDatabaseMapping()) {
      if (!first) sb.append(", ");
      sb.append("databaseMapping:");
      if (this.databaseMapping == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseMapping);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysRoleRegisterRequirementThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysRoleRegisterRequirementThriftStandardScheme getScheme() {
      return new SysRoleRegisterRequirementThriftStandardScheme();
    }
  }

  private static class SysRoleRegisterRequirementThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<SysRoleRegisterRequirementThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysRoleRegisterRequirementThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleId = iprot.readString();
              struct.setRoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHOOL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schoolId = iprot.readString();
              struct.setSchoolIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUIRE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requireKey = iprot.readString();
              struct.setRequireKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVAILABLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.availableValue = iprot.readString();
              struct.setAvailableValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.require = iprot.readByte();
              struct.setRequireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tip = iprot.readString();
              struct.setTipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createBy = iprot.readString();
              struct.setCreateByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sort = iprot.readI32();
              struct.setSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATABASE_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.databaseMapping = iprot.readString();
              struct.setDatabaseMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysRoleRegisterRequirementThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.roleId != null) {
        if (struct.isSetRoleId()) {
          oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
          oprot.writeString(struct.roleId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schoolId != null) {
        if (struct.isSetSchoolId()) {
          oprot.writeFieldBegin(SCHOOL_ID_FIELD_DESC);
          oprot.writeString(struct.schoolId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.requireKey != null) {
        if (struct.isSetRequireKey()) {
          oprot.writeFieldBegin(REQUIRE_KEY_FIELD_DESC);
          oprot.writeString(struct.requireKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.availableValue != null) {
        if (struct.isSetAvailableValue()) {
          oprot.writeFieldBegin(AVAILABLE_VALUE_FIELD_DESC);
          oprot.writeString(struct.availableValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequire()) {
        oprot.writeFieldBegin(REQUIRE_FIELD_DESC);
        oprot.writeByte(struct.require);
        oprot.writeFieldEnd();
      }
      if (struct.tip != null) {
        if (struct.isSetTip()) {
          oprot.writeFieldBegin(TIP_FIELD_DESC);
          oprot.writeString(struct.tip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.createBy != null) {
        if (struct.isSetCreateBy()) {
          oprot.writeFieldBegin(CREATE_BY_FIELD_DESC);
          oprot.writeString(struct.createBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createAt != null) {
        if (struct.isSetCreateAt()) {
          oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
          oprot.writeString(struct.createAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSort()) {
        oprot.writeFieldBegin(SORT_FIELD_DESC);
        oprot.writeI32(struct.sort);
        oprot.writeFieldEnd();
      }
      if (struct.databaseMapping != null) {
        if (struct.isSetDatabaseMapping()) {
          oprot.writeFieldBegin(DATABASE_MAPPING_FIELD_DESC);
          oprot.writeString(struct.databaseMapping);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysRoleRegisterRequirementThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SysRoleRegisterRequirementThriftTupleScheme getScheme() {
      return new SysRoleRegisterRequirementThriftTupleScheme();
    }
  }

  private static class SysRoleRegisterRequirementThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<SysRoleRegisterRequirementThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysRoleRegisterRequirementThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetRoleId()) {
        optionals.set(1);
      }
      if (struct.isSetSchoolId()) {
        optionals.set(2);
      }
      if (struct.isSetRequireKey()) {
        optionals.set(3);
      }
      if (struct.isSetAvailableValue()) {
        optionals.set(4);
      }
      if (struct.isSetRequire()) {
        optionals.set(5);
      }
      if (struct.isSetTip()) {
        optionals.set(6);
      }
      if (struct.isSetType()) {
        optionals.set(7);
      }
      if (struct.isSetCreateBy()) {
        optionals.set(8);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(9);
      }
      if (struct.isSetSort()) {
        optionals.set(10);
      }
      if (struct.isSetDatabaseMapping()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetRoleId()) {
        oprot.writeString(struct.roleId);
      }
      if (struct.isSetSchoolId()) {
        oprot.writeString(struct.schoolId);
      }
      if (struct.isSetRequireKey()) {
        oprot.writeString(struct.requireKey);
      }
      if (struct.isSetAvailableValue()) {
        oprot.writeString(struct.availableValue);
      }
      if (struct.isSetRequire()) {
        oprot.writeByte(struct.require);
      }
      if (struct.isSetTip()) {
        oprot.writeString(struct.tip);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetCreateBy()) {
        oprot.writeString(struct.createBy);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetSort()) {
        oprot.writeI32(struct.sort);
      }
      if (struct.isSetDatabaseMapping()) {
        oprot.writeString(struct.databaseMapping);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysRoleRegisterRequirementThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.roleId = iprot.readString();
        struct.setRoleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schoolId = iprot.readString();
        struct.setSchoolIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.requireKey = iprot.readString();
        struct.setRequireKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.availableValue = iprot.readString();
        struct.setAvailableValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.require = iprot.readByte();
        struct.setRequireIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tip = iprot.readString();
        struct.setTipIsSet(true);
      }
      if (incoming.get(7)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createBy = iprot.readString();
        struct.setCreateByIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sort = iprot.readI32();
        struct.setSortIsSet(true);
      }
      if (incoming.get(11)) {
        struct.databaseMapping = iprot.readString();
        struct.setDatabaseMappingIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

