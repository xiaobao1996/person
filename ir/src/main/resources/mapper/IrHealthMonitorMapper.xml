<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.hy.infoReport.common.mapper.IrHealthMonitorMapper">
  <resultMap id="BaseResultMap" type="cn.hy.infoReport.common.entity.IrHealthMonitor">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="monitor_date" jdbcType="DATE" property="monitorDate" />
    <result column="am_temperature" jdbcType="DECIMAL" property="amTemperature" />
    <result column="am_recheck" jdbcType="TINYINT" property="amRecheck" />
    <result column="am_check_time" jdbcType="TIMESTAMP" property="amCheckTime" />
    <result column="am_human_check" jdbcType="TINYINT" property="amHumanCheck" />
    <result column="pm_temperature" jdbcType="DECIMAL" property="pmTemperature" />
    <result column="pm_recheck" jdbcType="TINYINT" property="pmRecheck" />
    <result column="pm_check_time" jdbcType="TIMESTAMP" property="pmCheckTime" />
    <result column="pm_human_check" jdbcType="TINYINT" property="pmHumanCheck" />
    <result column="health_status" jdbcType="TINYINT" property="healthStatus" />
    <result column="check_status" jdbcType="TINYINT" property="checkStatus" />
    <result column="school_id" jdbcType="VARCHAR" property="schoolId" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, monitor_date, am_temperature, am_recheck, am_check_time, am_human_check,
    pm_temperature, pm_recheck, pm_check_time, pm_human_check, health_status, check_status,
    school_id, create_at, update_at
  </sql>
  <select id="selectByExample" parameterType="cn.hy.infoReport.common.entity.IrHealthMonitorExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ir_health_monitor
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from ir_health_monitor
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from ir_health_monitor
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.hy.infoReport.common.entity.IrHealthMonitorExample">
    delete from ir_health_monitor
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.hy.infoReport.common.entity.IrHealthMonitor">
    insert into ir_health_monitor (id, user_id, monitor_date,
      am_temperature, am_recheck, am_check_time,
      am_human_check, pm_temperature, pm_recheck,
      pm_check_time, pm_human_check, health_status,
      check_status, school_id, create_at,
      update_at)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{monitorDate,jdbcType=DATE},
      #{amTemperature,jdbcType=DECIMAL}, #{amRecheck,jdbcType=TINYINT}, #{amCheckTime,jdbcType=TIMESTAMP},
      #{amHumanCheck,jdbcType=TINYINT}, #{pmTemperature,jdbcType=DECIMAL}, #{pmRecheck,jdbcType=TINYINT},
      #{pmCheckTime,jdbcType=TIMESTAMP}, #{pmHumanCheck,jdbcType=TINYINT}, #{healthStatus,jdbcType=TINYINT},
      #{checkStatus,jdbcType=TINYINT}, #{schoolId,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP},
      #{updateAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.hy.infoReport.common.entity.IrHealthMonitor">
    insert into ir_health_monitor
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="monitorDate != null">
        monitor_date,
      </if>
      <if test="amTemperature != null">
        am_temperature,
      </if>
      <if test="amRecheck != null">
        am_recheck,
      </if>
      <if test="amCheckTime != null">
        am_check_time,
      </if>
      <if test="amHumanCheck != null">
        am_human_check,
      </if>
      <if test="pmTemperature != null">
        pm_temperature,
      </if>
      <if test="pmRecheck != null">
        pm_recheck,
      </if>
      <if test="pmCheckTime != null">
        pm_check_time,
      </if>
      <if test="pmHumanCheck != null">
        pm_human_check,
      </if>
      <if test="healthStatus != null">
        health_status,
      </if>
      <if test="checkStatus != null">
        check_status,
      </if>
      <if test="schoolId != null">
        school_id,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="updateAt != null">
        update_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="monitorDate != null">
        #{monitorDate,jdbcType=DATE},
      </if>
      <if test="amTemperature != null">
        #{amTemperature,jdbcType=DECIMAL},
      </if>
      <if test="amRecheck != null">
        #{amRecheck,jdbcType=TINYINT},
      </if>
      <if test="amCheckTime != null">
        #{amCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amHumanCheck != null">
        #{amHumanCheck,jdbcType=TINYINT},
      </if>
      <if test="pmTemperature != null">
        #{pmTemperature,jdbcType=DECIMAL},
      </if>
      <if test="pmRecheck != null">
        #{pmRecheck,jdbcType=TINYINT},
      </if>
      <if test="pmCheckTime != null">
        #{pmCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="pmHumanCheck != null">
        #{pmHumanCheck,jdbcType=TINYINT},
      </if>
      <if test="healthStatus != null">
        #{healthStatus,jdbcType=TINYINT},
      </if>
      <if test="checkStatus != null">
        #{checkStatus,jdbcType=TINYINT},
      </if>
      <if test="schoolId != null">
        #{schoolId,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.hy.infoReport.common.entity.IrHealthMonitorExample" resultType="java.lang.Long">
    select count(*) from ir_health_monitor
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ir_health_monitor
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.monitorDate != null">
        monitor_date = #{record.monitorDate,jdbcType=DATE},
      </if>
      <if test="record.amTemperature != null">
        am_temperature = #{record.amTemperature,jdbcType=DECIMAL},
      </if>
      <if test="record.amRecheck != null">
        am_recheck = #{record.amRecheck,jdbcType=TINYINT},
      </if>
      <if test="record.amCheckTime != null">
        am_check_time = #{record.amCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.amHumanCheck != null">
        am_human_check = #{record.amHumanCheck,jdbcType=TINYINT},
      </if>
      <if test="record.pmTemperature != null">
        pm_temperature = #{record.pmTemperature,jdbcType=DECIMAL},
      </if>
      <if test="record.pmRecheck != null">
        pm_recheck = #{record.pmRecheck,jdbcType=TINYINT},
      </if>
      <if test="record.pmCheckTime != null">
        pm_check_time = #{record.pmCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.pmHumanCheck != null">
        pm_human_check = #{record.pmHumanCheck,jdbcType=TINYINT},
      </if>
      <if test="record.healthStatus != null">
        health_status = #{record.healthStatus,jdbcType=TINYINT},
      </if>
      <if test="record.checkStatus != null">
        check_status = #{record.checkStatus,jdbcType=TINYINT},
      </if>
      <if test="record.schoolId != null">
        school_id = #{record.schoolId,jdbcType=VARCHAR},
      </if>
      <if test="record.createAt != null">
        create_at = #{record.createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateAt != null">
        update_at = #{record.updateAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ir_health_monitor
    set id = #{record.id,jdbcType=VARCHAR},
    user_id = #{record.userId,jdbcType=VARCHAR},
    monitor_date = #{record.monitorDate,jdbcType=DATE},
    am_temperature = #{record.amTemperature,jdbcType=DECIMAL},
    am_recheck = #{record.amRecheck,jdbcType=TINYINT},
    am_check_time = #{record.amCheckTime,jdbcType=TIMESTAMP},
    am_human_check = #{record.amHumanCheck,jdbcType=TINYINT},
    pm_temperature = #{record.pmTemperature,jdbcType=DECIMAL},
    pm_recheck = #{record.pmRecheck,jdbcType=TINYINT},
    pm_check_time = #{record.pmCheckTime,jdbcType=TIMESTAMP},
    pm_human_check = #{record.pmHumanCheck,jdbcType=TINYINT},
    health_status = #{record.healthStatus,jdbcType=TINYINT},
    check_status = #{record.checkStatus,jdbcType=TINYINT},
    school_id = #{record.schoolId,jdbcType=VARCHAR},
    create_at = #{record.createAt,jdbcType=TIMESTAMP},
    update_at = #{record.updateAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.hy.infoReport.common.entity.IrHealthMonitor">
    update ir_health_monitor
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="monitorDate != null">
        monitor_date = #{monitorDate,jdbcType=DATE},
      </if>
      <if test="amTemperature != null">
        am_temperature = #{amTemperature,jdbcType=DECIMAL},
      </if>
      <if test="amRecheck != null">
        am_recheck = #{amRecheck,jdbcType=TINYINT},
      </if>
      <if test="amCheckTime != null">
        am_check_time = #{amCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amHumanCheck != null">
        am_human_check = #{amHumanCheck,jdbcType=TINYINT},
      </if>
      <if test="pmTemperature != null">
        pm_temperature = #{pmTemperature,jdbcType=DECIMAL},
      </if>
      <if test="pmRecheck != null">
        pm_recheck = #{pmRecheck,jdbcType=TINYINT},
      </if>
      <if test="pmCheckTime != null">
        pm_check_time = #{pmCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="pmHumanCheck != null">
        pm_human_check = #{pmHumanCheck,jdbcType=TINYINT},
      </if>
      <if test="healthStatus != null">
        health_status = #{healthStatus,jdbcType=TINYINT},
      </if>
      <if test="checkStatus != null">
        check_status = #{checkStatus,jdbcType=TINYINT},
      </if>
      <if test="schoolId != null">
        school_id = #{schoolId,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        update_at = #{updateAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.hy.infoReport.common.entity.IrHealthMonitor">
    update ir_health_monitor
    set user_id = #{userId,jdbcType=VARCHAR},
      monitor_date = #{monitorDate,jdbcType=DATE},
      am_temperature = #{amTemperature,jdbcType=DECIMAL},
      am_recheck = #{amRecheck,jdbcType=TINYINT},
      am_check_time = #{amCheckTime,jdbcType=TIMESTAMP},
      am_human_check = #{amHumanCheck,jdbcType=TINYINT},
      pm_temperature = #{pmTemperature,jdbcType=DECIMAL},
      pm_recheck = #{pmRecheck,jdbcType=TINYINT},
      pm_check_time = #{pmCheckTime,jdbcType=TIMESTAMP},
      pm_human_check = #{pmHumanCheck,jdbcType=TINYINT},
      health_status = #{healthStatus,jdbcType=TINYINT},
      check_status = #{checkStatus,jdbcType=TINYINT},
      school_id = #{schoolId,jdbcType=VARCHAR},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      update_at = #{updateAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
   <select id="findStudentHealthMonitorBy" resultType="cn.hy.infoReport.module.business.vo.StudentHealthMonitorVo">
    SELECT
        ps.user_id AS userId,
        ps.name AS name,
        ps.class_id AS classId,
        pc.grade AS grade,
        pc.class_code AS classCode,
        pc.class_name AS className,
        hmTmp.monitor_date AS monitorDate,
        hmTmp.am_temperature AS amTemperature,
        hmTmp.am_recheck AS amRecheck,
        hmTmp.pm_temperature AS pmTemperature,
        hmTmp.pm_recheck AS pmRecheck,
        hmTmp.health_status AS healthStatus,
        hmTmp.check_status AS checkStatus,
        IF(
          pc.class_code IS NOT NULL AND CHAR_LENGTH(pc.class_code) != 0 AND (pc.class_code REGEXP '^(-?[0-9]+)(\.[0-9]+)?$') = 1,
          CAST(pc.class_code AS UNSIGNED INTEGER), null
        ) AS orderNumber
    FROM
        pms_student ps
        LEFT JOIN (
            SELECT
                *
            FROM
                ir_health_monitor
            WHERE
                school_id = #{schoolId}
                AND monitor_date = #{monitorDate}
        ) hmTmp ON ps.user_id = hmTmp.user_id
        LEFT JOIN pms_class pc ON ps.class_id = pc.office_id
    WHERE
        ps.school_id = #{schoolId}
    <if test="name != null and name != ''">
      AND ps.name LIKE CONCAT("%", #{name}, "%")
    </if>
    <if test="classId != null and classId != ''">
      AND ps.class_id = #{classId}
    </if>
    <if test="healthStatus != null and healthStatus == 0">
      AND hmTmp.health_status = #{healthStatus}
    </if>
    <if test="checkStatus != null">
      <if test="checkStatus == 0">
        AND (hmTmp.check_status = #{checkStatus} OR hmTmp.check_status IS NULL)
      </if>
      <if test="checkStatus != 0">
        AND hmTmp.check_status = #{checkStatus}
      </if>
    </if>
    ORDER BY hmTmp.health_status DESC, hmTmp.check_status DESC, pc.grade DESC, -orderNumber DESC, pc.class_code
  </select>
  <update id="updateHealthStatus">
    UPDATE
        ir_health_monitor
    SET
        health_status = 2
    WHERE
        school_id = #{schoolId}
        AND ((am_recheck = 1 AND am_temperature >= #{lowLimit}) OR (pm_recheck = 1 AND pm_temperature >= #{lowLimit}));

    UPDATE
        ir_health_monitor
    SET
        health_status = 1
    WHERE
        school_id = #{schoolId}
        AND (am_recheck IS NULL OR am_recheck = 0)
        AND (pm_recheck IS NULL OR pm_recheck = 0)
	    AND (am_temperature >= #{lowLimit} OR pm_temperature >= #{lowLimit});

    UPDATE
        ir_health_monitor
    SET
        health_status = 0
    WHERE
        school_id = #{schoolId}
        AND (am_temperature &lt; #{lowLimit} OR am_temperature IS NULL)
        AND (pm_temperature &lt; #{lowLimit} OR pm_temperature IS NULL)


  </update>
  <select id="findStaffHealthMonitorBy" resultType="cn.hy.infoReport.module.business.vo.StaffHealthMonitorVo">
    SELECT
        ps.user_id AS userId,
        ps.name AS name,
        ps.mobile AS mobile,
        hmTmp.monitor_date AS monitorDate,
        hmTmp.am_temperature AS amTemperature,
        hmTmp.am_recheck AS amRecheck,
        hmTmp.pm_temperature AS pmTemperature,
        hmTmp.pm_recheck AS pmRecheck,
        hmTmp.health_status AS healthStatus,
        hmTmp.check_status AS checkStatus
    FROM
        pms_staff ps
        LEFT JOIN (
            SELECT
                *
            FROM
                ir_health_monitor
            WHERE
                school_id = #{schoolId}
                AND monitor_date = #{monitorDate}
        ) hmTmp ON ps.user_id = hmTmp.user_id
    WHERE
        ps.school_id = #{schoolId}
    <if test="name != null and name != ''">
      AND ps.name LIKE CONCAT("%", #{name}, "%")
    </if>
    <if test="mobile != null and mobile != ''">
      AND ps.mobile LIKE CONCAT("%", #{mobile}, "%")
    </if>
    <if test="healthStatus != null and healthStatus != ''">
      AND hmTmp.health_status = #{healthStatus}
    </if>
    <if test="checkStatus != null">
      <if test="checkStatus == 0">
        AND (hmTmp.check_status = #{checkStatus} OR hmTmp.check_status IS NULL)
      </if>
      <if test="checkStatus != 0">
        AND hmTmp.check_status = #{checkStatus}
      </if>
    </if>
    ORDER BY hmTmp.health_status DESC, hmTmp.check_status, CONVERT(name USING gbk)
  </select>
  <select id="studentCalc" resultType="cn.hy.infoReport.module.business.vo.CalcVo">
    SELECT
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.health_status AS healthStatus
        FROM
            pms_student ps
            LEFT JOIN (
                SELECT
                    user_id,
                    health_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE healthStatus = 2), 0) AS confirmedAbnormalCount,
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.check_status
        FROM
            pms_student ps
            LEFT JOIN (
                SELECT
                    user_id,
                    check_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE check_status IS NULL OR check_status = 0 OR check_status = 1), 0) AS amNotMonitorCount,
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.check_status
        FROM
            pms_student ps
            LEFT JOIN (
                SELECT
                    user_id,
                    check_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE check_status IS NULL OR check_status = 0 OR check_status = 2), 0) AS pmNotMonitorCount,
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.health_status AS healthStatus
        FROM
            pms_student ps
            LEFT JOIN (
                SELECT
                    user_id,
                    health_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE healthStatus = 1), 0) AS needRecheckCount
  </select>

   <select id="staffCalc" resultType="cn.hy.infoReport.module.business.vo.CalcVo">
    SELECT
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.health_status AS healthStatus
        FROM
            pms_staff ps
            LEFT JOIN (
                SELECT
                    user_id,
                    health_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE healthStatus = 2), 0) AS confirmedAbnormalCount,
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.check_status
        FROM
            pms_staff ps
            LEFT JOIN (
                SELECT
                    user_id,
                    check_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE check_status IS NULL OR check_status = 0 OR check_status = 1), 0) AS amNotMonitorCount,
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.check_status
        FROM
            pms_staff ps
            LEFT JOIN (
                SELECT
                    user_id,
                    check_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE check_status IS NULL OR check_status = 0 OR check_status = 2), 0) AS pmNotMonitorCount,
    IFNULL((SELECT COUNT(*) FROM  (
        SELECT
            hmTmp.health_status AS healthStatus
        FROM
            pms_staff ps
            LEFT JOIN (
                SELECT
                    user_id,
                    health_status
                FROM
                    ir_health_monitor
                WHERE
                    school_id = #{schoolId}
                    AND monitor_date = #{monitorDate}
            ) hmTmp ON ps.user_id = hmTmp.user_id
        WHERE
            ps.school_id = #{schoolId}
    ) tmp WHERE healthStatus = 1), 0) AS needRecheckCount
  </select>
  <select id="findAbnormalSimplifyInfo" resultType="cn.hy.infoReport.module.business.vo.IrHealthMonitorSimplifyVo">
    SELECT
        user_id,
        monitor_date
    FROM
        ir_health_monitor
    WHERE
        school_id = #{schoolId}
        AND user_id IN (
            <foreach collection="userIdList" separator="," item="userId">
              #{userId}
            </foreach>
        )
        AND monitor_date between #{monitorDateStart} AND #{monitorDateEnd}
        AND health_status = #{healthStatus}
  </select>
</mapper>
